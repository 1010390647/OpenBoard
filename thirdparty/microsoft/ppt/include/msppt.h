/****************************************************************************
**
** Namespace PowerPoint generated by dumpcpp from type library
** c:\Program Files\Microsoft Office\OFFICE11\msppt.olb
**
****************************************************************************/

#ifndef QAX_DUMPCPP_POWERPOINT_H
#define QAX_DUMPCPP_POWERPOINT_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef POWERPOINT_EXPORT
#define POWERPOINT_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace
namespace Office {
    class CommandBars;
    class Assistant;
    class FileSearch;
    class IFind;
    enum MsoTriState;
    class AnswerWizard;
    class COMAddIns;
    class LanguageSettings;
    class MsoDebugOptions;
    enum MsoFeatureInstall;
    class FileDialog;
    enum MsoFileDialogType;
    enum MsoAutomationSecurity;
    class NewFile;
    enum MsoColorType;
    enum MsoExtraInfoMethod;
    enum MsoFarEastLineBreakLanguageID;
    enum MsoLanguageID;
    class HTMLProject;
    enum MsoEncoding;
    class SignatureSet;
    class Permission;
    class SharedWorkspace;
    class Sync;
    class DocumentLibraryVersions;
    enum MsoHyperlinkType;
    enum MsoOrientation;
    class Scripts;
    enum MsoCalloutType;
    enum MsoConnectorType;
    enum MsoTextOrientation;
    enum MsoAutoShapeType;
    enum MsoPresetTextEffect;
    enum MsoEditingType;
    enum MsoDiagramType;
    enum MsoSegmentType;
    enum MsoFlipCmd;
    enum MsoScaleFrom;
    enum MsoZOrderCmd;
    enum MsoBlackWhiteMode;
    enum MsoShapeType;
    class Script;
    enum MsoAlignCmd;
    enum MsoDistributeCmd;
    enum MsoPictureColorType;
    enum MsoGradientStyle;
    enum MsoPatternType;
    enum MsoPresetGradientType;
    enum MsoPresetTexture;
    enum MsoGradientColorType;
    enum MsoTextureType;
    enum MsoFillType;
    enum MsoArrowheadLength;
    enum MsoArrowheadStyle;
    enum MsoArrowheadWidth;
    enum MsoLineDashStyle;
    enum MsoLineStyle;
    enum MsoShadowType;
    enum MsoTextEffectAlignment;
    enum MsoPresetTextEffectShape;
    enum MsoPresetThreeDFormat;
    enum MsoPresetExtrusionDirection;
    enum MsoExtrusionColorType;
    enum MsoPresetLightingDirection;
    enum MsoPresetLightingSoftness;
    enum MsoPresetMaterial;
    enum MsoHorizontalAnchor;
    enum MsoVerticalAnchor;
    enum MsoCalloutDropType;
    enum MsoCalloutAngleType;
    enum MsoScreenSize;
    class WebPageFonts;
    enum MsoTargetBrowser;
    enum MsoRelativeNodePosition;
    enum MsoDiagramNodeType;
    enum MsoOrgChartLayoutType;
}

namespace VBIDE {
    class VBE;
    class VBProject;
}


namespace PowerPoint {

    enum MsoAnimAccumulate {
        msoAnimAccumulateNone   = 1,
        msoAnimAccumulateAlways = 2
    };

    enum MsoAnimAdditive {
        msoAnimAdditiveAddBase  = 1,
        msoAnimAdditiveAddSum   = 2
    };

    enum MsoAnimAfterEffect {
        msoAnimAfterEffectMixed = -1,
        msoAnimAfterEffectNone  = 0,
        msoAnimAfterEffectDim   = 1,
        msoAnimAfterEffectHide  = 2,
        msoAnimAfterEffectHideOnNextClick= 3
    };

    enum MsoAnimCommandType {
        msoAnimCommandTypeEvent = 0,
        msoAnimCommandTypeCall  = 1,
        msoAnimCommandTypeVerb  = 2
    };

    enum MsoAnimDirection {
        msoAnimDirectionNone    = 0,
        msoAnimDirectionUp      = 1,
        msoAnimDirectionRight   = 2,
        msoAnimDirectionDown    = 3,
        msoAnimDirectionLeft    = 4,
        msoAnimDirectionOrdinalMask= 5,
        msoAnimDirectionUpLeft  = 6,
        msoAnimDirectionUpRight = 7,
        msoAnimDirectionDownRight= 8,
        msoAnimDirectionDownLeft= 9,
        msoAnimDirectionTop     = 10,
        msoAnimDirectionBottom  = 11,
        msoAnimDirectionTopLeft = 12,
        msoAnimDirectionTopRight= 13,
        msoAnimDirectionBottomRight= 14,
        msoAnimDirectionBottomLeft= 15,
        msoAnimDirectionHorizontal= 16,
        msoAnimDirectionVertical= 17,
        msoAnimDirectionAcross  = 18,
        msoAnimDirectionIn      = 19,
        msoAnimDirectionOut     = 20,
        msoAnimDirectionClockwise= 21,
        msoAnimDirectionCounterclockwise= 22,
        msoAnimDirectionHorizontalIn= 23,
        msoAnimDirectionHorizontalOut= 24,
        msoAnimDirectionVerticalIn= 25,
        msoAnimDirectionVerticalOut= 26,
        msoAnimDirectionSlightly= 27,
        msoAnimDirectionCenter  = 28,
        msoAnimDirectionInSlightly= 29,
        msoAnimDirectionInCenter= 30,
        msoAnimDirectionInBottom= 31,
        msoAnimDirectionOutSlightly= 32,
        msoAnimDirectionOutCenter= 33,
        msoAnimDirectionOutBottom= 34,
        msoAnimDirectionFontBold= 35,
        msoAnimDirectionFontItalic= 36,
        msoAnimDirectionFontUnderline= 37,
        msoAnimDirectionFontStrikethrough= 38,
        msoAnimDirectionFontShadow= 39,
        msoAnimDirectionFontAllCaps= 40,
        msoAnimDirectionInstant = 41,
        msoAnimDirectionGradual = 42,
        msoAnimDirectionCycleClockwise= 43,
        msoAnimDirectionCycleCounterclockwise= 44
    };

    enum MsoAnimEffect {
        msoAnimEffectCustom     = 0,
        msoAnimEffectAppear     = 1,
        msoAnimEffectFly        = 2,
        msoAnimEffectBlinds     = 3,
        msoAnimEffectBox        = 4,
        msoAnimEffectCheckerboard= 5,
        msoAnimEffectCircle     = 6,
        msoAnimEffectCrawl      = 7,
        msoAnimEffectDiamond    = 8,
        msoAnimEffectDissolve   = 9,
        msoAnimEffectFade       = 10,
        msoAnimEffectFlashOnce  = 11,
        msoAnimEffectPeek       = 12,
        msoAnimEffectPlus       = 13,
        msoAnimEffectRandomBars = 14,
        msoAnimEffectSpiral     = 15,
        msoAnimEffectSplit      = 16,
        msoAnimEffectStretch    = 17,
        msoAnimEffectStrips     = 18,
        msoAnimEffectSwivel     = 19,
        msoAnimEffectWedge      = 20,
        msoAnimEffectWheel      = 21,
        msoAnimEffectWipe       = 22,
        msoAnimEffectZoom       = 23,
        msoAnimEffectRandomEffects= 24,
        msoAnimEffectBoomerang  = 25,
        msoAnimEffectBounce     = 26,
        msoAnimEffectColorReveal= 27,
        msoAnimEffectCredits    = 28,
        msoAnimEffectEaseIn     = 29,
        msoAnimEffectFloat      = 30,
        msoAnimEffectGrowAndTurn= 31,
        msoAnimEffectLightSpeed = 32,
        msoAnimEffectPinwheel   = 33,
        msoAnimEffectRiseUp     = 34,
        msoAnimEffectSwish      = 35,
        msoAnimEffectThinLine   = 36,
        msoAnimEffectUnfold     = 37,
        msoAnimEffectWhip       = 38,
        msoAnimEffectAscend     = 39,
        msoAnimEffectCenterRevolve= 40,
        msoAnimEffectFadedSwivel= 41,
        msoAnimEffectDescend    = 42,
        msoAnimEffectSling      = 43,
        msoAnimEffectSpinner    = 44,
        msoAnimEffectStretchy   = 45,
        msoAnimEffectZip        = 46,
        msoAnimEffectArcUp      = 47,
        msoAnimEffectFadedZoom  = 48,
        msoAnimEffectGlide      = 49,
        msoAnimEffectExpand     = 50,
        msoAnimEffectFlip       = 51,
        msoAnimEffectShimmer    = 52,
        msoAnimEffectFold       = 53,
        msoAnimEffectChangeFillColor= 54,
        msoAnimEffectChangeFont = 55,
        msoAnimEffectChangeFontColor= 56,
        msoAnimEffectChangeFontSize= 57,
        msoAnimEffectChangeFontStyle= 58,
        msoAnimEffectGrowShrink = 59,
        msoAnimEffectChangeLineColor= 60,
        msoAnimEffectSpin       = 61,
        msoAnimEffectTransparency= 62,
        msoAnimEffectBoldFlash  = 63,
        msoAnimEffectBlast      = 64,
        msoAnimEffectBoldReveal = 65,
        msoAnimEffectBrushOnColor= 66,
        msoAnimEffectBrushOnUnderline= 67,
        msoAnimEffectColorBlend = 68,
        msoAnimEffectColorWave  = 69,
        msoAnimEffectComplementaryColor= 70,
        msoAnimEffectComplementaryColor2= 71,
        msoAnimEffectContrastingColor= 72,
        msoAnimEffectDarken     = 73,
        msoAnimEffectDesaturate = 74,
        msoAnimEffectFlashBulb  = 75,
        msoAnimEffectFlicker    = 76,
        msoAnimEffectGrowWithColor= 77,
        msoAnimEffectLighten    = 78,
        msoAnimEffectStyleEmphasis= 79,
        msoAnimEffectTeeter     = 80,
        msoAnimEffectVerticalGrow= 81,
        msoAnimEffectWave       = 82,
        msoAnimEffectMediaPlay  = 83,
        msoAnimEffectMediaPause = 84,
        msoAnimEffectMediaStop  = 85,
        msoAnimEffectPathCircle = 86,
        msoAnimEffectPathRightTriangle= 87,
        msoAnimEffectPathDiamond= 88,
        msoAnimEffectPathHexagon= 89,
        msoAnimEffectPath5PointStar= 90,
        msoAnimEffectPathCrescentMoon= 91,
        msoAnimEffectPathSquare = 92,
        msoAnimEffectPathTrapezoid= 93,
        msoAnimEffectPathHeart  = 94,
        msoAnimEffectPathOctagon= 95,
        msoAnimEffectPath6PointStar= 96,
        msoAnimEffectPathFootball= 97,
        msoAnimEffectPathEqualTriangle= 98,
        msoAnimEffectPathParallelogram= 99,
        msoAnimEffectPathPentagon= 100,
        msoAnimEffectPath4PointStar= 101,
        msoAnimEffectPath8PointStar= 102,
        msoAnimEffectPathTeardrop= 103,
        msoAnimEffectPathPointyStar= 104,
        msoAnimEffectPathCurvedSquare= 105,
        msoAnimEffectPathCurvedX= 106,
        msoAnimEffectPathVerticalFigure8= 107,
        msoAnimEffectPathCurvyStar= 108,
        msoAnimEffectPathLoopdeLoop= 109,
        msoAnimEffectPathBuzzsaw= 110,
        msoAnimEffectPathHorizontalFigure8= 111,
        msoAnimEffectPathPeanut = 112,
        msoAnimEffectPathFigure8Four= 113,
        msoAnimEffectPathNeutron= 114,
        msoAnimEffectPathSwoosh = 115,
        msoAnimEffectPathBean   = 116,
        msoAnimEffectPathPlus   = 117,
        msoAnimEffectPathInvertedTriangle= 118,
        msoAnimEffectPathInvertedSquare= 119,
        msoAnimEffectPathLeft   = 120,
        msoAnimEffectPathTurnRight= 121,
        msoAnimEffectPathArcDown= 122,
        msoAnimEffectPathZigzag = 123,
        msoAnimEffectPathSCurve2= 124,
        msoAnimEffectPathSineWave= 125,
        msoAnimEffectPathBounceLeft= 126,
        msoAnimEffectPathDown   = 127,
        msoAnimEffectPathTurnUp = 128,
        msoAnimEffectPathArcUp  = 129,
        msoAnimEffectPathHeartbeat= 130,
        msoAnimEffectPathSpiralRight= 131,
        msoAnimEffectPathWave   = 132,
        msoAnimEffectPathCurvyLeft= 133,
        msoAnimEffectPathDiagonalDownRight= 134,
        msoAnimEffectPathTurnDown= 135,
        msoAnimEffectPathArcLeft= 136,
        msoAnimEffectPathFunnel = 137,
        msoAnimEffectPathSpring = 138,
        msoAnimEffectPathBounceRight= 139,
        msoAnimEffectPathSpiralLeft= 140,
        msoAnimEffectPathDiagonalUpRight= 141,
        msoAnimEffectPathTurnUpRight= 142,
        msoAnimEffectPathArcRight= 143,
        msoAnimEffectPathSCurve1= 144,
        msoAnimEffectPathDecayingWave= 145,
        msoAnimEffectPathCurvyRight= 146,
        msoAnimEffectPathStairsDown= 147,
        msoAnimEffectPathUp     = 148,
        msoAnimEffectPathRight  = 149
    };

    enum MsoAnimEffectAfter {
        msoAnimEffectAfterFreeze= 1,
        msoAnimEffectAfterRemove= 2,
        msoAnimEffectAfterHold  = 3,
        msoAnimEffectAfterTransition= 4
    };

    enum MsoAnimEffectRestart {
        msoAnimEffectRestartAlways= 1,
        msoAnimEffectRestartWhenOff= 2,
        msoAnimEffectRestartNever= 3
    };

    enum MsoAnimFilterEffectSubtype {
        msoAnimFilterEffectSubtypeNone= 0,
        msoAnimFilterEffectSubtypeInVertical= 1,
        msoAnimFilterEffectSubtypeOutVertical= 2,
        msoAnimFilterEffectSubtypeInHorizontal= 3,
        msoAnimFilterEffectSubtypeOutHorizontal= 4,
        msoAnimFilterEffectSubtypeHorizontal= 5,
        msoAnimFilterEffectSubtypeVertical= 6,
        msoAnimFilterEffectSubtypeIn= 7,
        msoAnimFilterEffectSubtypeOut= 8,
        msoAnimFilterEffectSubtypeAcross= 9,
        msoAnimFilterEffectSubtypeFromLeft= 10,
        msoAnimFilterEffectSubtypeFromRight= 11,
        msoAnimFilterEffectSubtypeFromTop= 12,
        msoAnimFilterEffectSubtypeFromBottom= 13,
        msoAnimFilterEffectSubtypeDownLeft= 14,
        msoAnimFilterEffectSubtypeUpLeft= 15,
        msoAnimFilterEffectSubtypeDownRight= 16,
        msoAnimFilterEffectSubtypeUpRight= 17,
        msoAnimFilterEffectSubtypeSpokes1= 18,
        msoAnimFilterEffectSubtypeSpokes2= 19,
        msoAnimFilterEffectSubtypeSpokes3= 20,
        msoAnimFilterEffectSubtypeSpokes4= 21,
        msoAnimFilterEffectSubtypeSpokes8= 22,
        msoAnimFilterEffectSubtypeLeft= 23,
        msoAnimFilterEffectSubtypeRight= 24,
        msoAnimFilterEffectSubtypeDown= 25,
        msoAnimFilterEffectSubtypeUp= 26
    };

    enum MsoAnimFilterEffectType {
        msoAnimFilterEffectTypeNone= 0,
        msoAnimFilterEffectTypeBarn= 1,
        msoAnimFilterEffectTypeBlinds= 2,
        msoAnimFilterEffectTypeBox= 3,
        msoAnimFilterEffectTypeCheckerboard= 4,
        msoAnimFilterEffectTypeCircle= 5,
        msoAnimFilterEffectTypeDiamond= 6,
        msoAnimFilterEffectTypeDissolve= 7,
        msoAnimFilterEffectTypeFade= 8,
        msoAnimFilterEffectTypeImage= 9,
        msoAnimFilterEffectTypePixelate= 10,
        msoAnimFilterEffectTypePlus= 11,
        msoAnimFilterEffectTypeRandomBar= 12,
        msoAnimFilterEffectTypeSlide= 13,
        msoAnimFilterEffectTypeStretch= 14,
        msoAnimFilterEffectTypeStrips= 15,
        msoAnimFilterEffectTypeWedge= 16,
        msoAnimFilterEffectTypeWheel= 17,
        msoAnimFilterEffectTypeWipe= 18
    };

    enum MsoAnimProperty {
        msoAnimNone             = 0,
        msoAnimX                = 1,
        msoAnimY                = 2,
        msoAnimWidth            = 3,
        msoAnimHeight           = 4,
        msoAnimOpacity          = 5,
        msoAnimRotation         = 6,
        msoAnimColor            = 7,
        msoAnimVisibility       = 8,
        msoAnimTextFontBold     = 100,
        msoAnimTextFontColor    = 101,
        msoAnimTextFontEmboss   = 102,
        msoAnimTextFontItalic   = 103,
        msoAnimTextFontName     = 104,
        msoAnimTextFontShadow   = 105,
        msoAnimTextFontSize     = 106,
        msoAnimTextFontSubscript= 107,
        msoAnimTextFontSuperscript= 108,
        msoAnimTextFontUnderline= 109,
        msoAnimTextFontStrikeThrough= 110,
        msoAnimTextBulletCharacter= 111,
        msoAnimTextBulletFontName= 112,
        msoAnimTextBulletNumber = 113,
        msoAnimTextBulletColor  = 114,
        msoAnimTextBulletRelativeSize= 115,
        msoAnimTextBulletStyle  = 116,
        msoAnimTextBulletType   = 117,
        msoAnimShapePictureContrast= 1000,
        msoAnimShapePictureBrightness= 1001,
        msoAnimShapePictureGamma= 1002,
        msoAnimShapePictureGrayscale= 1003,
        msoAnimShapeFillOn      = 1004,
        msoAnimShapeFillColor   = 1005,
        msoAnimShapeFillOpacity = 1006,
        msoAnimShapeFillBackColor= 1007,
        msoAnimShapeLineOn      = 1008,
        msoAnimShapeLineColor   = 1009,
        msoAnimShapeShadowOn    = 1010,
        msoAnimShapeShadowType  = 1011,
        msoAnimShapeShadowColor = 1012,
        msoAnimShapeShadowOpacity= 1013,
        msoAnimShapeShadowOffsetX= 1014,
        msoAnimShapeShadowOffsetY= 1015
    };

    enum MsoAnimTextUnitEffect {
        msoAnimTextUnitEffectMixed= -1,
        msoAnimTextUnitEffectByParagraph= 0,
        msoAnimTextUnitEffectByCharacter= 1,
        msoAnimTextUnitEffectByWord= 2
    };

    enum MsoAnimTriggerType {
        msoAnimTriggerMixed     = -1,
        msoAnimTriggerNone      = 0,
        msoAnimTriggerOnPageClick= 1,
        msoAnimTriggerWithPrevious= 2,
        msoAnimTriggerAfterPrevious= 3,
        msoAnimTriggerOnShapeClick= 4
    };

    enum MsoAnimType {
        msoAnimTypeMixed        = -2,
        msoAnimTypeNone         = 0,
        msoAnimTypeMotion       = 1,
        msoAnimTypeColor        = 2,
        msoAnimTypeScale        = 3,
        msoAnimTypeRotation     = 4,
        msoAnimTypeProperty     = 5,
        msoAnimTypeCommand      = 6,
        msoAnimTypeFilter       = 7,
        msoAnimTypeSet          = 8
    };

    enum MsoAnimateByLevel {
        msoAnimateLevelMixed    = -1,
        msoAnimateLevelNone     = 0,
        msoAnimateTextByAllLevels= 1,
        msoAnimateTextByFirstLevel= 2,
        msoAnimateTextBySecondLevel= 3,
        msoAnimateTextByThirdLevel= 4,
        msoAnimateTextByFourthLevel= 5,
        msoAnimateTextByFifthLevel= 6,
        msoAnimateChartAllAtOnce= 7,
        msoAnimateChartByCategory= 8,
        msoAnimateChartByCategoryElements= 9,
        msoAnimateChartBySeries = 10,
        msoAnimateChartBySeriesElements= 11,
        msoAnimateDiagramAllAtOnce= 12,
        msoAnimateDiagramDepthByNode= 13,
        msoAnimateDiagramDepthByBranch= 14,
        msoAnimateDiagramBreadthByNode= 15,
        msoAnimateDiagramBreadthByLevel= 16,
        msoAnimateDiagramClockwise= 17,
        msoAnimateDiagramClockwiseIn= 18,
        msoAnimateDiagramClockwiseOut= 19,
        msoAnimateDiagramCounterClockwise= 20,
        msoAnimateDiagramCounterClockwiseIn= 21,
        msoAnimateDiagramCounterClockwiseOut= 22,
        msoAnimateDiagramInByRing= 23,
        msoAnimateDiagramOutByRing= 24,
        msoAnimateDiagramUp     = 25,
        msoAnimateDiagramDown   = 26
    };

    enum PpActionType {
        ppActionMixed           = -2,
        ppActionNone            = 0,
        ppActionNextSlide       = 1,
        ppActionPreviousSlide   = 2,
        ppActionFirstSlide      = 3,
        ppActionLastSlide       = 4,
        ppActionLastSlideViewed = 5,
        ppActionEndShow         = 6,
        ppActionHyperlink       = 7,
        ppActionRunMacro        = 8,
        ppActionRunProgram      = 9,
        ppActionNamedSlideShow  = 10,
        ppActionOLEVerb         = 11,
        ppActionPlay            = 12
    };

    enum PpAdvanceMode {
        ppAdvanceModeMixed      = -2,
        ppAdvanceOnClick        = 1,
        ppAdvanceOnTime         = 2
    };

    enum PpAfterEffect {
        ppAfterEffectMixed      = -2,
        ppAfterEffectNothing    = 0,
        ppAfterEffectHide       = 1,
        ppAfterEffectDim        = 2,
        ppAfterEffectHideOnClick= 3
    };

    enum PpAlertLevel {
        ppAlertsNone            = 1,
        ppAlertsAll             = 2
    };

    enum PpArrangeStyle {
        ppArrangeTiled          = 1,
        ppArrangeCascade        = 2
    };

    enum PpAutoSize {
        ppAutoSizeMixed         = -2,
        ppAutoSizeNone          = 0,
        ppAutoSizeShapeToFitText= 1
    };

    enum PpBaselineAlignment {
        ppBaselineAlignMixed    = -2,
        ppBaselineAlignBaseline = 1,
        ppBaselineAlignTop      = 2,
        ppBaselineAlignCenter   = 3,
        ppBaselineAlignFarEast50= 4
    };

    enum PpBorderType {
        ppBorderTop             = 1,
        ppBorderLeft            = 2,
        ppBorderBottom          = 3,
        ppBorderRight           = 4,
        ppBorderDiagonalDown    = 5,
        ppBorderDiagonalUp      = 6
    };

    enum PpBulletType {
        ppBulletMixed           = -2,
        ppBulletNone            = 0,
        ppBulletUnnumbered      = 1,
        ppBulletNumbered        = 2,
        ppBulletPicture         = 3
    };

    enum PpChangeCase {
        ppCaseSentence          = 1,
        ppCaseLower             = 2,
        ppCaseUpper             = 3,
        ppCaseTitle             = 4,
        ppCaseToggle            = 5
    };

    enum PpChartUnitEffect {
        ppAnimateChartMixed     = -2,
        ppAnimateBySeries       = 1,
        ppAnimateByCategory     = 2,
        ppAnimateBySeriesElements= 3,
        ppAnimateByCategoryElements= 4,
        ppAnimateChartAllAtOnce = 5
    };

    enum PpColorSchemeIndex {
        ppSchemeColorMixed      = -2,
        ppNotSchemeColor        = 0,
        ppBackground            = 1,
        ppForeground            = 2,
        ppShadow                = 3,
        ppTitle                 = 4,
        ppFill                  = 5,
        ppAccent1               = 6,
        ppAccent2               = 7,
        ppAccent3               = 8
    };

    enum PpDateTimeFormat {
        ppDateTimeFormatMixed   = -2,
        ppDateTimeMdyy          = 1,
        ppDateTimeddddMMMMddyyyy= 2,
        ppDateTimedMMMMyyyy     = 3,
        ppDateTimeMMMMdyyyy     = 4,
        ppDateTimedMMMyy        = 5,
        ppDateTimeMMMMyy        = 6,
        ppDateTimeMMyy          = 7,
        ppDateTimeMMddyyHmm     = 8,
        ppDateTimeMMddyyhmmAMPM = 9,
        ppDateTimeHmm           = 10,
        ppDateTimeHmmss         = 11,
        ppDateTimehmmAMPM       = 12,
        ppDateTimehmmssAMPM     = 13,
        ppDateTimeFigureOut     = 14
    };

    enum PpDirection {
        ppDirectionMixed        = -2,
        ppDirectionLeftToRight  = 1,
        ppDirectionRightToLeft  = 2
    };

    enum PpEntryEffect {
        ppEffectMixed           = -2,
        ppEffectNone            = 0,
        ppEffectCut             = 257,
        ppEffectCutThroughBlack = 258,
        ppEffectRandom          = 513,
        ppEffectBlindsHorizontal= 769,
        ppEffectBlindsVertical  = 770,
        ppEffectCheckerboardAcross= 1025,
        ppEffectCheckerboardDown= 1026,
        ppEffectCoverLeft       = 1281,
        ppEffectCoverUp         = 1282,
        ppEffectCoverRight      = 1283,
        ppEffectCoverDown       = 1284,
        ppEffectCoverLeftUp     = 1285,
        ppEffectCoverRightUp    = 1286,
        ppEffectCoverLeftDown   = 1287,
        ppEffectCoverRightDown  = 1288,
        ppEffectDissolve        = 1537,
        ppEffectFade            = 1793,
        ppEffectUncoverLeft     = 2049,
        ppEffectUncoverUp       = 2050,
        ppEffectUncoverRight    = 2051,
        ppEffectUncoverDown     = 2052,
        ppEffectUncoverLeftUp   = 2053,
        ppEffectUncoverRightUp  = 2054,
        ppEffectUncoverLeftDown = 2055,
        ppEffectUncoverRightDown= 2056,
        ppEffectRandomBarsHorizontal= 2305,
        ppEffectRandomBarsVertical= 2306,
        ppEffectStripsUpLeft    = 2561,
        ppEffectStripsUpRight   = 2562,
        ppEffectStripsDownLeft  = 2563,
        ppEffectStripsDownRight = 2564,
        ppEffectStripsLeftUp    = 2565,
        ppEffectStripsRightUp   = 2566,
        ppEffectStripsLeftDown  = 2567,
        ppEffectStripsRightDown = 2568,
        ppEffectWipeLeft        = 2817,
        ppEffectWipeUp          = 2818,
        ppEffectWipeRight       = 2819,
        ppEffectWipeDown        = 2820,
        ppEffectBoxOut          = 3073,
        ppEffectBoxIn           = 3074,
        ppEffectFlyFromLeft     = 3329,
        ppEffectFlyFromTop      = 3330,
        ppEffectFlyFromRight    = 3331,
        ppEffectFlyFromBottom   = 3332,
        ppEffectFlyFromTopLeft  = 3333,
        ppEffectFlyFromTopRight = 3334,
        ppEffectFlyFromBottomLeft= 3335,
        ppEffectFlyFromBottomRight= 3336,
        ppEffectPeekFromLeft    = 3337,
        ppEffectPeekFromDown    = 3338,
        ppEffectPeekFromRight   = 3339,
        ppEffectPeekFromUp      = 3340,
        ppEffectCrawlFromLeft   = 3341,
        ppEffectCrawlFromUp     = 3342,
        ppEffectCrawlFromRight  = 3343,
        ppEffectCrawlFromDown   = 3344,
        ppEffectZoomIn          = 3345,
        ppEffectZoomInSlightly  = 3346,
        ppEffectZoomOut         = 3347,
        ppEffectZoomOutSlightly = 3348,
        ppEffectZoomCenter      = 3349,
        ppEffectZoomBottom      = 3350,
        ppEffectStretchAcross   = 3351,
        ppEffectStretchLeft     = 3352,
        ppEffectStretchUp       = 3353,
        ppEffectStretchRight    = 3354,
        ppEffectStretchDown     = 3355,
        ppEffectSwivel          = 3356,
        ppEffectSpiral          = 3357,
        ppEffectSplitHorizontalOut= 3585,
        ppEffectSplitHorizontalIn= 3586,
        ppEffectSplitVerticalOut= 3587,
        ppEffectSplitVerticalIn = 3588,
        ppEffectFlashOnceFast   = 3841,
        ppEffectFlashOnceMedium = 3842,
        ppEffectFlashOnceSlow   = 3843,
        ppEffectAppear          = 3844,
        ppEffectCircleOut       = 3845,
        ppEffectDiamondOut      = 3846,
        ppEffectCombHorizontal  = 3847,
        ppEffectCombVertical    = 3848,
        ppEffectFadeSmoothly    = 3849,
        ppEffectNewsflash       = 3850,
        ppEffectPlusOut         = 3851,
        ppEffectPushDown        = 3852,
        ppEffectPushLeft        = 3853,
        ppEffectPushRight       = 3854,
        ppEffectPushUp          = 3855,
        ppEffectWedge           = 3856,
        ppEffectWheel1Spoke     = 3857,
        ppEffectWheel2Spokes    = 3858,
        ppEffectWheel3Spokes    = 3859,
        ppEffectWheel4Spokes    = 3860,
        ppEffectWheel8Spokes    = 3861
    };

    enum PpExportMode {
        ppRelativeToSlide       = 1,
        ppClipRelativeToSlide   = 2,
        ppScaleToFit            = 3,
        ppScaleXY               = 4
    };

    enum PpFarEastLineBreakLevel {
        ppFarEastLineBreakLevelNormal= 1,
        ppFarEastLineBreakLevelStrict= 2,
        ppFarEastLineBreakLevelCustom= 3
    };

    enum PpFileDialogType {
        ppFileDialogOpen        = 1,
        ppFileDialogSave        = 2
    };

    enum PpFollowColors {
        ppFollowColorsMixed     = -2,
        ppFollowColorsNone      = 0,
        ppFollowColorsScheme    = 1,
        ppFollowColorsTextAndBackground= 2
    };

    enum PpFrameColors {
        ppFrameColorsBrowserColors= 1,
        ppFrameColorsPresentationSchemeTextColor= 2,
        ppFrameColorsPresentationSchemeAccentColor= 3,
        ppFrameColorsWhiteTextOnBlack= 4,
        ppFrameColorsBlackTextOnWhite= 5
    };

    enum PpHTMLVersion {
        ppHTMLv3                = 1,
        ppHTMLv4                = 2,
        ppHTMLDual              = 3,
        ppHTMLAutodetect        = 4
    };

    enum PpIndentControl {
        ppIndentControlMixed    = -2,
        ppIndentReplaceAttr     = 1,
        ppIndentKeepAttr        = 2
    };

    enum PpMediaType {
        ppMediaTypeMixed        = -2,
        ppMediaTypeOther        = 1,
        ppMediaTypeSound        = 2,
        ppMediaTypeMovie        = 3
    };

    enum PpMouseActivation {
        ppMouseClick            = 1,
        ppMouseOver             = 2
    };

    enum PpNumberedBulletStyle {
        ppBulletStyleMixed      = -2,
        ppBulletAlphaLCPeriod   = 0,
        ppBulletAlphaUCPeriod   = 1,
        ppBulletArabicParenRight= 2,
        ppBulletArabicPeriod    = 3,
        ppBulletRomanLCParenBoth= 4,
        ppBulletRomanLCParenRight= 5,
        ppBulletRomanLCPeriod   = 6,
        ppBulletRomanUCPeriod   = 7,
        ppBulletAlphaLCParenBoth= 8,
        ppBulletAlphaLCParenRight= 9,
        ppBulletAlphaUCParenBoth= 10,
        ppBulletAlphaUCParenRight= 11,
        ppBulletArabicParenBoth = 12,
        ppBulletArabicPlain     = 13,
        ppBulletRomanUCParenBoth= 14,
        ppBulletRomanUCParenRight= 15,
        ppBulletSimpChinPlain   = 16,
        ppBulletSimpChinPeriod  = 17,
        ppBulletCircleNumDBPlain= 18,
        ppBulletCircleNumWDWhitePlain= 19,
        ppBulletCircleNumWDBlackPlain= 20,
        ppBulletTradChinPlain   = 21,
        ppBulletTradChinPeriod  = 22,
        ppBulletArabicAlphaDash = 23,
        ppBulletArabicAbjadDash = 24,
        ppBulletHebrewAlphaDash = 25,
        ppBulletKanjiKoreanPlain= 26,
        ppBulletKanjiKoreanPeriod= 27,
        ppBulletArabicDBPlain   = 28,
        ppBulletArabicDBPeriod  = 29,
        ppBulletThaiAlphaPeriod = 30,
        ppBulletThaiAlphaParenRight= 31,
        ppBulletThaiAlphaParenBoth= 32,
        ppBulletThaiNumPeriod   = 33,
        ppBulletThaiNumParenRight= 34,
        ppBulletThaiNumParenBoth= 35,
        ppBulletHindiAlphaPeriod= 36,
        ppBulletHindiNumPeriod  = 37,
        ppBulletKanjiSimpChinDBPeriod= 38,
        ppBulletHindiNumParenRight= 39,
        ppBulletHindiAlpha1Period= 40
    };

    enum PpParagraphAlignment {
        ppAlignmentMixed        = -2,
        ppAlignLeft             = 1,
        ppAlignCenter           = 2,
        ppAlignRight            = 3,
        ppAlignJustify          = 4,
        ppAlignDistribute       = 5,
        ppAlignThaiDistribute   = 6,
        ppAlignJustifyLow       = 7
    };

    enum PpPasteDataType {
        ppPasteDefault          = 0,
        ppPasteBitmap           = 1,
        ppPasteEnhancedMetafile = 2,
        ppPasteMetafilePicture  = 3,
        ppPasteGIF              = 4,
        ppPasteJPG              = 5,
        ppPastePNG              = 6,
        ppPasteText             = 7,
        ppPasteHTML             = 8,
        ppPasteRTF              = 9,
        ppPasteOLEObject        = 10,
        ppPasteShape            = 11
    };

    enum PpPlaceholderType {
        ppPlaceholderMixed      = -2,
        ppPlaceholderTitle      = 1,
        ppPlaceholderBody       = 2,
        ppPlaceholderCenterTitle= 3,
        ppPlaceholderSubtitle   = 4,
        ppPlaceholderVerticalTitle= 5,
        ppPlaceholderVerticalBody= 6,
        ppPlaceholderObject     = 7,
        ppPlaceholderChart      = 8,
        ppPlaceholderBitmap     = 9,
        ppPlaceholderMediaClip  = 10,
        ppPlaceholderOrgChart   = 11,
        ppPlaceholderTable      = 12,
        ppPlaceholderSlideNumber= 13,
        ppPlaceholderHeader     = 14,
        ppPlaceholderFooter     = 15,
        ppPlaceholderDate       = 16
    };

    enum PpPrintColorType {
        ppPrintColor            = 1,
        ppPrintBlackAndWhite    = 2,
        ppPrintPureBlackAndWhite= 3
    };

    enum PpPrintHandoutOrder {
        ppPrintHandoutVerticalFirst= 1,
        ppPrintHandoutHorizontalFirst= 2
    };

    enum PpPrintOutputType {
        ppPrintOutputSlides     = 1,
        ppPrintOutputTwoSlideHandouts= 2,
        ppPrintOutputThreeSlideHandouts= 3,
        ppPrintOutputSixSlideHandouts= 4,
        ppPrintOutputNotesPages = 5,
        ppPrintOutputOutline    = 6,
        ppPrintOutputBuildSlides= 7,
        ppPrintOutputFourSlideHandouts= 8,
        ppPrintOutputNineSlideHandouts= 9,
        ppPrintOutputOneSlideHandouts= 10
    };

    enum PpPrintRangeType {
        ppPrintAll              = 1,
        ppPrintSelection        = 2,
        ppPrintCurrent          = 3,
        ppPrintSlideRange       = 4,
        ppPrintNamedSlideShow   = 5
    };

    enum PpPublishSourceType {
        ppPublishAll            = 1,
        ppPublishSlideRange     = 2,
        ppPublishNamedSlideShow = 3
    };

    enum PpRevisionInfo {
        ppRevisionInfoNone      = 0,
        ppRevisionInfoBaseline  = 1,
        ppRevisionInfoMerged    = 2
    };

    enum PpSaveAsFileType {
        ppSaveAsPresentation    = 1,
        ppSaveAsPowerPoint7     = 2,
        ppSaveAsPowerPoint4     = 3,
        ppSaveAsPowerPoint3     = 4,
        ppSaveAsTemplate        = 5,
        ppSaveAsRTF             = 6,
        ppSaveAsShow            = 7,
        ppSaveAsAddIn           = 8,
        ppSaveAsPowerPoint4FarEast= 10,
        ppSaveAsDefault         = 11,
        ppSaveAsHTML            = 12,
        ppSaveAsHTMLv3          = 13,
        ppSaveAsHTMLDual        = 14,
        ppSaveAsMetaFile        = 15,
        ppSaveAsGIF             = 16,
        ppSaveAsJPG             = 17,
        ppSaveAsPNG             = 18,
        ppSaveAsBMP             = 19,
        ppSaveAsWebArchive      = 20,
        ppSaveAsTIF             = 21,
        ppSaveAsPresForReview   = 22,
        ppSaveAsEMF             = 23
    };

    enum PpSelectionType {
        ppSelectionNone         = 0,
        ppSelectionSlides       = 1,
        ppSelectionShapes       = 2,
        ppSelectionText         = 3
    };

    enum PpShapeFormat {
        ppShapeFormatGIF        = 0,
        ppShapeFormatJPG        = 1,
        ppShapeFormatPNG        = 2,
        ppShapeFormatBMP        = 3,
        ppShapeFormatWMF        = 4,
        ppShapeFormatEMF        = 5
    };

    enum PpSlideLayout {
        ppLayoutMixed           = -2,
        ppLayoutTitle           = 1,
        ppLayoutText            = 2,
        ppLayoutTwoColumnText   = 3,
        ppLayoutTable           = 4,
        ppLayoutTextAndChart    = 5,
        ppLayoutChartAndText    = 6,
        ppLayoutOrgchart        = 7,
        ppLayoutChart           = 8,
        ppLayoutTextAndClipart  = 9,
        ppLayoutClipartAndText  = 10,
        ppLayoutTitleOnly       = 11,
        ppLayoutBlank           = 12,
        ppLayoutTextAndObject   = 13,
        ppLayoutObjectAndText   = 14,
        ppLayoutLargeObject     = 15,
        ppLayoutObject          = 16,
        ppLayoutTextAndMediaClip= 17,
        ppLayoutMediaClipAndText= 18,
        ppLayoutObjectOverText  = 19,
        ppLayoutTextOverObject  = 20,
        ppLayoutTextAndTwoObjects= 21,
        ppLayoutTwoObjectsAndText= 22,
        ppLayoutTwoObjectsOverText= 23,
        ppLayoutFourObjects     = 24,
        ppLayoutVerticalText    = 25,
        ppLayoutClipArtAndVerticalText= 26,
        ppLayoutVerticalTitleAndText= 27,
        ppLayoutVerticalTitleAndTextOverChart= 28,
        ppLayoutTwoObjects      = 29,
        ppLayoutObjectAndTwoObjects= 30,
        ppLayoutTwoObjectsAndObject= 31
    };

    enum PpSlideShowAdvanceMode {
        ppSlideShowManualAdvance= 1,
        ppSlideShowUseSlideTimings= 2,
        ppSlideShowRehearseNewTimings= 3
    };

    enum PpSlideShowPointerType {
        ppSlideShowPointerNone  = 0,
        ppSlideShowPointerArrow = 1,
        ppSlideShowPointerPen   = 2,
        ppSlideShowPointerAlwaysHidden= 3,
        ppSlideShowPointerAutoArrow= 4,
        ppSlideShowPointerEraser= 5
    };

    enum PpSlideShowRangeType {
        ppShowAll               = 1,
        ppShowSlideRange        = 2,
        ppShowNamedSlideShow    = 3
    };

    enum PpSlideShowState {
        ppSlideShowRunning      = 1,
        ppSlideShowPaused       = 2,
        ppSlideShowBlackScreen  = 3,
        ppSlideShowWhiteScreen  = 4,
        ppSlideShowDone         = 5
    };

    enum PpSlideShowType {
        ppShowTypeSpeaker       = 1,
        ppShowTypeWindow        = 2,
        ppShowTypeKiosk         = 3
    };

    enum PpSlideSizeType {
        ppSlideSizeOnScreen     = 1,
        ppSlideSizeLetterPaper  = 2,
        ppSlideSizeA4Paper      = 3,
        ppSlideSize35MM         = 4,
        ppSlideSizeOverhead     = 5,
        ppSlideSizeBanner       = 6,
        ppSlideSizeCustom       = 7,
        ppSlideSizeLedgerPaper  = 8,
        ppSlideSizeA3Paper      = 9,
        ppSlideSizeB4ISOPaper   = 10,
        ppSlideSizeB5ISOPaper   = 11,
        ppSlideSizeB4JISPaper   = 12,
        ppSlideSizeB5JISPaper   = 13,
        ppSlideSizeHagakiCard   = 14
    };

    enum PpSoundEffectType {
        ppSoundEffectsMixed     = -2,
        ppSoundNone             = 0,
        ppSoundStopPrevious     = 1,
        ppSoundFile             = 2
    };

    enum PpSoundFormatType {
        ppSoundFormatMixed      = -2,
        ppSoundFormatNone       = 0,
        ppSoundFormatWAV        = 1,
        ppSoundFormatMIDI       = 2,
        ppSoundFormatCDAudio    = 3
    };

    enum PpTabStopType {
        ppTabStopMixed          = -2,
        ppTabStopLeft           = 1,
        ppTabStopCenter         = 2,
        ppTabStopRight          = 3,
        ppTabStopDecimal        = 4
    };

    enum PpTextLevelEffect {
        ppAnimateLevelMixed     = -2,
        ppAnimateLevelNone      = 0,
        ppAnimateByFirstLevel   = 1,
        ppAnimateBySecondLevel  = 2,
        ppAnimateByThirdLevel   = 3,
        ppAnimateByFourthLevel  = 4,
        ppAnimateByFifthLevel   = 5,
        ppAnimateByAllLevels    = 16
    };

    enum PpTextStyleType {
        ppDefaultStyle          = 1,
        ppTitleStyle            = 2,
        ppBodyStyle             = 3
    };

    enum PpTextUnitEffect {
        ppAnimateUnitMixed      = -2,
        ppAnimateByParagraph    = 0,
        ppAnimateByWord         = 1,
        ppAnimateByCharacter    = 2
    };

    enum PpTransitionSpeed {
        ppTransitionSpeedMixed  = -2,
        ppTransitionSpeedSlow   = 1,
        ppTransitionSpeedMedium = 2,
        ppTransitionSpeedFast   = 3
    };

    enum PpUpdateOption {
        ppUpdateOptionMixed     = -2,
        ppUpdateOptionManual    = 1,
        ppUpdateOptionAutomatic = 2
    };

    enum PpViewType {
        ppViewSlide             = 1,
        ppViewSlideMaster       = 2,
        ppViewNotesPage         = 3,
        ppViewHandoutMaster     = 4,
        ppViewNotesMaster       = 5,
        ppViewOutline           = 6,
        ppViewSlideSorter       = 7,
        ppViewTitleMaster       = 8,
        ppViewNormal            = 9,
        ppViewPrintPreview      = 10,
        ppViewThumbnails        = 11,
        ppViewMasterThumbnails  = 12
    };

    enum PpWindowState {
        ppWindowNormal          = 1,
        ppWindowMinimized       = 2,
        ppWindowMaximized       = 3
    };

// forward declarations
    enum PpWindowState;
    enum PpArrangeStyle;
    enum PpViewType;
    enum PpColorSchemeIndex;
    enum PpSlideSizeType;
    enum PpSaveAsFileType;
    enum PpTextStyleType;
    enum PpSlideLayout;
    enum PpEntryEffect;
    enum PpTextLevelEffect;
    enum PpTextUnitEffect;
    enum PpChartUnitEffect;
    enum PpAfterEffect;
    enum PpAdvanceMode;
    enum PpSoundEffectType;
    enum PpFollowColors;
    enum PpUpdateOption;
    enum PpParagraphAlignment;
    enum PpBaselineAlignment;
    enum PpTabStopType;
    enum PpIndentControl;
    enum PpChangeCase;
    enum PpSlideShowPointerType;
    enum PpSlideShowState;
    enum PpSlideShowAdvanceMode;
    enum PpFileDialogType;
    enum PpPrintOutputType;
    enum PpPrintHandoutOrder;
    enum PpPrintColorType;
    enum PpSelectionType;
    enum PpDirection;
    enum PpDateTimeFormat;
    enum PpTransitionSpeed;
    enum PpMouseActivation;
    enum PpActionType;
    enum PpPlaceholderType;
    enum PpSlideShowType;
    enum PpPrintRangeType;
    enum PpAutoSize;
    enum PpMediaType;
    enum PpSoundFormatType;
    enum PpFarEastLineBreakLevel;
    enum PpSlideShowRangeType;
    enum PpFrameColors;
    class PresEvents;
    class SldEvents;
    class MouseTracker;
    class MouseDownHandler;
    class OCXExtenderEvents;
    enum PpBorderType;
    enum PpHTMLVersion;
    enum PpPublishSourceType;
    enum PpBulletType;
    enum PpNumberedBulletStyle;
    enum PpShapeFormat;
    enum PpExportMode;
    class EApplication;
    class MasterEvents;
    enum PpPasteDataType;
    enum MsoAnimEffect;
    enum MsoAnimateByLevel;
    enum MsoAnimTriggerType;
    enum MsoAnimAfterEffect;
    enum MsoAnimTextUnitEffect;
    enum MsoAnimEffectRestart;
    enum MsoAnimEffectAfter;
    enum MsoAnimDirection;
    enum MsoAnimType;
    enum MsoAnimAdditive;
    enum MsoAnimAccumulate;
    enum MsoAnimProperty;
    enum PpAlertLevel;
    enum PpRevisionInfo;
    enum MsoAnimCommandType;
    enum MsoAnimFilterEffectType;
    enum MsoAnimFilterEffectSubtype;
    enum PpWindowState;
    enum PpArrangeStyle;
    enum PpViewType;
    enum PpColorSchemeIndex;
    enum PpSlideSizeType;
    enum PpSaveAsFileType;
    enum PpTextStyleType;
    enum PpSlideLayout;
    enum PpEntryEffect;
    enum PpTextLevelEffect;
    enum PpTextUnitEffect;
    enum PpChartUnitEffect;
    enum PpAfterEffect;
    enum PpAdvanceMode;
    enum PpSoundEffectType;
    enum PpFollowColors;
    enum PpUpdateOption;
    enum PpParagraphAlignment;
    enum PpBaselineAlignment;
    enum PpTabStopType;
    enum PpIndentControl;
    enum PpChangeCase;
    enum PpSlideShowPointerType;
    enum PpSlideShowState;
    enum PpSlideShowAdvanceMode;
    enum PpFileDialogType;
    enum PpPrintOutputType;
    enum PpPrintHandoutOrder;
    enum PpPrintColorType;
    enum PpSelectionType;
    enum PpDirection;
    enum PpDateTimeFormat;
    enum PpTransitionSpeed;
    enum PpMouseActivation;
    enum PpActionType;
    enum PpPlaceholderType;
    enum PpSlideShowType;
    enum PpPrintRangeType;
    enum PpAutoSize;
    enum PpMediaType;
    enum PpSoundFormatType;
    enum PpFarEastLineBreakLevel;
    enum PpSlideShowRangeType;
    enum PpFrameColors;
    class Presentations;
    class DocumentWindows;
    class DocumentWindow;
    class Presentation;
    class SlideShowWindows;
    class AddIns;
    class DefaultWebOptions;
    class AutoCorrect;
    class Options;
    class Application;
    class SlideShowView;
    class SlideRange;
    class ShapeRange;
    class TextRange;
    class SlideShowWindow;
    class Selection;
    class View;
    class Pane;
    class Panes;
    class PrintOptions;
    class Slide;
    class ColorFormat;
    class MouseTracker;
    class NamedSlideShows;
    class NamedSlideShow;
    class PrintRanges;
    class PrintRange;
    class AddIn;
    class PresEvents;
    class _Master;
    class Slides;
    class PageSetup;
    class ColorSchemes;
    class ExtraColors;
    class SlideShowSettings;
    class Fonts;
    class Tags;
    class Shape;
    class PublishObjects;
    class WebOptions;
    class Designs;
    class Hyperlink;
    class Font;
    class Shapes;
    class HeadersFooters;
    class SlideShowTransition;
    class ColorScheme;
    class Hyperlinks;
    class Comments;
    class Design;
    class TimeLine;
    class TextStyles;
    class SldEvents;
    class RGBColor;
    class SoundEffect;
    class HeaderFooter;
    class FreeformBuilder;
    class Placeholders;
    class Adjustments;
    class CalloutFormat;
    class ConnectorFormat;
    class FillFormat;
    class GroupShapes;
    class LineFormat;
    class ShapeNodes;
    class PictureFormat;
    class ShadowFormat;
    class TextEffectFormat;
    class TextFrame;
    class ThreeDFormat;
    class OLEFormat;
    class LinkFormat;
    class PlaceholderFormat;
    class AnimationSettings;
    class ActionSettings;
    class SoundFormat;
    class Table;
    class Diagram;
    class DiagramNode;
    class CanvasShapes;
    class Ruler;
    class ShapeNode;
    class ObjectVerbs;
    class PlaySettings;
    class ActionSetting;
    class ParagraphFormat;
    class TabStops;
    class RulerLevels;
    class RulerLevel;
    class TabStop;
    class BulletFormat;
    class TextStyle;
    class TextStyleLevels;
    class TextStyleLevel;
    class MouseDownHandler;
    class OCXExtenderEvents;
    enum PpBorderType;
    enum PpHTMLVersion;
    enum PpPublishSourceType;
    enum PpBulletType;
    enum PpNumberedBulletStyle;
    enum PpShapeFormat;
    enum PpExportMode;
    class EApplication;
    class Columns;
    class Rows;
    class Cell;
    class Column;
    class CellRange;
    class Row;
    class Borders;
    class PublishObject;
    class MasterEvents;
    enum PpPasteDataType;
    class Comment;
    class DiagramNodeChildren;
    class DiagramNodes;
    class Sequence;
    class Sequences;
    enum MsoAnimEffect;
    enum MsoAnimateByLevel;
    enum MsoAnimTriggerType;
    enum MsoAnimAfterEffect;
    enum MsoAnimTextUnitEffect;
    class Effect;
    enum MsoAnimEffectRestart;
    enum MsoAnimEffectAfter;
    class Timing;
    class EffectParameters;
    class AnimationBehaviors;
    class EffectInformation;
    enum MsoAnimDirection;
    enum MsoAnimType;
    class AnimationBehavior;
    enum MsoAnimAdditive;
    enum MsoAnimAccumulate;
    class MotionEffect;
    class ColorEffect;
    class ScaleEffect;
    class RotationEffect;
    class PropertyEffect;
    class CommandEffect;
    class FilterEffect;
    class SetEffect;
    enum MsoAnimProperty;
    class AnimationPoints;
    class AnimationPoint;
    enum PpAlertLevel;
    enum PpRevisionInfo;
    enum MsoAnimCommandType;
    enum MsoAnimFilterEffectType;
    enum MsoAnimFilterEffectSubtype;

class POWERPOINT_EXPORT Collection : public QAxObject
{
public:
    Collection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT _Application : public QAxObject
{
public:
    _Application(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Active

    For more information, see help context 502033 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Active() const; //Returns the value of Active

    /*
    Property ActivePresentation

    For more information, see help context 502005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* ActivePresentation() const; //Returns the value of ActivePresentation

    /*
    Property ActivePrinter

    For more information, see help context 502017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString ActivePrinter() const; //Returns the value of ActivePrinter

    /*
    Property ActiveWindow

    For more information, see help context 502004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindow* ActiveWindow() const; //Returns the value of ActiveWindow

    /*
    Property AddIns

    For more information, see help context 502019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AddIns* AddIns() const; //Returns the value of AddIns

    /*
    Property AnswerWizard

    For more information, see help context 502035 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::AnswerWizard* AnswerWizard() const; //Returns the value of AnswerWizard

    /*
    Property Assistant

    For more information, see help context 502011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Assistant* Assistant() const; //Returns the value of Assistant

    /*
    Property AutoCorrect

    For more information, see help context 502053 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AutoCorrect* AutoCorrect() const; //Returns the value of AutoCorrect

    /*
    Property AutomationSecurity

    For more information, see help context 502048 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoAutomationSecurity AutomationSecurity() const; //Returns the value of AutomationSecurity
    inline void SetAutomationSecurity(Office::MsoAutomationSecurity value); //Sets the value of the AutomationSecurity property

    /*
    Property Build

    For more information, see help context 502014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Build() const; //Returns the value of Build

    /*
    Property COMAddIns

    For more information, see help context 502036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::COMAddIns* COMAddIns() const; //Returns the value of COMAddIns

    /*
    Property Caption

    For more information, see help context 502010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Caption() const; //Returns the value of Caption
    inline void SetCaption(const QString& value); //Sets the value of the Caption property

    /*
    Property CommandBars

    For more information, see help context 502007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::CommandBars* CommandBars() const; //Returns the value of CommandBars

    /*
    Property Creator

    For more information, see help context 502018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property DefaultWebOptions

    For more information, see help context 502038 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DefaultWebOptions* DefaultWebOptions() const; //Returns the value of DefaultWebOptions

    /*
    Property Dialogs

    For more information, see help context 502003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* Dialogs() const; //Returns the value of Dialogs

    /*
    Property DisplayAlerts

    For more information, see help context 502050 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpAlertLevel DisplayAlerts() const; //Returns the value of DisplayAlerts
    inline void SetDisplayAlerts(PowerPoint::PpAlertLevel value); //Sets the value of the DisplayAlerts property

    /*
    Property DisplayGridLines

    For more information, see help context 502047 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState DisplayGridLines() const; //Returns the value of DisplayGridLines
    inline void SetDisplayGridLines(Office::MsoTriState value); //Sets the value of the DisplayGridLines property

    /*
    Property FeatureInstall

    For more information, see help context 502043 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoFeatureInstall FeatureInstall() const; //Returns the value of FeatureInstall
    inline void SetFeatureInstall(Office::MsoFeatureInstall value); //Sets the value of the FeatureInstall property

    /*
    Property FileFind

    For more information, see help context 502013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::IFind* FileFind() const; //Returns the value of FileFind

    /*
    Property FileSearch

    For more information, see help context 502012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::FileSearch* FileSearch() const; //Returns the value of FileSearch

    /*
    Property HWND

    For more information, see help context 502032 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int HWND() const; //Returns the value of HWND

    /*
    Property Height

    For more information, see help context 502029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property LanguageSettings

    For more information, see help context 502039 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::LanguageSettings* LanguageSettings() const; //Returns the value of LanguageSettings

    /*
    Property Left

    For more information, see help context 502026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Marker

    For more information, see help context 502042 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* Marker() const; //Returns the value of Marker

    /*
    Property MsoDebugOptions

    For more information, see help context 502040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoDebugOptions* MsoDebugOptions() const; //Returns the value of MsoDebugOptions

    /*
    Property Name

    For more information, see help context 502009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property NewPresentation

    For more information, see help context 502049 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::NewFile* NewPresentation() const; //Returns the value of NewPresentation

    /*
    Property OperatingSystem

    For more information, see help context 502016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString OperatingSystem() const; //Returns the value of OperatingSystem

    /*
    Property Options

    For more information, see help context 502054 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Options* Options() const; //Returns the value of Options

    /*
    Property Path

    For more information, see help context 502008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property Presentations

    For more information, see help context 502001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentations* Presentations() const; //Returns the value of Presentations

    /*
    Property ProductCode

    For more information, see help context 502037 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString ProductCode() const; //Returns the value of ProductCode

    /*
    Property ShowStartupDialog

    For more information, see help context 502051 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ShowStartupDialog() const; //Returns the value of ShowStartupDialog
    inline void SetShowStartupDialog(Office::MsoTriState value); //Sets the value of the ShowStartupDialog property

    /*
    Property ShowWindowsInTaskbar

    For more information, see help context 502041 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ShowWindowsInTaskbar() const; //Returns the value of ShowWindowsInTaskbar
    inline void SetShowWindowsInTaskbar(Office::MsoTriState value); //Sets the value of the ShowWindowsInTaskbar property

    /*
    Property SlideShowWindows

    For more information, see help context 502006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowWindows* SlideShowWindows() const; //Returns the value of SlideShowWindows

    /*
    Property Top

    For more information, see help context 502027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property VBE

    For more information, see help context 502020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline VBIDE::VBE* VBE() const; //Returns the value of VBE

    /*
    Property Version

    For more information, see help context 502015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Version() const; //Returns the value of Version

    /*
    Property Visible

    For more information, see help context 502031 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Visible() const; //Returns the value of Visible
    inline void SetVisible(Office::MsoTriState value); //Sets the value of the Visible property

    /*
    Property Width

    For more information, see help context 502028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property WindowState

    For more information, see help context 502030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpWindowState WindowState() const; //Returns the value of WindowState
    inline void SetWindowState(PowerPoint::PpWindowState value); //Sets the value of the WindowState property

    /*
    Property Windows

    For more information, see help context 502002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindows* Windows() const; //Returns the value of Windows

    /*
    Method Activate

    For more information, see help context 502034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Activate();

    /*
    Method FileDialog

    For more information, see help context 502046 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::FileDialog* FileDialog(Office::MsoFileDialogType Type);

    /*
    Method GetOptionFlag

    For more information, see help context 502044 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool GetOptionFlag(int Option);

    /*
    Method GetOptionFlag

    For more information, see help context 502044 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool GetOptionFlag(int Option, bool Persist);

    /*
    Method Help

    For more information, see help context 502021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Help();

    /*
    Method Help

    For more information, see help context 502021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Help(const QString& HelpFile);

    /*
    Method Help

    For more information, see help context 502021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Help(const QString& HelpFile, int ContextID);

    /*
    Method LaunchSpelling

    For more information, see help context 502025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void LaunchSpelling(PowerPoint::DocumentWindow* pWindow);

    /*
    Method PPFileDialog

    For more information, see help context 502024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* PPFileDialog(PowerPoint::PpFileDialogType Type);

    /*
    Method Quit

    For more information, see help context 502022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Quit();

    /*
    Method Run

    For more information, see help context 502023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant Run(const QString& MacroName, QVariantList& safeArrayOfParams);

    /*
    Method SetOptionFlag

    For more information, see help context 502045 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetOptionFlag(int Option, bool State);

    /*
    Method SetOptionFlag

    For more information, see help context 502045 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetOptionFlag(int Option, bool State, bool Persist);

    /*
    Method SetPerfMarker

    For more information, see help context 502052 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetPerfMarker(int Marker);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT _Global : public QAxObject
{
public:
    _Global(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActivePresentation

    For more information, see help context 503001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* ActivePresentation() const; //Returns the value of ActivePresentation

    /*
    Property ActiveWindow

    For more information, see help context 503002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindow* ActiveWindow() const; //Returns the value of ActiveWindow

    /*
    Property AddIns

    For more information, see help context 503003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AddIns* AddIns() const; //Returns the value of AddIns

    /*
    Property AnswerWizard

    For more information, see help context 503011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::AnswerWizard* AnswerWizard() const; //Returns the value of AnswerWizard

    /*
    Property Application

    For more information, see help context 503004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Assistant

    For more information, see help context 503005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Assistant* Assistant() const; //Returns the value of Assistant

    /*
    Property CommandBars

    For more information, see help context 503010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::CommandBars* CommandBars() const; //Returns the value of CommandBars

    /*
    Property Dialogs

    For more information, see help context 503006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* Dialogs() const; //Returns the value of Dialogs

    /*
    Property Presentations

    For more information, see help context 503007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentations* Presentations() const; //Returns the value of Presentations

    /*
    Property SlideShowWindows

    For more information, see help context 503008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowWindows* SlideShowWindows() const; //Returns the value of SlideShowWindows

    /*
    Property Windows

    For more information, see help context 503009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindows* Windows() const; //Returns the value of Windows

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ColorFormat : public QAxObject
{
public:
    ColorFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Parent

    For more information, see help context 506001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property RGB

    For more information, see help context 506002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int RGB() const; //Returns the value of RGB
    inline void SetRGB(int value); //Sets the value of the RGB property

    /*
    Property SchemeColor

    For more information, see help context 506004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpColorSchemeIndex SchemeColor() const; //Returns the value of SchemeColor
    inline void SetSchemeColor(PowerPoint::PpColorSchemeIndex value); //Sets the value of the SchemeColor property

    /*
    Property TintAndShade

    For more information, see help context 506005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double TintAndShade() const; //Returns the value of TintAndShade
    inline void SetTintAndShade(double value); //Sets the value of the TintAndShade property

    /*
    Property Type

    For more information, see help context 506003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoColorType Type() const; //Returns the value of Type

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT SlideShowWindow : public QAxObject
{
public:
    SlideShowWindow(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Active

    For more information, see help context 507011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Active() const; //Returns the value of Active

    /*
    Property Application

    For more information, see help context 507001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property HWND

    For more information, see help context 507010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int HWND() const; //Returns the value of HWND

    /*
    Property Height

    For more information, see help context 507009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property IsFullScreen

    For more information, see help context 507005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState IsFullScreen() const; //Returns the value of IsFullScreen

    /*
    Property Left

    For more information, see help context 507006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Parent

    For more information, see help context 507002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Presentation

    For more information, see help context 507004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* Presentation() const; //Returns the value of Presentation

    /*
    Property Top

    For more information, see help context 507007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property View

    For more information, see help context 507003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowView* View() const; //Returns the value of View

    /*
    Property Width

    For more information, see help context 507008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Method Activate

    For more information, see help context 507012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Activate();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Selection : public QAxObject
{
public:
    Selection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 508001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property ChildShapeRange

    For more information, see help context 508011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* ChildShapeRange() const; //Returns the value of ChildShapeRange

    /*
    Property HasChildShapeRange

    For more information, see help context 508012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool HasChildShapeRange() const; //Returns the value of HasChildShapeRange

    /*
    Property Parent

    For more information, see help context 508002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property ShapeRange

    For more information, see help context 508009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* ShapeRange() const; //Returns the value of ShapeRange

    /*
    Property SlideRange

    For more information, see help context 508008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideRange* SlideRange() const; //Returns the value of SlideRange

    /*
    Property TextRange

    For more information, see help context 508010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* TextRange() const; //Returns the value of TextRange

    /*
    Property Type

    For more information, see help context 508007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSelectionType Type() const; //Returns the value of Type

    /*
    Method Copy

    For more information, see help context 508004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Copy();

    /*
    Method Cut

    For more information, see help context 508003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Cut();

    /*
    Method Delete

    For more information, see help context 508005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method Unselect

    For more information, see help context 508006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Unselect();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT DocumentWindows : public QAxObject
{
public:
    DocumentWindows(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 509001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 509002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Arrange

    For more information, see help context 509004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Arrange();

    /*
    Method Arrange

    For more information, see help context 509004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Arrange(PowerPoint::PpArrangeStyle arrangeStyle);

    /*
    Method Item

    For more information, see help context 509003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindow* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT SlideShowWindows : public QAxObject
{
public:
    SlideShowWindows(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 510001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 510002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 510003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowWindow* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT DocumentWindow : public QAxObject
{
public:
    DocumentWindow(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Active

    For more information, see help context 511008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Active() const; //Returns the value of Active

    /*
    Property ActivePane

    For more information, see help context 511022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Pane* ActivePane() const; //Returns the value of ActivePane

    /*
    Property Application

    For more information, see help context 511001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property BlackAndWhite

    For more information, see help context 511007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState BlackAndWhite() const; //Returns the value of BlackAndWhite
    inline void SetBlackAndWhite(Office::MsoTriState value); //Sets the value of the BlackAndWhite property

    /*
    Property Caption

    For more information, see help context 511010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Caption() const; //Returns the value of Caption

    /*
    Property HWND

    For more information, see help context 511021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int HWND() const; //Returns the value of HWND

    /*
    Property Height

    For more information, see help context 511014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Left

    For more information, see help context 511011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Panes

    For more information, see help context 511023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Panes* Panes() const; //Returns the value of Panes

    /*
    Property Parent

    For more information, see help context 511002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Presentation

    For more information, see help context 511005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* Presentation() const; //Returns the value of Presentation

    /*
    Property Selection

    For more information, see help context 511003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Selection* Selection() const; //Returns the value of Selection

    /*
    Property SplitHorizontal

    For more information, see help context 511025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int SplitHorizontal() const; //Returns the value of SplitHorizontal
    inline void SetSplitHorizontal(int value); //Sets the value of the SplitHorizontal property

    /*
    Property SplitVertical

    For more information, see help context 511024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int SplitVertical() const; //Returns the value of SplitVertical
    inline void SetSplitVertical(int value); //Sets the value of the SplitVertical property

    /*
    Property Top

    For more information, see help context 511012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property View

    For more information, see help context 511004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::View* View() const; //Returns the value of View

    /*
    Property ViewType

    For more information, see help context 511006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpViewType ViewType() const; //Returns the value of ViewType
    inline void SetViewType(PowerPoint::PpViewType value); //Sets the value of the ViewType property

    /*
    Property Width

    For more information, see help context 511013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property WindowState

    For more information, see help context 511009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpWindowState WindowState() const; //Returns the value of WindowState
    inline void SetWindowState(PowerPoint::PpWindowState value); //Sets the value of the WindowState property

    /*
    Method Activate

    For more information, see help context 511016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Activate();

    /*
    Method Close

    For more information, see help context 511020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Close();

    /*
    Method FitToPage

    For more information, see help context 511015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FitToPage();

    /*
    Method LargeScroll

    For more information, see help context 511017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void LargeScroll();

    /*
    Method LargeScroll

    For more information, see help context 511017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void LargeScroll(int Down);

    /*
    Method LargeScroll

    For more information, see help context 511017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void LargeScroll(int Down, int Up);

    /*
    Method LargeScroll

    For more information, see help context 511017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void LargeScroll(int Down, int Up, int ToRight);

    /*
    Method LargeScroll

    For more information, see help context 511017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void LargeScroll(int Down, int Up, int ToRight, int ToLeft);

    /*
    Method NewWindow

    For more information, see help context 511019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindow* NewWindow();

    /*
    Method PointsToScreenPixelsX

    For more information, see help context 511027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int PointsToScreenPixelsX(double Points);

    /*
    Method PointsToScreenPixelsY

    For more information, see help context 511028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int PointsToScreenPixelsY(double Points);

    /*
    Method RangeFromPoint

    For more information, see help context 511026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* RangeFromPoint(int X, int Y);

    /*
    Method ScrollIntoView

    For more information, see help context 511029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ScrollIntoView(double Left, double Top, double Width, double Height);

    /*
    Method ScrollIntoView

    For more information, see help context 511029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ScrollIntoView(double Left, double Top, double Width, double Height, Office::MsoTriState Start);

    /*
    Method SmallScroll

    For more information, see help context 511018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SmallScroll();

    /*
    Method SmallScroll

    For more information, see help context 511018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SmallScroll(int Down);

    /*
    Method SmallScroll

    For more information, see help context 511018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SmallScroll(int Down, int Up);

    /*
    Method SmallScroll

    For more information, see help context 511018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SmallScroll(int Down, int Up, int ToRight);

    /*
    Method SmallScroll

    For more information, see help context 511018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SmallScroll(int Down, int Up, int ToRight, int ToLeft);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT View : public QAxObject
{
public:
    View(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 512001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property DisplaySlideMiniature

    For more information, see help context 512008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState DisplaySlideMiniature() const; //Returns the value of DisplaySlideMiniature
    inline void SetDisplaySlideMiniature(Office::MsoTriState value); //Sets the value of the DisplaySlideMiniature property

    /*
    Property Parent

    For more information, see help context 512002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PrintOptions

    For more information, see help context 512011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PrintOptions* PrintOptions() const; //Returns the value of PrintOptions

    /*
    Property Slide

    For more information, see help context 512006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Slide() const; //Returns the value of Slide
    inline void SetSlide(IDispatch* value); //Sets the value of the Slide property

    /*
    Property Type

    For more information, see help context 512003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpViewType Type() const; //Returns the value of Type

    /*
    Property Zoom

    For more information, see help context 512004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Zoom() const; //Returns the value of Zoom
    inline void SetZoom(int value); //Sets the value of the Zoom property

    /*
    Property ZoomToFit

    For more information, see help context 512009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ZoomToFit() const; //Returns the value of ZoomToFit
    inline void SetZoomToFit(Office::MsoTriState value); //Sets the value of the ZoomToFit property

    /*
    Method GotoSlide

    For more information, see help context 512007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void GotoSlide(int Index);

    /*
    Method Paste

    For more information, see help context 512005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Paste();

    /*
    Method PasteSpecial

    For more information, see help context 512010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PasteSpecial();

    /*
    Method PasteSpecial

    For more information, see help context 512010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PasteSpecial(PowerPoint::PpPasteDataType DataType);

    /*
    Method PasteSpecial

    For more information, see help context 512010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon);

    /*
    Method PasteSpecial

    For more information, see help context 512010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName);

    /*
    Method PasteSpecial

    For more information, see help context 512010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex);

    /*
    Method PasteSpecial

    For more information, see help context 512010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel);

    /*
    Method PasteSpecial

    For more information, see help context 512010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel, Office::MsoTriState Link);

    /*
    Method PrintOut

    For more information, see help context 512012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut();

    /*
    Method PrintOut

    For more information, see help context 512012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From);

    /*
    Method PrintOut

    For more information, see help context 512012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To);

    /*
    Method PrintOut

    For more information, see help context 512012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To, const QString& PrintToFile);

    /*
    Method PrintOut

    For more information, see help context 512012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To, const QString& PrintToFile, int Copies);

    /*
    Method PrintOut

    For more information, see help context 512012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To, const QString& PrintToFile, int Copies, Office::MsoTriState Collate);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT SlideShowView : public QAxObject
{
public:
    SlideShowView(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AcceleratorsEnabled

    For more information, see help context 513007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AcceleratorsEnabled() const; //Returns the value of AcceleratorsEnabled
    inline void SetAcceleratorsEnabled(Office::MsoTriState value); //Sets the value of the AcceleratorsEnabled property

    /*
    Property AdvanceMode

    For more information, see help context 513011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSlideShowAdvanceMode AdvanceMode() const; //Returns the value of AdvanceMode

    /*
    Property Application

    For more information, see help context 513001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property CurrentShowPosition

    For more information, see help context 513027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int CurrentShowPosition() const; //Returns the value of CurrentShowPosition

    /*
    Property IsNamedShow

    For more information, see help context 513013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState IsNamedShow() const; //Returns the value of IsNamedShow

    /*
    Property LastSlideViewed

    For more information, see help context 513010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Slide* LastSlideViewed() const; //Returns the value of LastSlideViewed

    /*
    Property Parent

    For more information, see help context 513002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PointerColor

    For more information, see help context 513012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* PointerColor() const; //Returns the value of PointerColor

    /*
    Property PointerType

    For more information, see help context 513005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSlideShowPointerType PointerType() const; //Returns the value of PointerType
    inline void SetPointerType(PowerPoint::PpSlideShowPointerType value); //Sets the value of the PointerType property

    /*
    Property PresentationElapsedTime

    For more information, see help context 513008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double PresentationElapsedTime() const; //Returns the value of PresentationElapsedTime

    /*
    Property Slide

    For more information, see help context 513004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Slide* Slide() const; //Returns the value of Slide

    /*
    Property SlideElapsedTime

    For more information, see help context 513009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double SlideElapsedTime() const; //Returns the value of SlideElapsedTime
    inline void SetSlideElapsedTime(double value); //Sets the value of the SlideElapsedTime property

    /*
    Property SlideShowName

    For more information, see help context 513014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString SlideShowName() const; //Returns the value of SlideShowName

    /*
    Property State

    For more information, see help context 513006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSlideShowState State() const; //Returns the value of State
    inline void SetState(PowerPoint::PpSlideShowState value); //Sets the value of the State property

    /*
    Property Zoom

    For more information, see help context 513003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Zoom() const; //Returns the value of Zoom

    /*
    Method DrawLine

    For more information, see help context 513015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void DrawLine(double BeginX, double BeginY, double EndX, double EndY);

    /*
    Method EndNamedShow

    For more information, see help context 513023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void EndNamedShow();

    /*
    Method EraseDrawing

    For more information, see help context 513016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void EraseDrawing();

    /*
    Method Exit

    For more information, see help context 513025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Exit();

    /*
    Method First

    For more information, see help context 513017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void First();

    /*
    Method GotoNamedShow

    For more information, see help context 513022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void GotoNamedShow(const QString& SlideShowName);

    /*
    Method GotoSlide

    For more information, see help context 513021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void GotoSlide(int Index);

    /*
    Method GotoSlide

    For more information, see help context 513021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void GotoSlide(int Index, Office::MsoTriState ResetSlide);

    /*
    Method InstallTracker

    For more information, see help context 513026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void InstallTracker(PowerPoint::MouseTracker* pTracker, Office::MsoTriState Presenter);

    /*
    Method Last

    For more information, see help context 513018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Last();

    /*
    Method Next

    For more information, see help context 513019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Next();

    /*
    Method Previous

    For more information, see help context 513020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Previous();

    /*
    Method ResetSlideTime

    For more information, see help context 513024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ResetSlideTime();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT SlideShowSettings : public QAxObject
{
public:
    SlideShowSettings(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AdvanceMode

    For more information, see help context 514007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSlideShowAdvanceMode AdvanceMode() const; //Returns the value of AdvanceMode
    inline void SetAdvanceMode(PowerPoint::PpSlideShowAdvanceMode value); //Sets the value of the AdvanceMode property

    /*
    Property Application

    For more information, see help context 514001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property EndingSlide

    For more information, see help context 514006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int EndingSlide() const; //Returns the value of EndingSlide
    inline void SetEndingSlide(int value); //Sets the value of the EndingSlide property

    /*
    Property LoopUntilStopped

    For more information, see help context 514009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState LoopUntilStopped() const; //Returns the value of LoopUntilStopped
    inline void SetLoopUntilStopped(Office::MsoTriState value); //Sets the value of the LoopUntilStopped property

    /*
    Property NamedSlideShows

    For more information, see help context 514004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::NamedSlideShows* NamedSlideShows() const; //Returns the value of NamedSlideShows

    /*
    Property Parent

    For more information, see help context 514002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PointerColor

    For more information, see help context 514003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* PointerColor() const; //Returns the value of PointerColor

    /*
    Property RangeType

    For more information, see help context 514014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSlideShowRangeType RangeType() const; //Returns the value of RangeType
    inline void SetRangeType(PowerPoint::PpSlideShowRangeType value); //Sets the value of the RangeType property

    /*
    Property ShowScrollbar

    For more information, see help context 514015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ShowScrollbar() const; //Returns the value of ShowScrollbar
    inline void SetShowScrollbar(Office::MsoTriState value); //Sets the value of the ShowScrollbar property

    /*
    Property ShowType

    For more information, see help context 514010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSlideShowType ShowType() const; //Returns the value of ShowType
    inline void SetShowType(PowerPoint::PpSlideShowType value); //Sets the value of the ShowType property

    /*
    Property ShowWithAnimation

    For more information, see help context 514012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ShowWithAnimation() const; //Returns the value of ShowWithAnimation
    inline void SetShowWithAnimation(Office::MsoTriState value); //Sets the value of the ShowWithAnimation property

    /*
    Property ShowWithNarration

    For more information, see help context 514011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ShowWithNarration() const; //Returns the value of ShowWithNarration
    inline void SetShowWithNarration(Office::MsoTriState value); //Sets the value of the ShowWithNarration property

    /*
    Property SlideShowName

    For more information, see help context 514013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString SlideShowName() const; //Returns the value of SlideShowName
    inline void SetSlideShowName(const QString& value); //Sets the value of the SlideShowName property

    /*
    Property StartingSlide

    For more information, see help context 514005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int StartingSlide() const; //Returns the value of StartingSlide
    inline void SetStartingSlide(int value); //Sets the value of the StartingSlide property

    /*
    Method Run

    For more information, see help context 514008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowWindow* Run();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT NamedSlideShows : public QAxObject
{
public:
    NamedSlideShows(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 515001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 515002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 515004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::NamedSlideShow* Add(const QString& Name, const QVariant& safeArrayOfSlideIDs);

    /*
    Method Item

    For more information, see help context 515003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::NamedSlideShow* Item(const QVariant& Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT NamedSlideShow : public QAxObject
{
public:
    NamedSlideShow(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 516001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 516006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Name

    For more information, see help context 516003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Parent

    For more information, see help context 516002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property SlideIDs

    For more information, see help context 516005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant SlideIDs() const; //Returns the value of SlideIDs

    /*
    Method Delete

    For more information, see help context 516004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT PrintOptions : public QAxObject
{
public:
    PrintOptions(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActivePrinter

    For more information, see help context 517015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString ActivePrinter() const; //Returns the value of ActivePrinter
    inline void SetActivePrinter(const QString& value); //Sets the value of the ActivePrinter property

    /*
    Property Application

    For more information, see help context 517001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Collate

    For more information, see help context 517003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Collate() const; //Returns the value of Collate
    inline void SetCollate(Office::MsoTriState value); //Sets the value of the Collate property

    /*
    Property FitToPage

    For more information, see help context 517004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState FitToPage() const; //Returns the value of FitToPage
    inline void SetFitToPage(Office::MsoTriState value); //Sets the value of the FitToPage property

    /*
    Property FrameSlides

    For more information, see help context 517005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState FrameSlides() const; //Returns the value of FrameSlides
    inline void SetFrameSlides(Office::MsoTriState value); //Sets the value of the FrameSlides property

    /*
    Property HandoutOrder

    For more information, see help context 517016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpPrintHandoutOrder HandoutOrder() const; //Returns the value of HandoutOrder
    inline void SetHandoutOrder(PowerPoint::PpPrintHandoutOrder value); //Sets the value of the HandoutOrder property

    /*
    Property NumberOfCopies

    For more information, see help context 517006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int NumberOfCopies() const; //Returns the value of NumberOfCopies
    inline void SetNumberOfCopies(int value); //Sets the value of the NumberOfCopies property

    /*
    Property OutputType

    For more information, see help context 517007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpPrintOutputType OutputType() const; //Returns the value of OutputType
    inline void SetOutputType(PowerPoint::PpPrintOutputType value); //Sets the value of the OutputType property

    /*
    Property Parent

    For more information, see help context 517008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PrintColorType

    For more information, see help context 517002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpPrintColorType PrintColorType() const; //Returns the value of PrintColorType
    inline void SetPrintColorType(PowerPoint::PpPrintColorType value); //Sets the value of the PrintColorType property

    /*
    Property PrintComments

    For more information, see help context 517017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState PrintComments() const; //Returns the value of PrintComments
    inline void SetPrintComments(Office::MsoTriState value); //Sets the value of the PrintComments property

    /*
    Property PrintFontsAsGraphics

    For more information, see help context 517013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState PrintFontsAsGraphics() const; //Returns the value of PrintFontsAsGraphics
    inline void SetPrintFontsAsGraphics(Office::MsoTriState value); //Sets the value of the PrintFontsAsGraphics property

    /*
    Property PrintHiddenSlides

    For more information, see help context 517009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState PrintHiddenSlides() const; //Returns the value of PrintHiddenSlides
    inline void SetPrintHiddenSlides(Office::MsoTriState value); //Sets the value of the PrintHiddenSlides property

    /*
    Property PrintInBackground

    For more information, see help context 517010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState PrintInBackground() const; //Returns the value of PrintInBackground
    inline void SetPrintInBackground(Office::MsoTriState value); //Sets the value of the PrintInBackground property

    /*
    Property RangeType

    For more information, see help context 517011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpPrintRangeType RangeType() const; //Returns the value of RangeType
    inline void SetRangeType(PowerPoint::PpPrintRangeType value); //Sets the value of the RangeType property

    /*
    Property Ranges

    For more information, see help context 517012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PrintRanges* Ranges() const; //Returns the value of Ranges

    /*
    Property SlideShowName

    For more information, see help context 517014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString SlideShowName() const; //Returns the value of SlideShowName
    inline void SetSlideShowName(const QString& value); //Sets the value of the SlideShowName property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT PrintRanges : public QAxObject
{
public:
    PrintRanges(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 518002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 518005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 518001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PrintRange* Add(int Start, int End);

    /*
    Method ClearAll

    For more information, see help context 518003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ClearAll();

    /*
    Method Item

    For more information, see help context 518004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PrintRange* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT PrintRange : public QAxObject
{
public:
    PrintRange(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 519001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property End

    For more information, see help context 519004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int End() const; //Returns the value of End

    /*
    Property Parent

    For more information, see help context 519002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Start

    For more information, see help context 519003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Start() const; //Returns the value of Start

    /*
    Method Delete

    For more information, see help context 519005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT AddIns : public QAxObject
{
public:
    AddIns(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 520001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 520002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 520004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AddIn* Add(const QString& FileName);

    /*
    Method Item

    For more information, see help context 520003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AddIn* Item(QVariant& Index);

    /*
    Method Remove

    For more information, see help context 520005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Remove(QVariant& Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT AddIn : public QAxObject
{
public:
    AddIn(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 521001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property AutoLoad

    For more information, see help context 521007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AutoLoad() const; //Returns the value of AutoLoad
    inline void SetAutoLoad(Office::MsoTriState value); //Sets the value of the AutoLoad property

    /*
    Property DisplayAlerts

    For more information, see help context 521009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState DisplayAlerts() const; //Returns the value of DisplayAlerts
    inline void SetDisplayAlerts(Office::MsoTriState value); //Sets the value of the DisplayAlerts property

    /*
    Property FullName

    For more information, see help context 521003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString FullName() const; //Returns the value of FullName

    /*
    Property Loaded

    For more information, see help context 521008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Loaded() const; //Returns the value of Loaded
    inline void SetLoaded(Office::MsoTriState value); //Sets the value of the Loaded property

    /*
    Property Name

    For more information, see help context 521004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Parent

    For more information, see help context 521002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Path

    For more information, see help context 521005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property Registered

    For more information, see help context 521006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Registered() const; //Returns the value of Registered
    inline void SetRegistered(Office::MsoTriState value); //Sets the value of the Registered property

    /*
    Property RegisteredInHKLM

    For more information, see help context 521010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState RegisteredInHKLM() const; //Returns the value of RegisteredInHKLM

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Presentations : public QAxObject
{
public:
    Presentations(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 522001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 522002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 522004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* Add();

    /*
    Method Add

    For more information, see help context 522004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* Add(Office::MsoTriState WithWindow);

    /*
    Method CanCheckOut

    For more information, see help context 522008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool CanCheckOut(const QString& FileName);

    /*
    Method CheckOut

    For more information, see help context 522007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CheckOut(const QString& FileName);

    /*
    Method Item

    For more information, see help context 522003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* Item(const QVariant& Index);

    /*
    Method Open

    For more information, see help context 522006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* Open(const QString& FileName);

    /*
    Method Open

    For more information, see help context 522006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* Open(const QString& FileName, Office::MsoTriState ReadOnly);

    /*
    Method Open

    For more information, see help context 522006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* Open(const QString& FileName, Office::MsoTriState ReadOnly, Office::MsoTriState Untitled);

    /*
    Method Open

    For more information, see help context 522006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* Open(const QString& FileName, Office::MsoTriState ReadOnly, Office::MsoTriState Untitled, Office::MsoTriState WithWindow);

    /*
    Method OpenOld

    For more information, see help context 522005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* OpenOld(const QString& FileName);

    /*
    Method OpenOld

    For more information, see help context 522005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* OpenOld(const QString& FileName, Office::MsoTriState ReadOnly);

    /*
    Method OpenOld

    For more information, see help context 522005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* OpenOld(const QString& FileName, Office::MsoTriState ReadOnly, Office::MsoTriState Untitled);

    /*
    Method OpenOld

    For more information, see help context 522005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* OpenOld(const QString& FileName, Office::MsoTriState ReadOnly, Office::MsoTriState Untitled, Office::MsoTriState WithWindow);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// stub for vtable-only interface
class PresEvents : public QAxObject {};

class POWERPOINT_EXPORT Hyperlinks : public QAxObject
{
public:
    Hyperlinks(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 525001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 525002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 525003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Hyperlink* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Hyperlink : public QAxObject
{
public:
    Hyperlink(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Address

    For more information, see help context 526004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Address() const; //Returns the value of Address
    inline void SetAddress(const QString& value); //Sets the value of the Address property

    /*
    Property Application

    For more information, see help context 526001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property EmailSubject

    For more information, see help context 526007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString EmailSubject() const; //Returns the value of EmailSubject
    inline void SetEmailSubject(const QString& value); //Sets the value of the EmailSubject property

    /*
    Property Parent

    For more information, see help context 526002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property ScreenTip

    For more information, see help context 526008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString ScreenTip() const; //Returns the value of ScreenTip
    inline void SetScreenTip(const QString& value); //Sets the value of the ScreenTip property

    /*
    Property ShowAndReturn

    For more information, see help context 526010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ShowAndReturn() const; //Returns the value of ShowAndReturn
    inline void SetShowAndReturn(Office::MsoTriState value); //Sets the value of the ShowAndReturn property

    /*
    Property SubAddress

    For more information, see help context 526005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString SubAddress() const; //Returns the value of SubAddress
    inline void SetSubAddress(const QString& value); //Sets the value of the SubAddress property

    /*
    Property TextToDisplay

    For more information, see help context 526009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString TextToDisplay() const; //Returns the value of TextToDisplay
    inline void SetTextToDisplay(const QString& value); //Sets the value of the TextToDisplay property

    /*
    Property Type

    For more information, see help context 526003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoHyperlinkType Type() const; //Returns the value of Type

    /*
    Method AddToFavorites

    For more information, see help context 526006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddToFavorites();

    /*
    Method CreateNewDocument

    For more information, see help context 526012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CreateNewDocument(const QString& FileName, Office::MsoTriState EditNow, Office::MsoTriState Overwrite);

    /*
    Method Delete

    For more information, see help context 526013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method Follow

    For more information, see help context 526011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Follow();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT PageSetup : public QAxObject
{
public:
    PageSetup(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 527001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property FirstSlideNumber

    For more information, see help context 527003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int FirstSlideNumber() const; //Returns the value of FirstSlideNumber
    inline void SetFirstSlideNumber(int value); //Sets the value of the FirstSlideNumber property

    /*
    Property NotesOrientation

    For more information, see help context 527007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoOrientation NotesOrientation() const; //Returns the value of NotesOrientation
    inline void SetNotesOrientation(Office::MsoOrientation value); //Sets the value of the NotesOrientation property

    /*
    Property Parent

    For more information, see help context 527002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property SlideHeight

    For more information, see help context 527004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double SlideHeight() const; //Returns the value of SlideHeight
    inline void SetSlideHeight(double value); //Sets the value of the SlideHeight property

    /*
    Property SlideOrientation

    For more information, see help context 527008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoOrientation SlideOrientation() const; //Returns the value of SlideOrientation
    inline void SetSlideOrientation(Office::MsoOrientation value); //Sets the value of the SlideOrientation property

    /*
    Property SlideSize

    For more information, see help context 527006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSlideSizeType SlideSize() const; //Returns the value of SlideSize
    inline void SetSlideSize(PowerPoint::PpSlideSizeType value); //Sets the value of the SlideSize property

    /*
    Property SlideWidth

    For more information, see help context 527005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double SlideWidth() const; //Returns the value of SlideWidth
    inline void SetSlideWidth(double value); //Sets the value of the SlideWidth property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Fonts : public QAxObject
{
public:
    Fonts(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 528001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 528002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 528003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Font* Item(const QVariant& Index);

    /*
    Method Replace

    For more information, see help context 528004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Replace(const QString& Original, const QString& Replacement);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ExtraColors : public QAxObject
{
public:
    ExtraColors(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 529001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 529002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 529004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Add(int Type);

    /*
    Method Item

    For more information, see help context 529003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Slides : public QAxObject
{
public:
    Slides(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 530001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 530002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 530005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Slide* Add(int Index, PowerPoint::PpSlideLayout Layout);

    /*
    Method FindBySlideID

    For more information, see help context 530004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Slide* FindBySlideID(int SlideID);

    /*
    Method InsertFromFile

    For more information, see help context 530006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int InsertFromFile(const QString& FileName, int Index);

    /*
    Method InsertFromFile

    For more information, see help context 530006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int InsertFromFile(const QString& FileName, int Index, int SlideStart);

    /*
    Method InsertFromFile

    For more information, see help context 530006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int InsertFromFile(const QString& FileName, int Index, int SlideStart, int SlideEnd);

    /*
    Method Item

    For more information, see help context 530003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Slide* Item(const QVariant& Index);

    /*
    Method Paste

    For more information, see help context 530008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideRange* Paste();

    /*
    Method Paste

    For more information, see help context 530008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideRange* Paste(int Index);

    /*
    Method Range

    For more information, see help context 530007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideRange* Range();

    /*
    Method Range

    For more information, see help context 530007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideRange* Range(const QVariant& Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT _Slide : public QAxObject
{
public:
    _Slide(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 531001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Background

    For more information, see help context 531007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Background() const; //Returns the value of Background

    /*
    Property ColorScheme

    For more information, see help context 531006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorScheme* ColorScheme() const; //Returns the value of ColorScheme
    inline void SetColorScheme(PowerPoint::ColorScheme* value); //Sets the value of the ColorScheme property

    /*
    Property Comments

    For more information, see help context 531028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Comments* Comments() const; //Returns the value of Comments

    /*
    Property Design

    For more information, see help context 531029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Design() const; //Returns the value of Design
    inline void SetDesign(PowerPoint::Design* value); //Sets the value of the Design property

    /*
    Property DisplayMasterShapes

    For more information, see help context 531020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState DisplayMasterShapes() const; //Returns the value of DisplayMasterShapes
    inline void SetDisplayMasterShapes(Office::MsoTriState value); //Sets the value of the DisplayMasterShapes property

    /*
    Property FollowMasterBackground

    For more information, see help context 531021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState FollowMasterBackground() const; //Returns the value of FollowMasterBackground
    inline void SetFollowMasterBackground(Office::MsoTriState value); //Sets the value of the FollowMasterBackground property

    /*
    Property HeadersFooters

    For more information, see help context 531004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::HeadersFooters* HeadersFooters() const; //Returns the value of HeadersFooters

    /*
    Property Hyperlinks

    For more information, see help context 531024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Hyperlinks* Hyperlinks() const; //Returns the value of Hyperlinks

    /*
    Property Layout

    For more information, see help context 531014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSlideLayout Layout() const; //Returns the value of Layout
    inline void SetLayout(PowerPoint::PpSlideLayout value); //Sets the value of the Layout property

    /*
    Property Master

    For more information, see help context 531023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* Master() const; //Returns the value of Master

    /*
    Property Name

    For more information, see help context 531008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NotesPage

    For more information, see help context 531022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideRange* NotesPage() const; //Returns the value of NotesPage

    /*
    Property Parent

    For more information, see help context 531002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PrintSteps

    For more information, see help context 531010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int PrintSteps() const; //Returns the value of PrintSteps

    /*
    Property Scripts

    For more information, see help context 531026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Scripts* Scripts() const; //Returns the value of Scripts

    /*
    Property Shapes

    For more information, see help context 531003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shapes* Shapes() const; //Returns the value of Shapes

    /*
    Property SlideID

    For more information, see help context 531009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int SlideID() const; //Returns the value of SlideID

    /*
    Property SlideIndex

    For more information, see help context 531018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int SlideIndex() const; //Returns the value of SlideIndex

    /*
    Property SlideNumber

    For more information, see help context 531019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int SlideNumber() const; //Returns the value of SlideNumber

    /*
    Property SlideShowTransition

    For more information, see help context 531005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowTransition* SlideShowTransition() const; //Returns the value of SlideShowTransition

    /*
    Property Tags

    For more information, see help context 531017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Tags* Tags() const; //Returns the value of Tags

    /*
    Property TimeLine

    For more information, see help context 531031 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TimeLine* TimeLine() const; //Returns the value of TimeLine

    /*
    Method ApplyTemplate

    For more information, see help context 531032 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ApplyTemplate(const QString& FileName);

    /*
    Method Copy

    For more information, see help context 531013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Copy();

    /*
    Method Cut

    For more information, see help context 531012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Cut();

    /*
    Method Delete

    For more information, see help context 531016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method Duplicate

    For more information, see help context 531015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideRange* Duplicate();

    /*
    Method Export

    For more information, see help context 531025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& FileName, const QString& FilterName);

    /*
    Method Export

    For more information, see help context 531025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& FileName, const QString& FilterName, int ScaleWidth);

    /*
    Method Export

    For more information, see help context 531025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& FileName, const QString& FilterName, int ScaleWidth, int ScaleHeight);

    /*
    Method MoveTo

    For more information, see help context 531030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void MoveTo(int toPos);

    /*
    Method Select

    For more information, see help context 531011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Select();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT SlideRange : public QAxObject
{
public:
    SlideRange(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 532001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Background

    For more information, see help context 532007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Background() const; //Returns the value of Background

    /*
    Property ColorScheme

    For more information, see help context 532006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorScheme* ColorScheme() const; //Returns the value of ColorScheme
    inline void SetColorScheme(PowerPoint::ColorScheme* value); //Sets the value of the ColorScheme property

    /*
    Property Comments

    For more information, see help context 532032 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Comments* Comments() const; //Returns the value of Comments

    /*
    Property Count

    For more information, see help context 532029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Design

    For more information, see help context 532033 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Design() const; //Returns the value of Design
    inline void SetDesign(PowerPoint::Design* value); //Sets the value of the Design property

    /*
    Property DisplayMasterShapes

    For more information, see help context 532020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState DisplayMasterShapes() const; //Returns the value of DisplayMasterShapes
    inline void SetDisplayMasterShapes(Office::MsoTriState value); //Sets the value of the DisplayMasterShapes property

    /*
    Property FollowMasterBackground

    For more information, see help context 532021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState FollowMasterBackground() const; //Returns the value of FollowMasterBackground
    inline void SetFollowMasterBackground(Office::MsoTriState value); //Sets the value of the FollowMasterBackground property

    /*
    Property HeadersFooters

    For more information, see help context 532004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::HeadersFooters* HeadersFooters() const; //Returns the value of HeadersFooters

    /*
    Property Hyperlinks

    For more information, see help context 532024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Hyperlinks* Hyperlinks() const; //Returns the value of Hyperlinks

    /*
    Property Layout

    For more information, see help context 532014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSlideLayout Layout() const; //Returns the value of Layout
    inline void SetLayout(PowerPoint::PpSlideLayout value); //Sets the value of the Layout property

    /*
    Property Master

    For more information, see help context 532023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* Master() const; //Returns the value of Master

    /*
    Property Name

    For more information, see help context 532008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NotesPage

    For more information, see help context 532022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideRange* NotesPage() const; //Returns the value of NotesPage

    /*
    Property Parent

    For more information, see help context 532002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PrintSteps

    For more information, see help context 532010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int PrintSteps() const; //Returns the value of PrintSteps

    /*
    Property Scripts

    For more information, see help context 532030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Scripts* Scripts() const; //Returns the value of Scripts

    /*
    Property Shapes

    For more information, see help context 532003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shapes* Shapes() const; //Returns the value of Shapes

    /*
    Property SlideID

    For more information, see help context 532009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int SlideID() const; //Returns the value of SlideID

    /*
    Property SlideIndex

    For more information, see help context 532018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int SlideIndex() const; //Returns the value of SlideIndex

    /*
    Property SlideNumber

    For more information, see help context 532019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int SlideNumber() const; //Returns the value of SlideNumber

    /*
    Property SlideShowTransition

    For more information, see help context 532005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowTransition* SlideShowTransition() const; //Returns the value of SlideShowTransition

    /*
    Property Tags

    For more information, see help context 532017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Tags* Tags() const; //Returns the value of Tags

    /*
    Property TimeLine

    For more information, see help context 532035 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TimeLine* TimeLine() const; //Returns the value of TimeLine

    /*
    Property _NewEnum

    For more information, see help context 532027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method ApplyTemplate

    For more information, see help context 532036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ApplyTemplate(const QString& FileName);

    /*
    Method Copy

    For more information, see help context 532013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Copy();

    /*
    Method Cut

    For more information, see help context 532012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Cut();

    /*
    Method Delete

    For more information, see help context 532016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method Duplicate

    For more information, see help context 532015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideRange* Duplicate();

    /*
    Method Export

    For more information, see help context 532025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& FileName, const QString& FilterName);

    /*
    Method Export

    For more information, see help context 532025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& FileName, const QString& FilterName, int ScaleWidth);

    /*
    Method Export

    For more information, see help context 532025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& FileName, const QString& FilterName, int ScaleWidth, int ScaleHeight);

    /*
    Method Item

    For more information, see help context 532026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Slide* Item(const QVariant& Index);

    /*
    Method MoveTo

    For more information, see help context 532034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void MoveTo(int toPos);

    /*
    Method Select

    For more information, see help context 532011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Select();

    /*
    Method _Index

    For more information, see help context 532028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT _Master : public QAxObject
{
public:
    _Master(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 533001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Background

    For more information, see help context 533006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Background() const; //Returns the value of Background

    /*
    Property ColorScheme

    For more information, see help context 533005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorScheme* ColorScheme() const; //Returns the value of ColorScheme
    inline void SetColorScheme(PowerPoint::ColorScheme* value); //Sets the value of the ColorScheme property

    /*
    Property Design

    For more information, see help context 533014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Design() const; //Returns the value of Design

    /*
    Property HeadersFooters

    For more information, see help context 533004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::HeadersFooters* HeadersFooters() const; //Returns the value of HeadersFooters

    /*
    Property Height

    For more information, see help context 533009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Height() const; //Returns the value of Height

    /*
    Property Hyperlinks

    For more information, see help context 533012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Hyperlinks* Hyperlinks() const; //Returns the value of Hyperlinks

    /*
    Property Name

    For more information, see help context 533007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    For more information, see help context 533002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Scripts

    For more information, see help context 533013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Scripts* Scripts() const; //Returns the value of Scripts

    /*
    Property Shapes

    For more information, see help context 533003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shapes* Shapes() const; //Returns the value of Shapes

    /*
    Property SlideShowTransition

    For more information, see help context 533016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowTransition* SlideShowTransition() const; //Returns the value of SlideShowTransition

    /*
    Property TextStyles

    For more information, see help context 533011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextStyles* TextStyles() const; //Returns the value of TextStyles

    /*
    Property TimeLine

    For more information, see help context 533015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TimeLine* TimeLine() const; //Returns the value of TimeLine

    /*
    Property Width

    For more information, see help context 533010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Width() const; //Returns the value of Width

    /*
    Method Delete

    For more information, see help context 533008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// stub for vtable-only interface
class SldEvents : public QAxObject {};

class POWERPOINT_EXPORT ColorSchemes : public QAxObject
{
public:
    ColorSchemes(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 536001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 536002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 536004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorScheme* Add();

    /*
    Method Add

    For more information, see help context 536004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorScheme* Add(PowerPoint::ColorScheme* Scheme);

    /*
    Method Item

    For more information, see help context 536003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorScheme* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ColorScheme : public QAxObject
{
public:
    ColorScheme(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 537001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 537002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Colors

    For more information, see help context 537003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::RGBColor* Colors(PowerPoint::PpColorSchemeIndex SchemeColor);

    /*
    Method Delete

    For more information, see help context 537004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT RGBColor : public QAxObject
{
public:
    RGBColor(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 538001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Parent

    For more information, see help context 538002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property RGB

    For more information, see help context 538003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int RGB() const; //Returns the value of RGB
    inline void SetRGB(int value); //Sets the value of the RGB property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT SlideShowTransition : public QAxObject
{
public:
    SlideShowTransition(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AdvanceOnClick

    For more information, see help context 539003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AdvanceOnClick() const; //Returns the value of AdvanceOnClick
    inline void SetAdvanceOnClick(Office::MsoTriState value); //Sets the value of the AdvanceOnClick property

    /*
    Property AdvanceOnTime

    For more information, see help context 539004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AdvanceOnTime() const; //Returns the value of AdvanceOnTime
    inline void SetAdvanceOnTime(Office::MsoTriState value); //Sets the value of the AdvanceOnTime property

    /*
    Property AdvanceTime

    For more information, see help context 539005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double AdvanceTime() const; //Returns the value of AdvanceTime
    inline void SetAdvanceTime(double value); //Sets the value of the AdvanceTime property

    /*
    Property Application

    For more information, see help context 539001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property EntryEffect

    For more information, see help context 539006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpEntryEffect EntryEffect() const; //Returns the value of EntryEffect
    inline void SetEntryEffect(PowerPoint::PpEntryEffect value); //Sets the value of the EntryEffect property

    /*
    Property Hidden

    For more information, see help context 539007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Hidden() const; //Returns the value of Hidden
    inline void SetHidden(Office::MsoTriState value); //Sets the value of the Hidden property

    /*
    Property LoopSoundUntilNext

    For more information, see help context 539008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState LoopSoundUntilNext() const; //Returns the value of LoopSoundUntilNext
    inline void SetLoopSoundUntilNext(Office::MsoTriState value); //Sets the value of the LoopSoundUntilNext property

    /*
    Property Parent

    For more information, see help context 539002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property SoundEffect

    For more information, see help context 539009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SoundEffect* SoundEffect() const; //Returns the value of SoundEffect

    /*
    Property Speed

    For more information, see help context 539010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpTransitionSpeed Speed() const; //Returns the value of Speed
    inline void SetSpeed(PowerPoint::PpTransitionSpeed value); //Sets the value of the Speed property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT SoundEffect : public QAxObject
{
public:
    SoundEffect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 540001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Name

    For more information, see help context 540003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    For more information, see help context 540002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Type

    For more information, see help context 540004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSoundEffectType Type() const; //Returns the value of Type
    inline void SetType(PowerPoint::PpSoundEffectType value); //Sets the value of the Type property

    /*
    Method ImportFromFile

    For more information, see help context 540005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ImportFromFile(const QString& FileName);

    /*
    Method Play

    For more information, see help context 540006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Play();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT SoundFormat : public QAxObject
{
public:
    SoundFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property SourceFullName

    For more information, see help context 541005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString SourceFullName() const; //Returns the value of SourceFullName

    /*
    Property Type

    For more information, see help context 541004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSoundFormatType Type() const; //Returns the value of Type

    /*
    Method Export

    For more information, see help context 541003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PpSoundFormatType Export(const QString& FileName);

    /*
    Method Import

    For more information, see help context 541002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Import(const QString& FileName);

    /*
    Method Play

    For more information, see help context 541001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Play();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT HeadersFooters : public QAxObject
{
public:
    HeadersFooters(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 542001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property DateAndTime

    For more information, see help context 542003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::HeaderFooter* DateAndTime() const; //Returns the value of DateAndTime

    /*
    Property DisplayOnTitleSlide

    For more information, see help context 542007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState DisplayOnTitleSlide() const; //Returns the value of DisplayOnTitleSlide
    inline void SetDisplayOnTitleSlide(Office::MsoTriState value); //Sets the value of the DisplayOnTitleSlide property

    /*
    Property Footer

    For more information, see help context 542006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::HeaderFooter* Footer() const; //Returns the value of Footer

    /*
    Property Header

    For more information, see help context 542005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::HeaderFooter* Header() const; //Returns the value of Header

    /*
    Property Parent

    For more information, see help context 542002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property SlideNumber

    For more information, see help context 542004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::HeaderFooter* SlideNumber() const; //Returns the value of SlideNumber

    /*
    Method Clear

    For more information, see help context 542008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Clear();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Shapes : public QAxObject
{
public:
    Shapes(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 543002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property HasTitle

    For more information, see help context 543018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasTitle() const; //Returns the value of HasTitle

    /*
    Property Parent

    For more information, see help context 543001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Placeholders

    For more information, see help context 543021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Placeholders* Placeholders() const; //Returns the value of Placeholders

    /*
    Property Title

    For more information, see help context 543020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Title() const; //Returns the value of Title

    /*
    Property _NewEnum

    For more information, see help context 543004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method AddCallout

    For more information, see help context 543005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddCallout(Office::MsoCalloutType Type, double Left, double Top, double Width, double Height);

    /*
    Method AddCanvas

    For more information, see help context 543030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddCanvas(double Left, double Top, double Width, double Height);

    /*
    Method AddComment

    For more information, see help context 543023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddComment();

    /*
    Method AddComment

    For more information, see help context 543023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddComment(double Left);

    /*
    Method AddComment

    For more information, see help context 543023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddComment(double Left, double Top);

    /*
    Method AddComment

    For more information, see help context 543023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddComment(double Left, double Top, double Width);

    /*
    Method AddComment

    For more information, see help context 543023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddComment(double Left, double Top, double Width, double Height);

    /*
    Method AddConnector

    For more information, see help context 543006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddConnector(Office::MsoConnectorType Type, double BeginX, double BeginY, double EndX, double EndY);

    /*
    Method AddCurve

    For more information, see help context 543007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddCurve(const QVariant& SafeArrayOfPoints);

    /*
    Method AddDiagram

    For more information, see help context 543029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddDiagram(Office::MsoDiagramType Type, double Left, double Top, double Width, double Height);

    /*
    Method AddLabel

    For more information, see help context 543008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddLabel(Office::MsoTextOrientation Orientation, double Left, double Top, double Width, double Height);

    /*
    Method AddLine

    For more information, see help context 543009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddLine(double BeginX, double BeginY, double EndX, double EndY);

    /*
    Method AddMediaObject

    For more information, see help context 543025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddMediaObject(const QString& FileName);

    /*
    Method AddMediaObject

    For more information, see help context 543025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddMediaObject(const QString& FileName, double Left);

    /*
    Method AddMediaObject

    For more information, see help context 543025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddMediaObject(const QString& FileName, double Left, double Top);

    /*
    Method AddMediaObject

    For more information, see help context 543025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddMediaObject(const QString& FileName, double Left, double Top, double Width);

    /*
    Method AddMediaObject

    For more information, see help context 543025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddMediaObject(const QString& FileName, double Left, double Top, double Width, double Height);

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject();

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject(double Left);

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject(double Left, double Top);

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject(double Left, double Top, double Width);

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject(double Left, double Top, double Width, double Height);

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName);

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName);

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName, Office::MsoTriState DisplayAsIcon);

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName, Office::MsoTriState DisplayAsIcon, const QString& IconFileName);

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex);

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel);

    /*
    Method AddOLEObject

    For more information, see help context 543022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel, Office::MsoTriState Link);

    /*
    Method AddPicture

    For more information, see help context 543010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top);

    /*
    Method AddPicture

    For more information, see help context 543010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top, double Width);

    /*
    Method AddPicture

    For more information, see help context 543010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top, double Width, double Height);

    /*
    Method AddPlaceholder

    For more information, see help context 543024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPlaceholder(PowerPoint::PpPlaceholderType Type);

    /*
    Method AddPlaceholder

    For more information, see help context 543024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPlaceholder(PowerPoint::PpPlaceholderType Type, double Left);

    /*
    Method AddPlaceholder

    For more information, see help context 543024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPlaceholder(PowerPoint::PpPlaceholderType Type, double Left, double Top);

    /*
    Method AddPlaceholder

    For more information, see help context 543024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPlaceholder(PowerPoint::PpPlaceholderType Type, double Left, double Top, double Width);

    /*
    Method AddPlaceholder

    For more information, see help context 543024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPlaceholder(PowerPoint::PpPlaceholderType Type, double Left, double Top, double Width, double Height);

    /*
    Method AddPolyline

    For more information, see help context 543011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPolyline(const QVariant& SafeArrayOfPoints);

    /*
    Method AddShape

    For more information, see help context 543012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddShape(Office::MsoAutoShapeType Type, double Left, double Top, double Width, double Height);

    /*
    Method AddTable

    For more information, see help context 543027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddTable(int NumRows, int NumColumns);

    /*
    Method AddTable

    For more information, see help context 543027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddTable(int NumRows, int NumColumns, double Left);

    /*
    Method AddTable

    For more information, see help context 543027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddTable(int NumRows, int NumColumns, double Left, double Top);

    /*
    Method AddTable

    For more information, see help context 543027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddTable(int NumRows, int NumColumns, double Left, double Top, double Width);

    /*
    Method AddTable

    For more information, see help context 543027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddTable(int NumRows, int NumColumns, double Left, double Top, double Width, double Height);

    /*
    Method AddTextEffect

    For more information, see help context 543013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddTextEffect(Office::MsoPresetTextEffect PresetTextEffect, const QString& Text, const QString& FontName, double FontSize, Office::MsoTriState FontBold, Office::MsoTriState FontItalic, double Left, double Top);

    /*
    Method AddTextbox

    For more information, see help context 543014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddTextbox(Office::MsoTextOrientation Orientation, double Left, double Top, double Width, double Height);

    /*
    Method AddTitle

    For more information, see help context 543019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddTitle();

    /*
    Method BuildFreeform

    For more information, see help context 543015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::FreeformBuilder* BuildFreeform(Office::MsoEditingType EditingType, double X1, double Y1);

    /*
    Method Item

    For more information, see help context 543003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Item(const QVariant& Index);

    /*
    Method Paste

    For more information, see help context 543026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Paste();

    /*
    Method PasteSpecial

    For more information, see help context 543028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* PasteSpecial();

    /*
    Method PasteSpecial

    For more information, see help context 543028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* PasteSpecial(PowerPoint::PpPasteDataType DataType);

    /*
    Method PasteSpecial

    For more information, see help context 543028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon);

    /*
    Method PasteSpecial

    For more information, see help context 543028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName);

    /*
    Method PasteSpecial

    For more information, see help context 543028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex);

    /*
    Method PasteSpecial

    For more information, see help context 543028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel);

    /*
    Method PasteSpecial

    For more information, see help context 543028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel, Office::MsoTriState Link);

    /*
    Method Range

    For more information, see help context 543017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Range();

    /*
    Method Range

    For more information, see help context 543017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Range(const QVariant& Index);

    /*
    Method SelectAll

    For more information, see help context 543016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SelectAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Placeholders : public QAxObject
{
public:
    Placeholders(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 544001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 544002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 544003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT PlaceholderFormat : public QAxObject
{
public:
    PlaceholderFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 545001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Parent

    For more information, see help context 545002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Type

    For more information, see help context 545003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpPlaceholderType Type() const; //Returns the value of Type

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT FreeformBuilder : public QAxObject
{
public:
    FreeformBuilder(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Parent

    For more information, see help context 546001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Method AddNodes

    For more information, see help context 546002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddNodes(Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1);

    /*
    Method AddNodes

    For more information, see help context 546002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddNodes(Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2);

    /*
    Method AddNodes

    For more information, see help context 546002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddNodes(Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2);

    /*
    Method AddNodes

    For more information, see help context 546002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddNodes(Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2, double X3);

    /*
    Method AddNodes

    For more information, see help context 546002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddNodes(Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2, double X3, double Y3);

    /*
    Method ConvertToShape

    For more information, see help context 546003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* ConvertToShape();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Shape : public QAxObject
{
public:
    Shape(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActionSettings

    For more information, see help context 547048 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ActionSettings* ActionSettings() const; //Returns the value of ActionSettings

    /*
    Property Adjustments

    For more information, see help context 547015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Adjustments* Adjustments() const; //Returns the value of Adjustments

    /*
    Property AlternativeText

    For more information, see help context 547058 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString AlternativeText() const; //Returns the value of AlternativeText
    inline void SetAlternativeText(const QString& value); //Sets the value of the AlternativeText property

    /*
    Property AnimationSettings

    For more information, see help context 547047 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AnimationSettings* AnimationSettings() const; //Returns the value of AnimationSettings

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property AutoShapeType

    For more information, see help context 547016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoAutoShapeType AutoShapeType() const; //Returns the value of AutoShapeType
    inline void SetAutoShapeType(Office::MsoAutoShapeType value); //Sets the value of the AutoShapeType property

    /*
    Property BlackWhiteMode

    For more information, see help context 547017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoBlackWhiteMode BlackWhiteMode() const; //Returns the value of BlackWhiteMode
    inline void SetBlackWhiteMode(Office::MsoBlackWhiteMode value); //Sets the value of the BlackWhiteMode property

    /*
    Property Callout

    For more information, see help context 547018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::CalloutFormat* Callout() const; //Returns the value of Callout

    /*
    Property CanvasItems

    For more information, see help context 547068 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::CanvasShapes* CanvasItems() const; //Returns the value of CanvasItems

    /*
    Property Child

    For more information, see help context 547066 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Child() const; //Returns the value of Child

    /*
    Property ConnectionSiteCount

    For more information, see help context 547019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int ConnectionSiteCount() const; //Returns the value of ConnectionSiteCount

    /*
    Property Connector

    For more information, see help context 547020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Connector() const; //Returns the value of Connector

    /*
    Property ConnectorFormat

    For more information, see help context 547021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ConnectorFormat* ConnectorFormat() const; //Returns the value of ConnectorFormat

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Diagram

    For more information, see help context 547063 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Diagram* Diagram() const; //Returns the value of Diagram

    /*
    Property DiagramNode

    For more information, see help context 547065 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* DiagramNode() const; //Returns the value of DiagramNode

    /*
    Property Fill

    For more information, see help context 547022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::FillFormat* Fill() const; //Returns the value of Fill

    /*
    Property GroupItems

    For more information, see help context 547023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::GroupShapes* GroupItems() const; //Returns the value of GroupItems

    /*
    Property HasDiagram

    For more information, see help context 547062 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasDiagram() const; //Returns the value of HasDiagram

    /*
    Property HasDiagramNode

    For more information, see help context 547064 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasDiagramNode() const; //Returns the value of HasDiagramNode

    /*
    Property HasTable

    For more information, see help context 547059 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasTable() const; //Returns the value of HasTable

    /*
    Property HasTextFrame

    For more information, see help context 547055 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasTextFrame() const; //Returns the value of HasTextFrame

    /*
    Property Height

    For more information, see help context 547024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HorizontalFlip

    For more information, see help context 547025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HorizontalFlip() const; //Returns the value of HorizontalFlip

    /*
    Property Id

    For more information, see help context 547069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Id() const; //Returns the value of Id

    /*
    Property Left

    For more information, see help context 547026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Line

    For more information, see help context 547027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::LineFormat* Line() const; //Returns the value of Line

    /*
    Property LinkFormat

    For more information, see help context 547045 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::LinkFormat* LinkFormat() const; //Returns the value of LinkFormat

    /*
    Property LockAspectRatio

    For more information, see help context 547028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState LockAspectRatio() const; //Returns the value of LockAspectRatio
    inline void SetLockAspectRatio(Office::MsoTriState value); //Sets the value of the LockAspectRatio property

    /*
    Property MediaType

    For more information, see help context 547054 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpMediaType MediaType() const; //Returns the value of MediaType

    /*
    Property Name

    For more information, see help context 547029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Nodes

    For more information, see help context 547030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeNodes* Nodes() const; //Returns the value of Nodes

    /*
    Property OLEFormat

    For more information, see help context 547044 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::OLEFormat* OLEFormat() const; //Returns the value of OLEFormat

    /*
    Property Parent

    For more information, see help context 547001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property ParentGroup

    For more information, see help context 547067 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* ParentGroup() const; //Returns the value of ParentGroup

    /*
    Property PictureFormat

    For more information, see help context 547032 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PictureFormat* PictureFormat() const; //Returns the value of PictureFormat

    /*
    Property PlaceholderFormat

    For more information, see help context 547046 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PlaceholderFormat* PlaceholderFormat() const; //Returns the value of PlaceholderFormat

    /*
    Property RTF

    For more information, see help context 547074 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString RTF() const; //Returns the value of RTF
    inline void SetRTF(const QString& value); //Sets the value of the RTF property

    /*
    Property Rotation

    For more information, see help context 547031 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property Script

    For more information, see help context 547057 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Script* Script() const; //Returns the value of Script

    /*
    Property Shadow

    For more information, see help context 547033 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShadowFormat* Shadow() const; //Returns the value of Shadow

    /*
    Property SoundFormat

    For more information, see help context 547056 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SoundFormat* SoundFormat() const; //Returns the value of SoundFormat

    /*
    Property Table

    For more information, see help context 547060 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Table* Table() const; //Returns the value of Table

    /*
    Property Tags

    For more information, see help context 547049 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Tags* Tags() const; //Returns the value of Tags

    /*
    Property TextEffect

    For more information, see help context 547034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextEffectFormat* TextEffect() const; //Returns the value of TextEffect

    /*
    Property TextFrame

    For more information, see help context 547035 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextFrame* TextFrame() const; //Returns the value of TextFrame

    /*
    Property ThreeD

    For more information, see help context 547036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ThreeDFormat* ThreeD() const; //Returns the value of ThreeD

    /*
    Property Top

    For more information, see help context 547037 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Type

    For more information, see help context 547038 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoShapeType Type() const; //Returns the value of Type

    /*
    Property VerticalFlip

    For more information, see help context 547039 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState VerticalFlip() const; //Returns the value of VerticalFlip

    /*
    Property Vertices

    For more information, see help context 547040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant Vertices() const; //Returns the value of Vertices

    /*
    Property Visible

    For more information, see help context 547041 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Visible() const; //Returns the value of Visible
    inline void SetVisible(Office::MsoTriState value); //Sets the value of the Visible property

    /*
    Property Width

    For more information, see help context 547042 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property ZOrderPosition

    For more information, see help context 547043 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int ZOrderPosition() const; //Returns the value of ZOrderPosition

    /*
    Method Apply

    For more information, see help context 547002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Apply();

    /*
    Method CanvasCropBottom

    For more information, see help context 547073 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CanvasCropBottom(double Increment);

    /*
    Method CanvasCropLeft

    For more information, see help context 547070 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CanvasCropLeft(double Increment);

    /*
    Method CanvasCropRight

    For more information, see help context 547072 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CanvasCropRight(double Increment);

    /*
    Method CanvasCropTop

    For more information, see help context 547071 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CanvasCropTop(double Increment);

    /*
    Method Copy

    For more information, see help context 547051 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Copy();

    /*
    Method Cut

    For more information, see help context 547050 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Cut();

    /*
    Method Delete

    For more information, see help context 547003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method Duplicate

    For more information, see help context 547053 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Duplicate();

    /*
    Method Export

    For more information, see help context 547061 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& PathName, PowerPoint::PpShapeFormat Filter);

    /*
    Method Export

    For more information, see help context 547061 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth);

    /*
    Method Export

    For more information, see help context 547061 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth, int ScaleHeight);

    /*
    Method Export

    For more information, see help context 547061 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, PowerPoint::PpExportMode ExportMode);

    /*
    Method Flip

    For more information, see help context 547004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Flip(Office::MsoFlipCmd FlipCmd);

    /*
    Method IncrementLeft

    For more information, see help context 547005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementLeft(double Increment);

    /*
    Method IncrementRotation

    For more information, see help context 547006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementRotation(double Increment);

    /*
    Method IncrementTop

    For more information, see help context 547007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementTop(double Increment);

    /*
    Method PickUp

    For more information, see help context 547008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PickUp();

    /*
    Method RerouteConnections

    For more information, see help context 547009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void RerouteConnections();

    /*
    Method ScaleHeight

    For more information, see help context 547010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ScaleHeight(double Factor, Office::MsoTriState RelativeToOriginalSize);

    /*
    Method ScaleHeight

    For more information, see help context 547010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ScaleHeight(double Factor, Office::MsoTriState RelativeToOriginalSize, Office::MsoScaleFrom fScale);

    /*
    Method ScaleWidth

    For more information, see help context 547011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ScaleWidth(double Factor, Office::MsoTriState RelativeToOriginalSize);

    /*
    Method ScaleWidth

    For more information, see help context 547011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ScaleWidth(double Factor, Office::MsoTriState RelativeToOriginalSize, Office::MsoScaleFrom fScale);

    /*
    Method Select

    For more information, see help context 547052 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Select();

    /*
    Method Select

    For more information, see help context 547052 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Select(Office::MsoTriState Replace);

    /*
    Method SetShapesDefaultProperties

    For more information, see help context 547012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetShapesDefaultProperties();

    /*
    Method Ungroup

    For more information, see help context 547013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Ungroup();

    /*
    Method ZOrder

    For more information, see help context 547014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ZOrder(Office::MsoZOrderCmd ZOrderCmd);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ShapeRange : public QAxObject
{
public:
    ShapeRange(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActionSettings

    For more information, see help context 548048 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ActionSettings* ActionSettings() const; //Returns the value of ActionSettings

    /*
    Property Adjustments

    For more information, see help context 548015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Adjustments* Adjustments() const; //Returns the value of Adjustments

    /*
    Property AlternativeText

    For more information, see help context 548067 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString AlternativeText() const; //Returns the value of AlternativeText
    inline void SetAlternativeText(const QString& value); //Sets the value of the AlternativeText property

    /*
    Property AnimationSettings

    For more information, see help context 548047 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AnimationSettings* AnimationSettings() const; //Returns the value of AnimationSettings

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property AutoShapeType

    For more information, see help context 548016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoAutoShapeType AutoShapeType() const; //Returns the value of AutoShapeType
    inline void SetAutoShapeType(Office::MsoAutoShapeType value); //Sets the value of the AutoShapeType property

    /*
    Property BlackWhiteMode

    For more information, see help context 548017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoBlackWhiteMode BlackWhiteMode() const; //Returns the value of BlackWhiteMode
    inline void SetBlackWhiteMode(Office::MsoBlackWhiteMode value); //Sets the value of the BlackWhiteMode property

    /*
    Property Callout

    For more information, see help context 548018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::CalloutFormat* Callout() const; //Returns the value of Callout

    /*
    Property CanvasItems

    For more information, see help context 548077 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::CanvasShapes* CanvasItems() const; //Returns the value of CanvasItems

    /*
    Property Child

    For more information, see help context 548075 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Child() const; //Returns the value of Child

    /*
    Property ConnectionSiteCount

    For more information, see help context 548019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int ConnectionSiteCount() const; //Returns the value of ConnectionSiteCount

    /*
    Property Connector

    For more information, see help context 548020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Connector() const; //Returns the value of Connector

    /*
    Property ConnectorFormat

    For more information, see help context 548021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ConnectorFormat* ConnectorFormat() const; //Returns the value of ConnectorFormat

    /*
    Property Count

    For more information, see help context 548060 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Diagram

    For more information, see help context 548072 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Diagram* Diagram() const; //Returns the value of Diagram

    /*
    Property DiagramNode

    For more information, see help context 548074 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* DiagramNode() const; //Returns the value of DiagramNode

    /*
    Property Fill

    For more information, see help context 548022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::FillFormat* Fill() const; //Returns the value of Fill

    /*
    Property GroupItems

    For more information, see help context 548023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::GroupShapes* GroupItems() const; //Returns the value of GroupItems

    /*
    Property HasDiagram

    For more information, see help context 548071 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasDiagram() const; //Returns the value of HasDiagram

    /*
    Property HasDiagramNode

    For more information, see help context 548073 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasDiagramNode() const; //Returns the value of HasDiagramNode

    /*
    Property HasTable

    For more information, see help context 548068 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasTable() const; //Returns the value of HasTable

    /*
    Property HasTextFrame

    For more information, see help context 548055 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasTextFrame() const; //Returns the value of HasTextFrame

    /*
    Property Height

    For more information, see help context 548024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HorizontalFlip

    For more information, see help context 548025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HorizontalFlip() const; //Returns the value of HorizontalFlip

    /*
    Property Id

    For more information, see help context 548078 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Id() const; //Returns the value of Id

    /*
    Property Left

    For more information, see help context 548026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Line

    For more information, see help context 548027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::LineFormat* Line() const; //Returns the value of Line

    /*
    Property LinkFormat

    For more information, see help context 548045 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::LinkFormat* LinkFormat() const; //Returns the value of LinkFormat

    /*
    Property LockAspectRatio

    For more information, see help context 548028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState LockAspectRatio() const; //Returns the value of LockAspectRatio
    inline void SetLockAspectRatio(Office::MsoTriState value); //Sets the value of the LockAspectRatio property

    /*
    Property MediaType

    For more information, see help context 548054 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpMediaType MediaType() const; //Returns the value of MediaType

    /*
    Property Name

    For more information, see help context 548029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Nodes

    For more information, see help context 548030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeNodes* Nodes() const; //Returns the value of Nodes

    /*
    Property OLEFormat

    For more information, see help context 548044 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::OLEFormat* OLEFormat() const; //Returns the value of OLEFormat

    /*
    Property Parent

    For more information, see help context 548001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property ParentGroup

    For more information, see help context 548076 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* ParentGroup() const; //Returns the value of ParentGroup

    /*
    Property PictureFormat

    For more information, see help context 548032 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PictureFormat* PictureFormat() const; //Returns the value of PictureFormat

    /*
    Property PlaceholderFormat

    For more information, see help context 548046 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PlaceholderFormat* PlaceholderFormat() const; //Returns the value of PlaceholderFormat

    /*
    Property RTF

    For more information, see help context 548083 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString RTF() const; //Returns the value of RTF
    inline void SetRTF(const QString& value); //Sets the value of the RTF property

    /*
    Property Rotation

    For more information, see help context 548031 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property Script

    For more information, see help context 548066 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Script* Script() const; //Returns the value of Script

    /*
    Property Shadow

    For more information, see help context 548033 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShadowFormat* Shadow() const; //Returns the value of Shadow

    /*
    Property SoundFormat

    For more information, see help context 548056 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SoundFormat* SoundFormat() const; //Returns the value of SoundFormat

    /*
    Property Table

    For more information, see help context 548069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Table* Table() const; //Returns the value of Table

    /*
    Property Tags

    For more information, see help context 548049 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Tags* Tags() const; //Returns the value of Tags

    /*
    Property TextEffect

    For more information, see help context 548034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextEffectFormat* TextEffect() const; //Returns the value of TextEffect

    /*
    Property TextFrame

    For more information, see help context 548035 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextFrame* TextFrame() const; //Returns the value of TextFrame

    /*
    Property ThreeD

    For more information, see help context 548036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ThreeDFormat* ThreeD() const; //Returns the value of ThreeD

    /*
    Property Top

    For more information, see help context 548037 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Type

    For more information, see help context 548038 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoShapeType Type() const; //Returns the value of Type

    /*
    Property VerticalFlip

    For more information, see help context 548039 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState VerticalFlip() const; //Returns the value of VerticalFlip

    /*
    Property Vertices

    For more information, see help context 548040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant Vertices() const; //Returns the value of Vertices

    /*
    Property Visible

    For more information, see help context 548041 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Visible() const; //Returns the value of Visible
    inline void SetVisible(Office::MsoTriState value); //Sets the value of the Visible property

    /*
    Property Width

    For more information, see help context 548042 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property ZOrderPosition

    For more information, see help context 548043 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int ZOrderPosition() const; //Returns the value of ZOrderPosition

    /*
    Property _NewEnum

    For more information, see help context 548058 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Align

    For more information, see help context 548063 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Align(Office::MsoAlignCmd AlignCmd, Office::MsoTriState RelativeTo);

    /*
    Method Apply

    For more information, see help context 548002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Apply();

    /*
    Method CanvasCropBottom

    For more information, see help context 548082 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CanvasCropBottom(double Increment);

    /*
    Method CanvasCropLeft

    For more information, see help context 548079 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CanvasCropLeft(double Increment);

    /*
    Method CanvasCropRight

    For more information, see help context 548081 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CanvasCropRight(double Increment);

    /*
    Method CanvasCropTop

    For more information, see help context 548080 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CanvasCropTop(double Increment);

    /*
    Method Copy

    For more information, see help context 548051 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Copy();

    /*
    Method Cut

    For more information, see help context 548050 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Cut();

    /*
    Method Delete

    For more information, see help context 548003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method Distribute

    For more information, see help context 548064 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Distribute(Office::MsoDistributeCmd DistributeCmd, Office::MsoTriState RelativeTo);

    /*
    Method Duplicate

    For more information, see help context 548053 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Duplicate();

    /*
    Method Export

    For more information, see help context 548070 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& PathName, PowerPoint::PpShapeFormat Filter);

    /*
    Method Export

    For more information, see help context 548070 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth);

    /*
    Method Export

    For more information, see help context 548070 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth, int ScaleHeight);

    /*
    Method Export

    For more information, see help context 548070 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, PowerPoint::PpExportMode ExportMode);

    /*
    Method Flip

    For more information, see help context 548004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Flip(Office::MsoFlipCmd FlipCmd);

    /*
    Method GetPolygonalRepresentation

    For more information, see help context 548065 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void GetPolygonalRepresentation(uint maxPointsInBuffer, double& pPoints, uint& numPointsInPolygon, Office::MsoTriState*& IsOpen);

    /*
    Method Group

    For more information, see help context 548061 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Group();

    /*
    Method IncrementLeft

    For more information, see help context 548005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementLeft(double Increment);

    /*
    Method IncrementRotation

    For more information, see help context 548006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementRotation(double Increment);

    /*
    Method IncrementTop

    For more information, see help context 548007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementTop(double Increment);

    /*
    Method Item

    For more information, see help context 548057 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Item(const QVariant& Index);

    /*
    Method PickUp

    For more information, see help context 548008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PickUp();

    /*
    Method Regroup

    For more information, see help context 548062 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Regroup();

    /*
    Method RerouteConnections

    For more information, see help context 548009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void RerouteConnections();

    /*
    Method ScaleHeight

    For more information, see help context 548010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ScaleHeight(double Factor, Office::MsoTriState RelativeToOriginalSize);

    /*
    Method ScaleHeight

    For more information, see help context 548010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ScaleHeight(double Factor, Office::MsoTriState RelativeToOriginalSize, Office::MsoScaleFrom fScale);

    /*
    Method ScaleWidth

    For more information, see help context 548011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ScaleWidth(double Factor, Office::MsoTriState RelativeToOriginalSize);

    /*
    Method ScaleWidth

    For more information, see help context 548011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ScaleWidth(double Factor, Office::MsoTriState RelativeToOriginalSize, Office::MsoScaleFrom fScale);

    /*
    Method Select

    For more information, see help context 548052 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Select();

    /*
    Method Select

    For more information, see help context 548052 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Select(Office::MsoTriState Replace);

    /*
    Method SetShapesDefaultProperties

    For more information, see help context 548012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetShapesDefaultProperties();

    /*
    Method Ungroup

    For more information, see help context 548013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Ungroup();

    /*
    Method ZOrder

    For more information, see help context 548014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ZOrder(Office::MsoZOrderCmd ZOrderCmd);

    /*
    Method _Index

    For more information, see help context 548059 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT GroupShapes : public QAxObject
{
public:
    GroupShapes(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 549002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Parent

    For more information, see help context 549001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 549004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 549003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Item(const QVariant& Index);

    /*
    Method Range

    For more information, see help context 549005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Range(const QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Adjustments : public QAxObject
{
public:
    Adjustments(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 550002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Parent

    For more information, see help context 550001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Method Item

    For more information, see help context 550003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Item(int Index);

    /*
    Method SetItem
    */
    inline int SetItem(int Index, double rhs);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT PictureFormat : public QAxObject
{
public:
    PictureFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Brightness

    For more information, see help context 551004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Brightness() const; //Returns the value of Brightness
    inline void SetBrightness(double value); //Sets the value of the Brightness property

    /*
    Property ColorType

    For more information, see help context 551005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPictureColorType ColorType() const; //Returns the value of ColorType
    inline void SetColorType(Office::MsoPictureColorType value); //Sets the value of the ColorType property

    /*
    Property Contrast

    For more information, see help context 551006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Contrast() const; //Returns the value of Contrast
    inline void SetContrast(double value); //Sets the value of the Contrast property

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property CropBottom

    For more information, see help context 551007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double CropBottom() const; //Returns the value of CropBottom
    inline void SetCropBottom(double value); //Sets the value of the CropBottom property

    /*
    Property CropLeft

    For more information, see help context 551008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double CropLeft() const; //Returns the value of CropLeft
    inline void SetCropLeft(double value); //Sets the value of the CropLeft property

    /*
    Property CropRight

    For more information, see help context 551009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double CropRight() const; //Returns the value of CropRight
    inline void SetCropRight(double value); //Sets the value of the CropRight property

    /*
    Property CropTop

    For more information, see help context 551010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double CropTop() const; //Returns the value of CropTop
    inline void SetCropTop(double value); //Sets the value of the CropTop property

    /*
    Property Parent

    For more information, see help context 551001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property TransparencyColor

    For more information, see help context 551011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int TransparencyColor() const; //Returns the value of TransparencyColor
    inline void SetTransparencyColor(int value); //Sets the value of the TransparencyColor property

    /*
    Property TransparentBackground

    For more information, see help context 551012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState TransparentBackground() const; //Returns the value of TransparentBackground
    inline void SetTransparentBackground(Office::MsoTriState value); //Sets the value of the TransparentBackground property

    /*
    Method IncrementBrightness

    For more information, see help context 551002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementBrightness(double Increment);

    /*
    Method IncrementContrast

    For more information, see help context 551003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementContrast(double Increment);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT FillFormat : public QAxObject
{
public:
    FillFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property BackColor

    For more information, see help context 552011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(PowerPoint::ColorFormat* value); //Sets the value of the BackColor property

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property ForeColor

    For more information, see help context 552012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(PowerPoint::ColorFormat* value); //Sets the value of the ForeColor property

    /*
    Property GradientColorType

    For more information, see help context 552013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoGradientColorType GradientColorType() const; //Returns the value of GradientColorType

    /*
    Property GradientDegree

    For more information, see help context 552014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double GradientDegree() const; //Returns the value of GradientDegree

    /*
    Property GradientStyle

    For more information, see help context 552015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoGradientStyle GradientStyle() const; //Returns the value of GradientStyle

    /*
    Property GradientVariant

    For more information, see help context 552016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int GradientVariant() const; //Returns the value of GradientVariant

    /*
    Property Parent

    For more information, see help context 552001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Pattern

    For more information, see help context 552017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPatternType Pattern() const; //Returns the value of Pattern

    /*
    Property PresetGradientType

    For more information, see help context 552018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPresetGradientType PresetGradientType() const; //Returns the value of PresetGradientType

    /*
    Property PresetTexture

    For more information, see help context 552019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPresetTexture PresetTexture() const; //Returns the value of PresetTexture

    /*
    Property TextureName

    For more information, see help context 552020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString TextureName() const; //Returns the value of TextureName

    /*
    Property TextureType

    For more information, see help context 552021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTextureType TextureType() const; //Returns the value of TextureType

    /*
    Property Transparency

    For more information, see help context 552022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Transparency() const; //Returns the value of Transparency
    inline void SetTransparency(double value); //Sets the value of the Transparency property

    /*
    Property Type

    For more information, see help context 552023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoFillType Type() const; //Returns the value of Type

    /*
    Property Visible

    For more information, see help context 552024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Visible() const; //Returns the value of Visible
    inline void SetVisible(Office::MsoTriState value); //Sets the value of the Visible property

    /*
    Method Background

    For more information, see help context 552002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Background();

    /*
    Method OneColorGradient

    For more information, see help context 552003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void OneColorGradient(Office::MsoGradientStyle Style, int Variant, double Degree);

    /*
    Method Patterned

    For more information, see help context 552004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Patterned(Office::MsoPatternType Pattern);

    /*
    Method PresetGradient

    For more information, see help context 552005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PresetGradient(Office::MsoGradientStyle Style, int Variant, Office::MsoPresetGradientType PresetGradientType);

    /*
    Method PresetTextured

    For more information, see help context 552006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PresetTextured(Office::MsoPresetTexture PresetTexture);

    /*
    Method Solid

    For more information, see help context 552007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Solid();

    /*
    Method TwoColorGradient

    For more information, see help context 552008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void TwoColorGradient(Office::MsoGradientStyle Style, int Variant);

    /*
    Method UserPicture

    For more information, see help context 552009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void UserPicture(const QString& PictureFile);

    /*
    Method UserTextured

    For more information, see help context 552010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void UserTextured(const QString& TextureFile);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT LineFormat : public QAxObject
{
public:
    LineFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property BackColor

    For more information, see help context 553002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(PowerPoint::ColorFormat* value); //Sets the value of the BackColor property

    /*
    Property BeginArrowheadLength

    For more information, see help context 553003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoArrowheadLength BeginArrowheadLength() const; //Returns the value of BeginArrowheadLength
    inline void SetBeginArrowheadLength(Office::MsoArrowheadLength value); //Sets the value of the BeginArrowheadLength property

    /*
    Property BeginArrowheadStyle

    For more information, see help context 553004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoArrowheadStyle BeginArrowheadStyle() const; //Returns the value of BeginArrowheadStyle
    inline void SetBeginArrowheadStyle(Office::MsoArrowheadStyle value); //Sets the value of the BeginArrowheadStyle property

    /*
    Property BeginArrowheadWidth

    For more information, see help context 553005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoArrowheadWidth BeginArrowheadWidth() const; //Returns the value of BeginArrowheadWidth
    inline void SetBeginArrowheadWidth(Office::MsoArrowheadWidth value); //Sets the value of the BeginArrowheadWidth property

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property DashStyle

    For more information, see help context 553006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoLineDashStyle DashStyle() const; //Returns the value of DashStyle
    inline void SetDashStyle(Office::MsoLineDashStyle value); //Sets the value of the DashStyle property

    /*
    Property EndArrowheadLength

    For more information, see help context 553007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoArrowheadLength EndArrowheadLength() const; //Returns the value of EndArrowheadLength
    inline void SetEndArrowheadLength(Office::MsoArrowheadLength value); //Sets the value of the EndArrowheadLength property

    /*
    Property EndArrowheadStyle

    For more information, see help context 553008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoArrowheadStyle EndArrowheadStyle() const; //Returns the value of EndArrowheadStyle
    inline void SetEndArrowheadStyle(Office::MsoArrowheadStyle value); //Sets the value of the EndArrowheadStyle property

    /*
    Property EndArrowheadWidth

    For more information, see help context 553009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoArrowheadWidth EndArrowheadWidth() const; //Returns the value of EndArrowheadWidth
    inline void SetEndArrowheadWidth(Office::MsoArrowheadWidth value); //Sets the value of the EndArrowheadWidth property

    /*
    Property ForeColor

    For more information, see help context 553010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(PowerPoint::ColorFormat* value); //Sets the value of the ForeColor property

    /*
    Property InsetPen

    For more information, see help context 553016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState InsetPen() const; //Returns the value of InsetPen
    inline void SetInsetPen(Office::MsoTriState value); //Sets the value of the InsetPen property

    /*
    Property Parent

    For more information, see help context 553001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Pattern

    For more information, see help context 553011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPatternType Pattern() const; //Returns the value of Pattern
    inline void SetPattern(Office::MsoPatternType value); //Sets the value of the Pattern property

    /*
    Property Style

    For more information, see help context 553012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoLineStyle Style() const; //Returns the value of Style
    inline void SetStyle(Office::MsoLineStyle value); //Sets the value of the Style property

    /*
    Property Transparency

    For more information, see help context 553013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Transparency() const; //Returns the value of Transparency
    inline void SetTransparency(double value); //Sets the value of the Transparency property

    /*
    Property Visible

    For more information, see help context 553014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Visible() const; //Returns the value of Visible
    inline void SetVisible(Office::MsoTriState value); //Sets the value of the Visible property

    /*
    Property Weight

    For more information, see help context 553015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Weight() const; //Returns the value of Weight
    inline void SetWeight(double value); //Sets the value of the Weight property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ShadowFormat : public QAxObject
{
public:
    ShadowFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property ForeColor

    For more information, see help context 554004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(PowerPoint::ColorFormat* value); //Sets the value of the ForeColor property

    /*
    Property Obscured

    For more information, see help context 554005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Obscured() const; //Returns the value of Obscured
    inline void SetObscured(Office::MsoTriState value); //Sets the value of the Obscured property

    /*
    Property OffsetX

    For more information, see help context 554006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double OffsetX() const; //Returns the value of OffsetX
    inline void SetOffsetX(double value); //Sets the value of the OffsetX property

    /*
    Property OffsetY

    For more information, see help context 554007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double OffsetY() const; //Returns the value of OffsetY
    inline void SetOffsetY(double value); //Sets the value of the OffsetY property

    /*
    Property Parent

    For more information, see help context 554001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Transparency

    For more information, see help context 554008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Transparency() const; //Returns the value of Transparency
    inline void SetTransparency(double value); //Sets the value of the Transparency property

    /*
    Property Type

    For more information, see help context 554009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoShadowType Type() const; //Returns the value of Type
    inline void SetType(Office::MsoShadowType value); //Sets the value of the Type property

    /*
    Property Visible

    For more information, see help context 554010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Visible() const; //Returns the value of Visible
    inline void SetVisible(Office::MsoTriState value); //Sets the value of the Visible property

    /*
    Method IncrementOffsetX

    For more information, see help context 554002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementOffsetX(double Increment);

    /*
    Method IncrementOffsetY

    For more information, see help context 554003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementOffsetY(double Increment);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ConnectorFormat : public QAxObject
{
public:
    ConnectorFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property BeginConnected

    For more information, see help context 555006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState BeginConnected() const; //Returns the value of BeginConnected

    /*
    Property BeginConnectedShape

    For more information, see help context 555007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* BeginConnectedShape() const; //Returns the value of BeginConnectedShape

    /*
    Property BeginConnectionSite

    For more information, see help context 555008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int BeginConnectionSite() const; //Returns the value of BeginConnectionSite

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property EndConnected

    For more information, see help context 555009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState EndConnected() const; //Returns the value of EndConnected

    /*
    Property EndConnectedShape

    For more information, see help context 555010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* EndConnectedShape() const; //Returns the value of EndConnectedShape

    /*
    Property EndConnectionSite

    For more information, see help context 555011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int EndConnectionSite() const; //Returns the value of EndConnectionSite

    /*
    Property Parent

    For more information, see help context 555001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Type

    For more information, see help context 555012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoConnectorType Type() const; //Returns the value of Type
    inline void SetType(Office::MsoConnectorType value); //Sets the value of the Type property

    /*
    Method BeginConnect

    For more information, see help context 555002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void BeginConnect(PowerPoint::Shape* ConnectedShape, int ConnectionSite);

    /*
    Method BeginDisconnect

    For more information, see help context 555003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void BeginDisconnect();

    /*
    Method EndConnect

    For more information, see help context 555004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void EndConnect(PowerPoint::Shape* ConnectedShape, int ConnectionSite);

    /*
    Method EndDisconnect

    For more information, see help context 555005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void EndDisconnect();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT TextEffectFormat : public QAxObject
{
public:
    TextEffectFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Alignment

    For more information, see help context 556003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTextEffectAlignment Alignment() const; //Returns the value of Alignment
    inline void SetAlignment(Office::MsoTextEffectAlignment value); //Sets the value of the Alignment property

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property FontBold

    For more information, see help context 556004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState FontBold() const; //Returns the value of FontBold
    inline void SetFontBold(Office::MsoTriState value); //Sets the value of the FontBold property

    /*
    Property FontItalic

    For more information, see help context 556005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState FontItalic() const; //Returns the value of FontItalic
    inline void SetFontItalic(Office::MsoTriState value); //Sets the value of the FontItalic property

    /*
    Property FontName

    For more information, see help context 556006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString FontName() const; //Returns the value of FontName
    inline void SetFontName(const QString& value); //Sets the value of the FontName property

    /*
    Property FontSize

    For more information, see help context 556007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double FontSize() const; //Returns the value of FontSize
    inline void SetFontSize(double value); //Sets the value of the FontSize property

    /*
    Property KernedPairs

    For more information, see help context 556008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState KernedPairs() const; //Returns the value of KernedPairs
    inline void SetKernedPairs(Office::MsoTriState value); //Sets the value of the KernedPairs property

    /*
    Property NormalizedHeight

    For more information, see help context 556009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState NormalizedHeight() const; //Returns the value of NormalizedHeight
    inline void SetNormalizedHeight(Office::MsoTriState value); //Sets the value of the NormalizedHeight property

    /*
    Property Parent

    For more information, see help context 556001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PresetShape

    For more information, see help context 556010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPresetTextEffectShape PresetShape() const; //Returns the value of PresetShape
    inline void SetPresetShape(Office::MsoPresetTextEffectShape value); //Sets the value of the PresetShape property

    /*
    Property PresetTextEffect

    For more information, see help context 556011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPresetTextEffect PresetTextEffect() const; //Returns the value of PresetTextEffect
    inline void SetPresetTextEffect(Office::MsoPresetTextEffect value); //Sets the value of the PresetTextEffect property

    /*
    Property RotatedChars

    For more information, see help context 556012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState RotatedChars() const; //Returns the value of RotatedChars
    inline void SetRotatedChars(Office::MsoTriState value); //Sets the value of the RotatedChars property

    /*
    Property Text

    For more information, see help context 556013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property Tracking

    For more information, see help context 556014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Tracking() const; //Returns the value of Tracking
    inline void SetTracking(double value); //Sets the value of the Tracking property

    /*
    Method ToggleVerticalText

    For more information, see help context 556002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ToggleVerticalText();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ThreeDFormat : public QAxObject
{
public:
    ThreeDFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Depth

    For more information, see help context 557007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Depth() const; //Returns the value of Depth
    inline void SetDepth(double value); //Sets the value of the Depth property

    /*
    Property ExtrusionColor

    For more information, see help context 557008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* ExtrusionColor() const; //Returns the value of ExtrusionColor

    /*
    Property ExtrusionColorType

    For more information, see help context 557009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoExtrusionColorType ExtrusionColorType() const; //Returns the value of ExtrusionColorType
    inline void SetExtrusionColorType(Office::MsoExtrusionColorType value); //Sets the value of the ExtrusionColorType property

    /*
    Property Parent

    For more information, see help context 557001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Perspective

    For more information, see help context 557010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Perspective() const; //Returns the value of Perspective
    inline void SetPerspective(Office::MsoTriState value); //Sets the value of the Perspective property

    /*
    Property PresetExtrusionDirection

    For more information, see help context 557011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPresetExtrusionDirection PresetExtrusionDirection() const; //Returns the value of PresetExtrusionDirection

    /*
    Property PresetLightingDirection

    For more information, see help context 557012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPresetLightingDirection PresetLightingDirection() const; //Returns the value of PresetLightingDirection
    inline void SetPresetLightingDirection(Office::MsoPresetLightingDirection value); //Sets the value of the PresetLightingDirection property

    /*
    Property PresetLightingSoftness

    For more information, see help context 557013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPresetLightingSoftness PresetLightingSoftness() const; //Returns the value of PresetLightingSoftness
    inline void SetPresetLightingSoftness(Office::MsoPresetLightingSoftness value); //Sets the value of the PresetLightingSoftness property

    /*
    Property PresetMaterial

    For more information, see help context 557014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPresetMaterial PresetMaterial() const; //Returns the value of PresetMaterial
    inline void SetPresetMaterial(Office::MsoPresetMaterial value); //Sets the value of the PresetMaterial property

    /*
    Property PresetThreeDFormat

    For more information, see help context 557015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoPresetThreeDFormat PresetThreeDFormat() const; //Returns the value of PresetThreeDFormat

    /*
    Property RotationX

    For more information, see help context 557016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double RotationX() const; //Returns the value of RotationX
    inline void SetRotationX(double value); //Sets the value of the RotationX property

    /*
    Property RotationY

    For more information, see help context 557017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double RotationY() const; //Returns the value of RotationY
    inline void SetRotationY(double value); //Sets the value of the RotationY property

    /*
    Property Visible

    For more information, see help context 557018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Visible() const; //Returns the value of Visible
    inline void SetVisible(Office::MsoTriState value); //Sets the value of the Visible property

    /*
    Method IncrementRotationX

    For more information, see help context 557002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementRotationX(double Increment);

    /*
    Method IncrementRotationY

    For more information, see help context 557003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void IncrementRotationY(double Increment);

    /*
    Method ResetRotation

    For more information, see help context 557004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ResetRotation();

    /*
    Method SetExtrusionDirection

    For more information, see help context 557006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetExtrusionDirection(Office::MsoPresetExtrusionDirection PresetExtrusionDirection);

    /*
    Method SetThreeDFormat

    For more information, see help context 557005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetThreeDFormat(Office::MsoPresetThreeDFormat PresetThreeDFormat);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT TextFrame : public QAxObject
{
public:
    TextFrame(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property AutoSize

    For more information, see help context 558012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpAutoSize AutoSize() const; //Returns the value of AutoSize
    inline void SetAutoSize(PowerPoint::PpAutoSize value); //Sets the value of the AutoSize property

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property HasText

    For more information, see help context 558007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasText() const; //Returns the value of HasText

    /*
    Property HorizontalAnchor

    For more information, see help context 558010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoHorizontalAnchor HorizontalAnchor() const; //Returns the value of HorizontalAnchor
    inline void SetHorizontalAnchor(Office::MsoHorizontalAnchor value); //Sets the value of the HorizontalAnchor property

    /*
    Property MarginBottom

    For more information, see help context 558002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double MarginBottom() const; //Returns the value of MarginBottom
    inline void SetMarginBottom(double value); //Sets the value of the MarginBottom property

    /*
    Property MarginLeft

    For more information, see help context 558003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double MarginLeft() const; //Returns the value of MarginLeft
    inline void SetMarginLeft(double value); //Sets the value of the MarginLeft property

    /*
    Property MarginRight

    For more information, see help context 558004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double MarginRight() const; //Returns the value of MarginRight
    inline void SetMarginRight(double value); //Sets the value of the MarginRight property

    /*
    Property MarginTop

    For more information, see help context 558005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double MarginTop() const; //Returns the value of MarginTop
    inline void SetMarginTop(double value); //Sets the value of the MarginTop property

    /*
    Property Orientation

    For more information, see help context 558006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTextOrientation Orientation() const; //Returns the value of Orientation
    inline void SetOrientation(Office::MsoTextOrientation value); //Sets the value of the Orientation property

    /*
    Property Parent

    For more information, see help context 558001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Ruler

    For more information, see help context 558009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Ruler* Ruler() const; //Returns the value of Ruler

    /*
    Property TextRange

    For more information, see help context 558008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* TextRange() const; //Returns the value of TextRange

    /*
    Property VerticalAnchor

    For more information, see help context 558011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoVerticalAnchor VerticalAnchor() const; //Returns the value of VerticalAnchor
    inline void SetVerticalAnchor(Office::MsoVerticalAnchor value); //Sets the value of the VerticalAnchor property

    /*
    Property WordWrap

    For more information, see help context 558013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState WordWrap() const; //Returns the value of WordWrap
    inline void SetWordWrap(Office::MsoTriState value); //Sets the value of the WordWrap property

    /*
    Method DeleteText

    For more information, see help context 558014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void DeleteText();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT CalloutFormat : public QAxObject
{
public:
    CalloutFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Accent

    For more information, see help context 559006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Accent() const; //Returns the value of Accent
    inline void SetAccent(Office::MsoTriState value); //Sets the value of the Accent property

    /*
    Property Angle

    For more information, see help context 559007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoCalloutAngleType Angle() const; //Returns the value of Angle
    inline void SetAngle(Office::MsoCalloutAngleType value); //Sets the value of the Angle property

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property AutoAttach

    For more information, see help context 559008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AutoAttach() const; //Returns the value of AutoAttach
    inline void SetAutoAttach(Office::MsoTriState value); //Sets the value of the AutoAttach property

    /*
    Property AutoLength

    For more information, see help context 559009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AutoLength() const; //Returns the value of AutoLength

    /*
    Property Border

    For more information, see help context 559010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Border() const; //Returns the value of Border
    inline void SetBorder(Office::MsoTriState value); //Sets the value of the Border property

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Drop

    For more information, see help context 559011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Drop() const; //Returns the value of Drop

    /*
    Property DropType

    For more information, see help context 559012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoCalloutDropType DropType() const; //Returns the value of DropType

    /*
    Property Gap

    For more information, see help context 559013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Gap() const; //Returns the value of Gap
    inline void SetGap(double value); //Sets the value of the Gap property

    /*
    Property Length

    For more information, see help context 559014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Length() const; //Returns the value of Length

    /*
    Property Parent

    For more information, see help context 559001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Type

    For more information, see help context 559015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoCalloutType Type() const; //Returns the value of Type
    inline void SetType(Office::MsoCalloutType value); //Sets the value of the Type property

    /*
    Method AutomaticLength

    For more information, see help context 559002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AutomaticLength();

    /*
    Method CustomDrop

    For more information, see help context 559003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CustomDrop(double Drop);

    /*
    Method CustomLength

    For more information, see help context 559004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CustomLength(double Length);

    /*
    Method PresetDrop

    For more information, see help context 559005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PresetDrop(Office::MsoCalloutDropType DropType);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ShapeNodes : public QAxObject
{
public:
    ShapeNodes(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 560002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Parent

    For more information, see help context 560001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 560004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Delete

    For more information, see help context 560005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete(int Index);

    /*
    Method Insert

    For more information, see help context 560006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Insert(int Index, Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1);

    /*
    Method Insert

    For more information, see help context 560006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Insert(int Index, Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2);

    /*
    Method Insert

    For more information, see help context 560006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Insert(int Index, Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2);

    /*
    Method Insert

    For more information, see help context 560006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Insert(int Index, Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2, double X3);

    /*
    Method Insert

    For more information, see help context 560006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Insert(int Index, Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2, double X3, double Y3);

    /*
    Method Item

    For more information, see help context 560003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeNode* Item(const QVariant& Index);

    /*
    Method SetEditingType

    For more information, see help context 560007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetEditingType(int Index, Office::MsoEditingType EditingType);

    /*
    Method SetPosition

    For more information, see help context 560008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetPosition(int Index, double X1, double Y1);

    /*
    Method SetSegmentType

    For more information, see help context 560009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetSegmentType(int Index, Office::MsoSegmentType SegmentType);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ShapeNode : public QAxObject
{
public:
    ShapeNode(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property EditingType

    For more information, see help context 561002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoEditingType EditingType() const; //Returns the value of EditingType

    /*
    Property Parent

    For more information, see help context 561001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Points

    For more information, see help context 561003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant Points() const; //Returns the value of Points

    /*
    Property SegmentType

    For more information, see help context 561004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoSegmentType SegmentType() const; //Returns the value of SegmentType

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT OLEFormat : public QAxObject
{
public:
    OLEFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 562001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property FollowColors

    For more information, see help context 562006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpFollowColors FollowColors() const; //Returns the value of FollowColors
    inline void SetFollowColors(PowerPoint::PpFollowColors value); //Sets the value of the FollowColors property

    /*
    Property Object

    For more information, see help context 562004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Object() const; //Returns the value of Object

    /*
    Property ObjectVerbs

    For more information, see help context 562003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ObjectVerbs* ObjectVerbs() const; //Returns the value of ObjectVerbs

    /*
    Property Parent

    For more information, see help context 562002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property ProgID

    For more information, see help context 562005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString ProgID() const; //Returns the value of ProgID

    /*
    Method Activate

    For more information, see help context 562008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Activate();

    /*
    Method DoVerb

    For more information, see help context 562007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void DoVerb();

    /*
    Method DoVerb

    For more information, see help context 562007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void DoVerb(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT LinkFormat : public QAxObject
{
public:
    LinkFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 563001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property AutoUpdate

    For more information, see help context 563004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpUpdateOption AutoUpdate() const; //Returns the value of AutoUpdate
    inline void SetAutoUpdate(PowerPoint::PpUpdateOption value); //Sets the value of the AutoUpdate property

    /*
    Property Parent

    For more information, see help context 563002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property SourceFullName

    For more information, see help context 563003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString SourceFullName() const; //Returns the value of SourceFullName
    inline void SetSourceFullName(const QString& value); //Sets the value of the SourceFullName property

    /*
    Method Update

    For more information, see help context 563005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Update();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ObjectVerbs : public QAxObject
{
public:
    ObjectVerbs(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 564001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 564002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 564003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT AnimationSettings : public QAxObject
{
public:
    AnimationSettings(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AdvanceMode

    For more information, see help context 565008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpAdvanceMode AdvanceMode() const; //Returns the value of AdvanceMode
    inline void SetAdvanceMode(PowerPoint::PpAdvanceMode value); //Sets the value of the AdvanceMode property

    /*
    Property AdvanceTime

    For more information, see help context 565009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double AdvanceTime() const; //Returns the value of AdvanceTime
    inline void SetAdvanceTime(double value); //Sets the value of the AdvanceTime property

    /*
    Property AfterEffect

    For more information, see help context 565006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpAfterEffect AfterEffect() const; //Returns the value of AfterEffect
    inline void SetAfterEffect(PowerPoint::PpAfterEffect value); //Sets the value of the AfterEffect property

    /*
    Property Animate

    For more information, see help context 565013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Animate() const; //Returns the value of Animate
    inline void SetAnimate(Office::MsoTriState value); //Sets the value of the Animate property

    /*
    Property AnimateBackground

    For more information, see help context 565014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AnimateBackground() const; //Returns the value of AnimateBackground
    inline void SetAnimateBackground(Office::MsoTriState value); //Sets the value of the AnimateBackground property

    /*
    Property AnimateTextInReverse

    For more information, see help context 565015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AnimateTextInReverse() const; //Returns the value of AnimateTextInReverse
    inline void SetAnimateTextInReverse(Office::MsoTriState value); //Sets the value of the AnimateTextInReverse property

    /*
    Property AnimationOrder

    For more information, see help context 565007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int AnimationOrder() const; //Returns the value of AnimationOrder
    inline void SetAnimationOrder(int value); //Sets the value of the AnimationOrder property

    /*
    Property Application

    For more information, see help context 565001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property ChartUnitEffect

    For more information, see help context 565016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpChartUnitEffect ChartUnitEffect() const; //Returns the value of ChartUnitEffect
    inline void SetChartUnitEffect(PowerPoint::PpChartUnitEffect value); //Sets the value of the ChartUnitEffect property

    /*
    Property DimColor

    For more information, see help context 565003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* DimColor() const; //Returns the value of DimColor

    /*
    Property EntryEffect

    For more information, see help context 565005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpEntryEffect EntryEffect() const; //Returns the value of EntryEffect
    inline void SetEntryEffect(PowerPoint::PpEntryEffect value); //Sets the value of the EntryEffect property

    /*
    Property Parent

    For more information, see help context 565002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PlaySettings

    For more information, see help context 565010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PlaySettings* PlaySettings() const; //Returns the value of PlaySettings

    /*
    Property SoundEffect

    For more information, see help context 565004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SoundEffect* SoundEffect() const; //Returns the value of SoundEffect

    /*
    Property TextLevelEffect

    For more information, see help context 565011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpTextLevelEffect TextLevelEffect() const; //Returns the value of TextLevelEffect
    inline void SetTextLevelEffect(PowerPoint::PpTextLevelEffect value); //Sets the value of the TextLevelEffect property

    /*
    Property TextUnitEffect

    For more information, see help context 565012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpTextUnitEffect TextUnitEffect() const; //Returns the value of TextUnitEffect
    inline void SetTextUnitEffect(PowerPoint::PpTextUnitEffect value); //Sets the value of the TextUnitEffect property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ActionSettings : public QAxObject
{
public:
    ActionSettings(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 566001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 566002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 566003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ActionSetting* Item(PowerPoint::PpMouseActivation Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ActionSetting : public QAxObject
{
public:
    ActionSetting(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Action

    For more information, see help context 567003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpActionType Action() const; //Returns the value of Action
    inline void SetAction(PowerPoint::PpActionType value); //Sets the value of the Action property

    /*
    Property ActionVerb

    For more information, see help context 567004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString ActionVerb() const; //Returns the value of ActionVerb
    inline void SetActionVerb(const QString& value); //Sets the value of the ActionVerb property

    /*
    Property AnimateAction

    For more information, see help context 567005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AnimateAction() const; //Returns the value of AnimateAction
    inline void SetAnimateAction(Office::MsoTriState value); //Sets the value of the AnimateAction property

    /*
    Property Application

    For more information, see help context 567001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Hyperlink

    For more information, see help context 567008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Hyperlink* Hyperlink() const; //Returns the value of Hyperlink

    /*
    Property Parent

    For more information, see help context 567002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Run

    For more information, see help context 567006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Run() const; //Returns the value of Run
    inline void SetRun(const QString& value); //Sets the value of the Run property

    /*
    Property ShowAndReturn

    For more information, see help context 567010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ShowAndReturn() const; //Returns the value of ShowAndReturn
    inline void SetShowAndReturn(Office::MsoTriState value); //Sets the value of the ShowAndReturn property

    /*
    Property SlideShowName

    For more information, see help context 567007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString SlideShowName() const; //Returns the value of SlideShowName
    inline void SetSlideShowName(const QString& value); //Sets the value of the SlideShowName property

    /*
    Property SoundEffect

    For more information, see help context 567009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SoundEffect* SoundEffect() const; //Returns the value of SoundEffect

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT PlaySettings : public QAxObject
{
public:
    PlaySettings(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActionVerb

    For more information, see help context 568003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString ActionVerb() const; //Returns the value of ActionVerb
    inline void SetActionVerb(const QString& value); //Sets the value of the ActionVerb property

    /*
    Property Application

    For more information, see help context 568001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property HideWhileNotPlaying

    For more information, see help context 568004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HideWhileNotPlaying() const; //Returns the value of HideWhileNotPlaying
    inline void SetHideWhileNotPlaying(Office::MsoTriState value); //Sets the value of the HideWhileNotPlaying property

    /*
    Property LoopUntilStopped

    For more information, see help context 568005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState LoopUntilStopped() const; //Returns the value of LoopUntilStopped
    inline void SetLoopUntilStopped(Office::MsoTriState value); //Sets the value of the LoopUntilStopped property

    /*
    Property Parent

    For more information, see help context 568002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PauseAnimation

    For more information, see help context 568008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState PauseAnimation() const; //Returns the value of PauseAnimation
    inline void SetPauseAnimation(Office::MsoTriState value); //Sets the value of the PauseAnimation property

    /*
    Property PlayOnEntry

    For more information, see help context 568006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState PlayOnEntry() const; //Returns the value of PlayOnEntry
    inline void SetPlayOnEntry(Office::MsoTriState value); //Sets the value of the PlayOnEntry property

    /*
    Property RewindMovie

    For more information, see help context 568007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState RewindMovie() const; //Returns the value of RewindMovie
    inline void SetRewindMovie(Office::MsoTriState value); //Sets the value of the RewindMovie property

    /*
    Property StopAfterSlides

    For more information, see help context 568009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int StopAfterSlides() const; //Returns the value of StopAfterSlides
    inline void SetStopAfterSlides(int value); //Sets the value of the StopAfterSlides property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT TextRange : public QAxObject
{
public:
    TextRange(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ActionSettings

    For more information, see help context 569003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ActionSettings* ActionSettings() const; //Returns the value of ActionSettings

    /*
    Property Application

    For more information, see help context 569001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property BoundHeight

    For more information, see help context 569009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double BoundHeight() const; //Returns the value of BoundHeight

    /*
    Property BoundLeft

    For more information, see help context 569006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double BoundLeft() const; //Returns the value of BoundLeft

    /*
    Property BoundTop

    For more information, see help context 569007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double BoundTop() const; //Returns the value of BoundTop

    /*
    Property BoundWidth

    For more information, see help context 569008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double BoundWidth() const; //Returns the value of BoundWidth

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Font

    For more information, see help context 569023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Font* Font() const; //Returns the value of Font

    /*
    Property IndentLevel

    For more information, see help context 569025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int IndentLevel() const; //Returns the value of IndentLevel
    inline void SetIndentLevel(int value); //Sets the value of the IndentLevel property

    /*
    Property LanguageID

    For more information, see help context 569037 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoLanguageID LanguageID() const; //Returns the value of LanguageID
    inline void SetLanguageID(Office::MsoLanguageID value); //Sets the value of the LanguageID property

    /*
    Property Length

    For more information, see help context 569005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Length() const; //Returns the value of Length

    /*
    Property ParagraphFormat

    For more information, see help context 569024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ParagraphFormat* ParagraphFormat() const; //Returns the value of ParagraphFormat

    /*
    Property Parent

    For more information, see help context 569002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Start

    For more information, see help context 569004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Start() const; //Returns the value of Start

    /*
    Property Text

    For more information, see help context 569017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method AddPeriods

    For more information, see help context 569032 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddPeriods();

    /*
    Method ChangeCase

    For more information, see help context 569031 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ChangeCase(PowerPoint::PpChangeCase Type);

    /*
    Method Characters

    For more information, see help context 569013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Characters();

    /*
    Method Characters

    For more information, see help context 569013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Characters(int Start);

    /*
    Method Characters

    For more information, see help context 569013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Characters(int Start, int Length);

    /*
    Method Copy

    For more information, see help context 569028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Copy();

    /*
    Method Cut

    For more information, see help context 569027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Cut();

    /*
    Method Delete

    For more information, see help context 569029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method Find

    For more information, see help context 569034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Find(const QString& FindWhat);

    /*
    Method Find

    For more information, see help context 569034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Find(const QString& FindWhat, int After);

    /*
    Method Find

    For more information, see help context 569034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Find(const QString& FindWhat, int After, Office::MsoTriState MatchCase);

    /*
    Method Find

    For more information, see help context 569034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Find(const QString& FindWhat, int After, Office::MsoTriState MatchCase, Office::MsoTriState WholeWords);

    /*
    Method InsertAfter

    For more information, see help context 569018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* InsertAfter();

    /*
    Method InsertAfter

    For more information, see help context 569018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* InsertAfter(const QString& NewText);

    /*
    Method InsertBefore

    For more information, see help context 569019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* InsertBefore();

    /*
    Method InsertBefore

    For more information, see help context 569019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* InsertBefore(const QString& NewText);

    /*
    Method InsertDateTime

    For more information, see help context 569020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* InsertDateTime(PowerPoint::PpDateTimeFormat DateTimeFormat);

    /*
    Method InsertDateTime

    For more information, see help context 569020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* InsertDateTime(PowerPoint::PpDateTimeFormat DateTimeFormat, Office::MsoTriState InsertAsField);

    /*
    Method InsertSlideNumber

    For more information, see help context 569021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* InsertSlideNumber();

    /*
    Method InsertSymbol

    For more information, see help context 569022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* InsertSymbol(const QString& FontName, int CharNumber);

    /*
    Method InsertSymbol

    For more information, see help context 569022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* InsertSymbol(const QString& FontName, int CharNumber, Office::MsoTriState Unicode);

    /*
    Method Lines

    For more information, see help context 569014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Lines();

    /*
    Method Lines

    For more information, see help context 569014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Lines(int Start);

    /*
    Method Lines

    For more information, see help context 569014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Lines(int Start, int Length);

    /*
    Method LtrRun

    For more information, see help context 569039 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void LtrRun();

    /*
    Method Paragraphs

    For more information, see help context 569010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Paragraphs();

    /*
    Method Paragraphs

    For more information, see help context 569010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Paragraphs(int Start);

    /*
    Method Paragraphs

    For more information, see help context 569010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Paragraphs(int Start, int Length);

    /*
    Method Paste

    For more information, see help context 569030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Paste();

    /*
    Method PasteSpecial

    For more information, see help context 569040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* PasteSpecial();

    /*
    Method PasteSpecial

    For more information, see help context 569040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* PasteSpecial(PowerPoint::PpPasteDataType DataType);

    /*
    Method PasteSpecial

    For more information, see help context 569040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon);

    /*
    Method PasteSpecial

    For more information, see help context 569040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName);

    /*
    Method PasteSpecial

    For more information, see help context 569040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex);

    /*
    Method PasteSpecial

    For more information, see help context 569040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel);

    /*
    Method PasteSpecial

    For more information, see help context 569040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel, Office::MsoTriState Link);

    /*
    Method RemovePeriods

    For more information, see help context 569033 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void RemovePeriods();

    /*
    Method Replace

    For more information, see help context 569035 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Replace(const QString& FindWhat, const QString& ReplaceWhat);

    /*
    Method Replace

    For more information, see help context 569035 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Replace(const QString& FindWhat, const QString& ReplaceWhat, int After);

    /*
    Method Replace

    For more information, see help context 569035 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Replace(const QString& FindWhat, const QString& ReplaceWhat, int After, Office::MsoTriState MatchCase);

    /*
    Method Replace

    For more information, see help context 569035 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Replace(const QString& FindWhat, const QString& ReplaceWhat, int After, Office::MsoTriState MatchCase, Office::MsoTriState WholeWords);

    /*
    Method RotatedBounds

    For more information, see help context 569036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void RotatedBounds(double& X1, double& Y1, double& X2, double& Y2, double& X3, double& Y3, double& x4, double& y4);

    /*
    Method RtlRun

    For more information, see help context 569038 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void RtlRun();

    /*
    Method Runs

    For more information, see help context 569015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Runs();

    /*
    Method Runs

    For more information, see help context 569015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Runs(int Start);

    /*
    Method Runs

    For more information, see help context 569015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Runs(int Start, int Length);

    /*
    Method Select

    For more information, see help context 569026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Select();

    /*
    Method Sentences

    For more information, see help context 569011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Sentences();

    /*
    Method Sentences

    For more information, see help context 569011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Sentences(int Start);

    /*
    Method Sentences

    For more information, see help context 569011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Sentences(int Start, int Length);

    /*
    Method TrimText

    For more information, see help context 569016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* TrimText();

    /*
    Method Words

    For more information, see help context 569012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Words();

    /*
    Method Words

    For more information, see help context 569012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Words(int Start);

    /*
    Method Words

    For more information, see help context 569012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextRange* Words(int Start, int Length);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Ruler : public QAxObject
{
public:
    Ruler(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 570001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Levels

    For more information, see help context 570004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::RulerLevels* Levels() const; //Returns the value of Levels

    /*
    Property Parent

    For more information, see help context 570002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property TabStops

    For more information, see help context 570003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TabStops* TabStops() const; //Returns the value of TabStops

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT RulerLevels : public QAxObject
{
public:
    RulerLevels(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 571001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 571002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 571003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::RulerLevel* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT RulerLevel : public QAxObject
{
public:
    RulerLevel(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 572001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property FirstMargin

    For more information, see help context 572003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double FirstMargin() const; //Returns the value of FirstMargin
    inline void SetFirstMargin(double value); //Sets the value of the FirstMargin property

    /*
    Property LeftMargin

    For more information, see help context 572004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double LeftMargin() const; //Returns the value of LeftMargin
    inline void SetLeftMargin(double value); //Sets the value of the LeftMargin property

    /*
    Property Parent

    For more information, see help context 572002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT TabStops : public QAxObject
{
public:
    TabStops(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 573001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property DefaultSpacing

    For more information, see help context 573004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double DefaultSpacing() const; //Returns the value of DefaultSpacing
    inline void SetDefaultSpacing(double value); //Sets the value of the DefaultSpacing property

    /*
    Property Parent

    For more information, see help context 573002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 573005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TabStop* Add(PowerPoint::PpTabStopType Type, double Position);

    /*
    Method Item

    For more information, see help context 573003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TabStop* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT TabStop : public QAxObject
{
public:
    TabStop(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 574001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Parent

    For more information, see help context 574002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Position

    For more information, see help context 574004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Position() const; //Returns the value of Position
    inline void SetPosition(double value); //Sets the value of the Position property

    /*
    Property Type

    For more information, see help context 574003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpTabStopType Type() const; //Returns the value of Type
    inline void SetType(PowerPoint::PpTabStopType value); //Sets the value of the Type property

    /*
    Method Clear

    For more information, see help context 574005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Clear();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Font : public QAxObject
{
public:
    Font(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 575001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property AutoRotateNumbers

    For more information, see help context 575018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AutoRotateNumbers() const; //Returns the value of AutoRotateNumbers
    inline void SetAutoRotateNumbers(Office::MsoTriState value); //Sets the value of the AutoRotateNumbers property

    /*
    Property BaselineOffset

    For more information, see help context 575011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double BaselineOffset() const; //Returns the value of BaselineOffset
    inline void SetBaselineOffset(double value); //Sets the value of the BaselineOffset property

    /*
    Property Bold

    For more information, see help context 575004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Bold() const; //Returns the value of Bold
    inline void SetBold(Office::MsoTriState value); //Sets the value of the Bold property

    /*
    Property Color

    For more information, see help context 575003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* Color() const; //Returns the value of Color

    /*
    Property Embeddable

    For more information, see help context 575013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Embeddable() const; //Returns the value of Embeddable

    /*
    Property Embedded

    For more information, see help context 575012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Embedded() const; //Returns the value of Embedded

    /*
    Property Emboss

    For more information, see help context 575007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Emboss() const; //Returns the value of Emboss
    inline void SetEmboss(Office::MsoTriState value); //Sets the value of the Emboss property

    /*
    Property Italic

    For more information, see help context 575005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Italic() const; //Returns the value of Italic
    inline void SetItalic(Office::MsoTriState value); //Sets the value of the Italic property

    /*
    Property Name

    For more information, see help context 575015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NameAscii

    For more information, see help context 575017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString NameAscii() const; //Returns the value of NameAscii
    inline void SetNameAscii(const QString& value); //Sets the value of the NameAscii property

    /*
    Property NameComplexScript

    For more information, see help context 575020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString NameComplexScript() const; //Returns the value of NameComplexScript
    inline void SetNameComplexScript(const QString& value); //Sets the value of the NameComplexScript property

    /*
    Property NameFarEast

    For more information, see help context 575016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString NameFarEast() const; //Returns the value of NameFarEast
    inline void SetNameFarEast(const QString& value); //Sets the value of the NameFarEast property

    /*
    Property NameOther

    For more information, see help context 575019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString NameOther() const; //Returns the value of NameOther
    inline void SetNameOther(const QString& value); //Sets the value of the NameOther property

    /*
    Property Parent

    For more information, see help context 575002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Shadow

    For more information, see help context 575006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Shadow() const; //Returns the value of Shadow
    inline void SetShadow(Office::MsoTriState value); //Sets the value of the Shadow property

    /*
    Property Size

    For more information, see help context 575014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Size() const; //Returns the value of Size
    inline void SetSize(double value); //Sets the value of the Size property

    /*
    Property Subscript

    For more information, see help context 575009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Subscript() const; //Returns the value of Subscript
    inline void SetSubscript(Office::MsoTriState value); //Sets the value of the Subscript property

    /*
    Property Superscript

    For more information, see help context 575010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Superscript() const; //Returns the value of Superscript
    inline void SetSuperscript(Office::MsoTriState value); //Sets the value of the Superscript property

    /*
    Property Underline

    For more information, see help context 575008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Underline() const; //Returns the value of Underline
    inline void SetUnderline(Office::MsoTriState value); //Sets the value of the Underline property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ParagraphFormat : public QAxObject
{
public:
    ParagraphFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Alignment

    For more information, see help context 576003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpParagraphAlignment Alignment() const; //Returns the value of Alignment
    inline void SetAlignment(PowerPoint::PpParagraphAlignment value); //Sets the value of the Alignment property

    /*
    Property Application

    For more information, see help context 576001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property BaseLineAlignment

    For more information, see help context 576011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpBaselineAlignment BaseLineAlignment() const; //Returns the value of BaseLineAlignment
    inline void SetBaseLineAlignment(PowerPoint::PpBaselineAlignment value); //Sets the value of the BaseLineAlignment property

    /*
    Property Bullet

    For more information, see help context 576004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::BulletFormat* Bullet() const; //Returns the value of Bullet

    /*
    Property FarEastLineBreakControl

    For more information, see help context 576012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState FarEastLineBreakControl() const; //Returns the value of FarEastLineBreakControl
    inline void SetFarEastLineBreakControl(Office::MsoTriState value); //Sets the value of the FarEastLineBreakControl property

    /*
    Property HangingPunctuation

    For more information, see help context 576014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HangingPunctuation() const; //Returns the value of HangingPunctuation
    inline void SetHangingPunctuation(Office::MsoTriState value); //Sets the value of the HangingPunctuation property

    /*
    Property LineRuleAfter

    For more information, see help context 576006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState LineRuleAfter() const; //Returns the value of LineRuleAfter
    inline void SetLineRuleAfter(Office::MsoTriState value); //Sets the value of the LineRuleAfter property

    /*
    Property LineRuleBefore

    For more information, see help context 576005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState LineRuleBefore() const; //Returns the value of LineRuleBefore
    inline void SetLineRuleBefore(Office::MsoTriState value); //Sets the value of the LineRuleBefore property

    /*
    Property LineRuleWithin

    For more information, see help context 576007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState LineRuleWithin() const; //Returns the value of LineRuleWithin
    inline void SetLineRuleWithin(Office::MsoTriState value); //Sets the value of the LineRuleWithin property

    /*
    Property Parent

    For more information, see help context 576002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property SpaceAfter

    For more information, see help context 576009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double SpaceAfter() const; //Returns the value of SpaceAfter
    inline void SetSpaceAfter(double value); //Sets the value of the SpaceAfter property

    /*
    Property SpaceBefore

    For more information, see help context 576008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double SpaceBefore() const; //Returns the value of SpaceBefore
    inline void SetSpaceBefore(double value); //Sets the value of the SpaceBefore property

    /*
    Property SpaceWithin

    For more information, see help context 576010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double SpaceWithin() const; //Returns the value of SpaceWithin
    inline void SetSpaceWithin(double value); //Sets the value of the SpaceWithin property

    /*
    Property TextDirection

    For more information, see help context 576015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpDirection TextDirection() const; //Returns the value of TextDirection
    inline void SetTextDirection(PowerPoint::PpDirection value); //Sets the value of the TextDirection property

    /*
    Property WordWrap

    For more information, see help context 576013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState WordWrap() const; //Returns the value of WordWrap
    inline void SetWordWrap(Office::MsoTriState value); //Sets the value of the WordWrap property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT BulletFormat : public QAxObject
{
public:
    BulletFormat(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 577001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Character

    For more information, see help context 577004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Character() const; //Returns the value of Character
    inline void SetCharacter(int value); //Sets the value of the Character property

    /*
    Property Font

    For more information, see help context 577008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Font* Font() const; //Returns the value of Font

    /*
    Property Number

    For more information, see help context 577013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Number() const; //Returns the value of Number

    /*
    Property Parent

    For more information, see help context 577002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property RelativeSize

    For more information, see help context 577005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double RelativeSize() const; //Returns the value of RelativeSize
    inline void SetRelativeSize(double value); //Sets the value of the RelativeSize property

    /*
    Property StartValue

    For more information, see help context 577011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int StartValue() const; //Returns the value of StartValue
    inline void SetStartValue(int value); //Sets the value of the StartValue property

    /*
    Property Style

    For more information, see help context 577010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpNumberedBulletStyle Style() const; //Returns the value of Style
    inline void SetStyle(PowerPoint::PpNumberedBulletStyle value); //Sets the value of the Style property

    /*
    Property Type

    For more information, see help context 577009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpBulletType Type() const; //Returns the value of Type
    inline void SetType(PowerPoint::PpBulletType value); //Sets the value of the Type property

    /*
    Property UseTextColor

    For more information, see help context 577006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState UseTextColor() const; //Returns the value of UseTextColor
    inline void SetUseTextColor(Office::MsoTriState value); //Sets the value of the UseTextColor property

    /*
    Property UseTextFont

    For more information, see help context 577007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState UseTextFont() const; //Returns the value of UseTextFont
    inline void SetUseTextFont(Office::MsoTriState value); //Sets the value of the UseTextFont property

    /*
    Property Visible

    For more information, see help context 577003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Visible() const; //Returns the value of Visible
    inline void SetVisible(Office::MsoTriState value); //Sets the value of the Visible property

    /*
    Method Picture

    For more information, see help context 577012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Picture(const QString& Picture);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT TextStyles : public QAxObject
{
public:
    TextStyles(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 578001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 578002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 578003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextStyle* Item(PowerPoint::PpTextStyleType Type);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT TextStyle : public QAxObject
{
public:
    TextStyle(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 579001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Levels

    For more information, see help context 579005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextStyleLevels* Levels() const; //Returns the value of Levels

    /*
    Property Parent

    For more information, see help context 579002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Ruler

    For more information, see help context 579003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Ruler* Ruler() const; //Returns the value of Ruler

    /*
    Property TextFrame

    For more information, see help context 579004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextFrame* TextFrame() const; //Returns the value of TextFrame

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT TextStyleLevels : public QAxObject
{
public:
    TextStyleLevels(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 580001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 580002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 580003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextStyleLevel* Item(int Level);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT TextStyleLevel : public QAxObject
{
public:
    TextStyleLevel(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 581001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Font

    For more information, see help context 581004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Font* Font() const; //Returns the value of Font

    /*
    Property ParagraphFormat

    For more information, see help context 581003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ParagraphFormat* ParagraphFormat() const; //Returns the value of ParagraphFormat

    /*
    Property Parent

    For more information, see help context 581002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT HeaderFooter : public QAxObject
{
public:
    HeaderFooter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 582001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Format

    For more information, see help context 582006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpDateTimeFormat Format() const; //Returns the value of Format
    inline void SetFormat(PowerPoint::PpDateTimeFormat value); //Sets the value of the Format property

    /*
    Property Parent

    For more information, see help context 582002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Text

    For more information, see help context 582004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property UseFormat

    For more information, see help context 582005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState UseFormat() const; //Returns the value of UseFormat
    inline void SetUseFormat(Office::MsoTriState value); //Sets the value of the UseFormat property

    /*
    Property Visible

    For more information, see help context 582003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Visible() const; //Returns the value of Visible
    inline void SetVisible(Office::MsoTriState value); //Sets the value of the Visible property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT _Presentation : public QAxObject
{
public:
    _Presentation(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 583001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property BuiltInDocumentProperties

    For more information, see help context 583020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* BuiltInDocumentProperties() const; //Returns the value of BuiltInDocumentProperties

    /*
    Property ColorSchemes

    For more information, see help context 583013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorSchemes* ColorSchemes() const; //Returns the value of ColorSchemes

    /*
    Property CommandBars

    For more information, see help context 583051 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::CommandBars* CommandBars() const; //Returns the value of CommandBars

    /*
    Property Container

    For more information, see help context 583041 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Container() const; //Returns the value of Container

    /*
    Property CustomDocumentProperties

    For more information, see help context 583021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* CustomDocumentProperties() const; //Returns the value of CustomDocumentProperties

    /*
    Property DefaultLanguageID

    For more information, see help context 583050 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoLanguageID DefaultLanguageID() const; //Returns the value of DefaultLanguageID
    inline void SetDefaultLanguageID(Office::MsoLanguageID value); //Sets the value of the DefaultLanguageID property

    /*
    Property DefaultShape

    For more information, see help context 583019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* DefaultShape() const; //Returns the value of DefaultShape

    /*
    Property Designs

    For more information, see help context 583063 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Designs* Designs() const; //Returns the value of Designs

    /*
    Property DisplayComments

    For more information, see help context 583042 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState DisplayComments() const; //Returns the value of DisplayComments
    inline void SetDisplayComments(Office::MsoTriState value); //Sets the value of the DisplayComments property

    /*
    Property DocumentLibraryVersions

    For more information, see help context 583086 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::DocumentLibraryVersions* DocumentLibraryVersions() const; //Returns the value of DocumentLibraryVersions

    /*
    Property EnvelopeVisible

    For more information, see help context 583057 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState EnvelopeVisible() const; //Returns the value of EnvelopeVisible
    inline void SetEnvelopeVisible(Office::MsoTriState value); //Sets the value of the EnvelopeVisible property

    /*
    Property ExtraColors

    For more information, see help context 583014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ExtraColors* ExtraColors() const; //Returns the value of ExtraColors

    /*
    Property FarEastLineBreakLanguage

    For more information, see help context 583048 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage() const; //Returns the value of FarEastLineBreakLanguage
    inline void SetFarEastLineBreakLanguage(Office::MsoFarEastLineBreakLanguageID value); //Sets the value of the FarEastLineBreakLanguage property

    /*
    Property FarEastLineBreakLevel

    For more information, see help context 583043 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpFarEastLineBreakLevel FarEastLineBreakLevel() const; //Returns the value of FarEastLineBreakLevel
    inline void SetFarEastLineBreakLevel(PowerPoint::PpFarEastLineBreakLevel value); //Sets the value of the FarEastLineBreakLevel property

    /*
    Property Fonts

    For more information, see help context 583016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Fonts* Fonts() const; //Returns the value of Fonts

    /*
    Property FullName

    For more information, see help context 583024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString FullName() const; //Returns the value of FullName

    /*
    Property GridDistance

    For more information, see help context 583062 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double GridDistance() const; //Returns the value of GridDistance
    inline void SetGridDistance(double value); //Sets the value of the GridDistance property

    /*
    Property HTMLProject

    For more information, see help context 583054 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::HTMLProject* HTMLProject() const; //Returns the value of HTMLProject

    /*
    Property HandoutMaster

    For more information, see help context 583010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* HandoutMaster() const; //Returns the value of HandoutMaster

    /*
    Property HasRevisionInfo

    For more information, see help context 583072 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpRevisionInfo HasRevisionInfo() const; //Returns the value of HasRevisionInfo

    /*
    Property HasTitleMaster

    For more information, see help context 583005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasTitleMaster() const; //Returns the value of HasTitleMaster

    /*
    Property LayoutDirection

    For more information, see help context 583028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpDirection LayoutDirection() const; //Returns the value of LayoutDirection
    inline void SetLayoutDirection(PowerPoint::PpDirection value); //Sets the value of the LayoutDirection property

    /*
    Property Name

    For more information, see help context 583025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property NoLineBreakAfter

    For more information, see help context 583045 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString NoLineBreakAfter() const; //Returns the value of NoLineBreakAfter
    inline void SetNoLineBreakAfter(const QString& value); //Sets the value of the NoLineBreakAfter property

    /*
    Property NoLineBreakBefore

    For more information, see help context 583044 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString NoLineBreakBefore() const; //Returns the value of NoLineBreakBefore
    inline void SetNoLineBreakBefore(const QString& value); //Sets the value of the NoLineBreakBefore property

    /*
    Property NotesMaster

    For more information, see help context 583009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* NotesMaster() const; //Returns the value of NotesMaster

    /*
    Property PageSetup

    For more information, see help context 583012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PageSetup* PageSetup() const; //Returns the value of PageSetup

    /*
    Property Parent

    For more information, see help context 583002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Password

    For more information, see help context 583080 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Password() const; //Returns the value of Password
    inline void SetPassword(const QString& value); //Sets the value of the Password property

    /*
    Property PasswordEncryptionAlgorithm

    For more information, see help context 583076 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString PasswordEncryptionAlgorithm() const; //Returns the value of PasswordEncryptionAlgorithm

    /*
    Property PasswordEncryptionFileProperties

    For more information, see help context 583078 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool PasswordEncryptionFileProperties() const; //Returns the value of PasswordEncryptionFileProperties

    /*
    Property PasswordEncryptionKeyLength

    For more information, see help context 583077 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int PasswordEncryptionKeyLength() const; //Returns the value of PasswordEncryptionKeyLength

    /*
    Property PasswordEncryptionProvider

    For more information, see help context 583075 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString PasswordEncryptionProvider() const; //Returns the value of PasswordEncryptionProvider

    /*
    Property Path

    For more information, see help context 583026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property Permission

    For more information, see help context 583082 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Permission* Permission() const; //Returns the value of Permission

    /*
    Property PrintOptions

    For more information, see help context 583033 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PrintOptions* PrintOptions() const; //Returns the value of PrintOptions

    /*
    Property PublishObjects

    For more information, see help context 583052 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PublishObjects* PublishObjects() const; //Returns the value of PublishObjects

    /*
    Property ReadOnly

    For more information, see help context 583023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ReadOnly() const; //Returns the value of ReadOnly

    /*
    Property RemovePersonalInformation

    For more information, see help context 583068 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState RemovePersonalInformation() const; //Returns the value of RemovePersonalInformation
    inline void SetRemovePersonalInformation(Office::MsoTriState value); //Sets the value of the RemovePersonalInformation property

    /*
    Property Saved

    For more information, see help context 583027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Saved() const; //Returns the value of Saved
    inline void SetSaved(Office::MsoTriState value); //Sets the value of the Saved property

    /*
    Property SharedWorkspace

    For more information, see help context 583083 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::SharedWorkspace* SharedWorkspace() const; //Returns the value of SharedWorkspace

    /*
    Property Signatures

    For more information, see help context 583067 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::SignatureSet* Signatures() const; //Returns the value of Signatures

    /*
    Property SlideMaster

    For more information, see help context 583003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* SlideMaster() const; //Returns the value of SlideMaster

    /*
    Property SlideShowSettings

    For more information, see help context 583015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowSettings* SlideShowSettings() const; //Returns the value of SlideShowSettings

    /*
    Property SlideShowWindow

    For more information, see help context 583047 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowWindow* SlideShowWindow() const; //Returns the value of SlideShowWindow

    /*
    Property Slides

    For more information, see help context 583011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Slides* Slides() const; //Returns the value of Slides

    /*
    Property SnapToGrid

    For more information, see help context 583061 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState SnapToGrid() const; //Returns the value of SnapToGrid
    inline void SetSnapToGrid(Office::MsoTriState value); //Sets the value of the SnapToGrid property

    /*
    Property Sync

    For more information, see help context 583084 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Sync* Sync() const; //Returns the value of Sync

    /*
    Property Tags

    For more information, see help context 583018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Tags* Tags() const; //Returns the value of Tags

    /*
    Property TemplateName

    For more information, see help context 583008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString TemplateName() const; //Returns the value of TemplateName

    /*
    Property TitleMaster

    For more information, see help context 583004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* TitleMaster() const; //Returns the value of TitleMaster

    /*
    Property VBASigned

    For more information, see help context 583059 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState VBASigned() const; //Returns the value of VBASigned

    /*
    Property VBProject

    For more information, see help context 583022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline VBIDE::VBProject* VBProject() const; //Returns the value of VBProject

    /*
    Property WebOptions

    For more information, see help context 583053 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::WebOptions* WebOptions() const; //Returns the value of WebOptions

    /*
    Property Windows

    For more information, see help context 583017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindows* Windows() const; //Returns the value of Windows

    /*
    Property WritePassword

    For more information, see help context 583081 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString WritePassword() const; //Returns the value of WritePassword
    inline void SetWritePassword(const QString& value); //Sets the value of the WritePassword property

    /*
    Method AddBaseline

    For more information, see help context 583073 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddBaseline();

    /*
    Method AddBaseline

    For more information, see help context 583073 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddBaseline(const QString& FileName);

    /*
    Method AddTitleMaster

    For more information, see help context 583006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* AddTitleMaster();

    /*
    Method AddToFavorites

    For more information, see help context 583031 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddToFavorites();

    /*
    Method ApplyTemplate

    For more information, see help context 583007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ApplyTemplate(const QString& FileName);

    /*
    Method CanCheckIn

    For more information, see help context 583066 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool CanCheckIn();

    /*
    Method CheckIn

    For more information, see help context 583065 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CheckIn();

    /*
    Method CheckIn

    For more information, see help context 583065 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CheckIn(bool SaveChanges);

    /*
    Method CheckIn

    For more information, see help context 583065 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CheckIn(bool SaveChanges, const QVariant& Comments);

    /*
    Method CheckIn

    For more information, see help context 583065 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CheckIn(bool SaveChanges, const QVariant& Comments, const QVariant& MakePublic);

    /*
    Method Close

    For more information, see help context 583039 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Close();

    /*
    Method EndReview

    For more information, see help context 583071 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void EndReview();

    /*
    Method Export

    For more information, see help context 583038 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& Path, const QString& FilterName);

    /*
    Method Export

    For more information, see help context 583038 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& Path, const QString& FilterName, int ScaleWidth);

    /*
    Method Export

    For more information, see help context 583038 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& Path, const QString& FilterName, int ScaleWidth, int ScaleHeight);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo, Office::MsoExtraInfoMethod Method);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo, Office::MsoExtraInfoMethod Method, const QString& HeaderInfo);

    /*
    Method MakeIntoTemplate

    For more information, see help context 583056 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void MakeIntoTemplate(Office::MsoTriState IsDesignTemplate);

    /*
    Method Merge

    For more information, see help context 583064 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Merge(const QString& Path);

    /*
    Method NewWindow

    For more information, see help context 583029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindow* NewWindow();

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut();

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From);

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To);

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To, const QString& PrintToFile);

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To, const QString& PrintToFile, int Copies);

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To, const QString& PrintToFile, int Copies, Office::MsoTriState Collate);

    /*
    Method ReloadAs

    For more information, see help context 583055 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ReloadAs(Office::MsoEncoding cp);

    /*
    Method RemoveBaseline

    For more information, see help context 583074 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void RemoveBaseline();

    /*
    Method ReplyWithChanges

    For more information, see help context 583070 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ReplyWithChanges();

    /*
    Method ReplyWithChanges

    For more information, see help context 583070 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ReplyWithChanges(bool ShowMessage);

    /*
    Method Save

    For more information, see help context 583035 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Save();

    /*
    Method SaveAs

    For more information, see help context 583036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveAs(const QString& FileName);

    /*
    Method SaveAs

    For more information, see help context 583036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat);

    /*
    Method SaveAs

    For more information, see help context 583036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat, Office::MsoTriState EmbedTrueTypeFonts);

    /*
    Method SaveCopyAs

    For more information, see help context 583037 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveCopyAs(const QString& FileName);

    /*
    Method SaveCopyAs

    For more information, see help context 583037 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveCopyAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat);

    /*
    Method SaveCopyAs

    For more information, see help context 583037 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveCopyAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat, Office::MsoTriState EmbedTrueTypeFonts);

    /*
    Method SendFaxOverInternet

    For more information, see help context 583085 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendFaxOverInternet();

    /*
    Method SendFaxOverInternet

    For more information, see help context 583085 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendFaxOverInternet(const QString& Recipients);

    /*
    Method SendFaxOverInternet

    For more information, see help context 583085 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendFaxOverInternet(const QString& Recipients, const QString& Subject);

    /*
    Method SendFaxOverInternet

    For more information, see help context 583085 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendFaxOverInternet(const QString& Recipients, const QString& Subject, bool ShowMessage);

    /*
    Method SendForReview

    For more information, see help context 583069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendForReview();

    /*
    Method SendForReview

    For more information, see help context 583069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendForReview(const QString& Recipients);

    /*
    Method SendForReview

    For more information, see help context 583069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendForReview(const QString& Recipients, const QString& Subject);

    /*
    Method SendForReview

    For more information, see help context 583069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendForReview(const QString& Recipients, const QString& Subject, bool ShowMessage);

    /*
    Method SendForReview

    For more information, see help context 583069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendForReview(const QString& Recipients, const QString& Subject, bool ShowMessage, const QVariant& IncludeAttachment);

    /*
    Method SetPasswordEncryptionOptions

    For more information, see help context 583079 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetPasswordEncryptionOptions(const QString& PasswordEncryptionProvider, const QString& PasswordEncryptionAlgorithm, int PasswordEncryptionKeyLength, bool PasswordEncryptionFileProperties);

    /*
    Method SetUndoText

    For more information, see help context 583040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetUndoText(const QString& Text);

    /*
    Method Unused

    For more information, see help context 583032 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Unused();

    /*
    Method UpdateLinks

    For more information, see help context 583046 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void UpdateLinks();

    /*
    Method WebPagePreview

    For more information, see help context 583049 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void WebPagePreview();

    /*
    Method sblt

    For more information, see help context 583058 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void sblt(const QString& s);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Tags : public QAxObject
{
public:
    Tags(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 611001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 611002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 611004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Add(const QString& Name, const QString& Value);

    /*
    Method AddBinary

    For more information, see help context 611006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddBinary(const QString& Name, const QString& FilePath);

    /*
    Method BinaryValue

    For more information, see help context 611007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int BinaryValue(const QString& Name);

    /*
    Method Delete

    For more information, see help context 611005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete(const QString& Name);

    /*
    Method Item

    For more information, see help context 611003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Item(const QString& Name);

    /*
    Method Name

    For more information, see help context 611008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name(int Index);

    /*
    Method Value

    For more information, see help context 611009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Value(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// stub for vtable-only interface
class MouseTracker : public QAxObject {};

// stub for vtable-only interface
class MouseDownHandler : public QAxObject {};

class POWERPOINT_EXPORT OCXExtender : public QAxObject
{
public:
    OCXExtender(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AltHTML

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString AltHTML() const; //Returns the value of AltHTML
    inline void SetAltHTML(const QString& value); //Sets the value of the AltHTML property

    /*
    Property Height

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Left

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    For more information, see help context 618003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Top

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    For more information, see help context 618001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property ZOrderPosition

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int ZOrderPosition() const; //Returns the value of ZOrderPosition

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// stub for vtable-only interface
class OCXExtenderEvents : public QAxObject {};

// stub for vtable-only interface
class EApplication : public QAxObject {};

class POWERPOINT_EXPORT Table : public QAxObject
{
public:
    Table(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 622001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Columns

    For more information, see help context 622003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Columns* Columns() const; //Returns the value of Columns

    /*
    Property Parent

    For more information, see help context 622002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Rows

    For more information, see help context 622004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Rows* Rows() const; //Returns the value of Rows

    /*
    Property TableDirection

    For more information, see help context 622006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpDirection TableDirection() const; //Returns the value of TableDirection
    inline void SetTableDirection(PowerPoint::PpDirection value); //Sets the value of the TableDirection property

    /*
    Method Cell

    For more information, see help context 622005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Cell* Cell(int Row, int Column);

    /*
    Method MergeBorders

    For more information, see help context 622007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void MergeBorders();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Columns : public QAxObject
{
public:
    Columns(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 623001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 623002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 623004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Column* Add();

    /*
    Method Add

    For more information, see help context 623004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Column* Add(int BeforeColumn);

    /*
    Method Item

    For more information, see help context 623003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Column* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Column : public QAxObject
{
public:
    Column(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 624001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Cells

    For more information, see help context 624003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::CellRange* Cells() const; //Returns the value of Cells

    /*
    Property Parent

    For more information, see help context 624002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Width

    For more information, see help context 624006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Method Delete

    For more information, see help context 624005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method Select

    For more information, see help context 624004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Select();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Rows : public QAxObject
{
public:
    Rows(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 625001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 625002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 625004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Row* Add();

    /*
    Method Add

    For more information, see help context 625004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Row* Add(int BeforeRow);

    /*
    Method Item

    For more information, see help context 625003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Row* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Row : public QAxObject
{
public:
    Row(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 626001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Cells

    For more information, see help context 626003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::CellRange* Cells() const; //Returns the value of Cells

    /*
    Property Height

    For more information, see help context 626006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Parent

    For more information, see help context 626002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Method Delete

    For more information, see help context 626005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method Select

    For more information, see help context 626004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Select();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT CellRange : public QAxObject
{
public:
    CellRange(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 627001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Borders

    For more information, see help context 627004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Borders* Borders() const; //Returns the value of Borders

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 627002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 627003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Cell* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Cell : public QAxObject
{
public:
    Cell(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 628001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Borders

    For more information, see help context 628004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Borders* Borders() const; //Returns the value of Borders

    /*
    Property Parent

    For more information, see help context 628002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Selected

    For more information, see help context 628008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool Selected() const; //Returns the value of Selected

    /*
    Property Shape

    For more information, see help context 628003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Shape() const; //Returns the value of Shape

    /*
    Method Merge

    For more information, see help context 628005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Merge(PowerPoint::Cell* MergeTo);

    /*
    Method Select

    For more information, see help context 628007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Select();

    /*
    Method Split

    For more information, see help context 628006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Split(int NumRows, int NumColumns);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Borders : public QAxObject
{
public:
    Borders(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 629001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 629002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 629003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::LineFormat* Item(PowerPoint::PpBorderType BorderType);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Panes : public QAxObject
{
public:
    Panes(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 630001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 630003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 630002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Pane* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Pane : public QAxObject
{
public:
    Pane(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Active

    For more information, see help context 631003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Active() const; //Returns the value of Active

    /*
    Property Application

    For more information, see help context 631004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Parent

    For more information, see help context 631001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property ViewType

    For more information, see help context 631005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpViewType ViewType() const; //Returns the value of ViewType

    /*
    Method Activate

    For more information, see help context 631002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Activate();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT DefaultWebOptions : public QAxObject
{
public:
    DefaultWebOptions(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AllowPNG

    For more information, see help context 632008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AllowPNG() const; //Returns the value of AllowPNG
    inline void SetAllowPNG(Office::MsoTriState value); //Sets the value of the AllowPNG property

    /*
    Property AlwaysSaveInDefaultEncoding

    For more information, see help context 632013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AlwaysSaveInDefaultEncoding() const; //Returns the value of AlwaysSaveInDefaultEncoding
    inline void SetAlwaysSaveInDefaultEncoding(Office::MsoTriState value); //Sets the value of the AlwaysSaveInDefaultEncoding property

    /*
    Property CheckIfOfficeIsHTMLEditor

    For more information, see help context 632012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState CheckIfOfficeIsHTMLEditor() const; //Returns the value of CheckIfOfficeIsHTMLEditor
    inline void SetCheckIfOfficeIsHTMLEditor(Office::MsoTriState value); //Sets the value of the CheckIfOfficeIsHTMLEditor property

    /*
    Property Encoding

    For more information, see help context 632010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoEncoding Encoding() const; //Returns the value of Encoding
    inline void SetEncoding(Office::MsoEncoding value); //Sets the value of the Encoding property

    /*
    Property FolderSuffix

    For more information, see help context 632015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString FolderSuffix() const; //Returns the value of FolderSuffix

    /*
    Property Fonts

    For more information, see help context 632014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::WebPageFonts* Fonts() const; //Returns the value of Fonts

    /*
    Property FrameColors

    For more information, see help context 632002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpFrameColors FrameColors() const; //Returns the value of FrameColors
    inline void SetFrameColors(PowerPoint::PpFrameColors value); //Sets the value of the FrameColors property

    /*
    Property HTMLVersion

    For more information, see help context 632018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpHTMLVersion HTMLVersion() const; //Returns the value of HTMLVersion
    inline void SetHTMLVersion(PowerPoint::PpHTMLVersion value); //Sets the value of the HTMLVersion property

    /*
    Property IncludeNavigation

    For more information, see help context 632001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState IncludeNavigation() const; //Returns the value of IncludeNavigation
    inline void SetIncludeNavigation(Office::MsoTriState value); //Sets the value of the IncludeNavigation property

    /*
    Property OrganizeInFolder

    For more information, see help context 632005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState OrganizeInFolder() const; //Returns the value of OrganizeInFolder
    inline void SetOrganizeInFolder(Office::MsoTriState value); //Sets the value of the OrganizeInFolder property

    /*
    Property RelyOnVML

    For more information, see help context 632007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState RelyOnVML() const; //Returns the value of RelyOnVML
    inline void SetRelyOnVML(Office::MsoTriState value); //Sets the value of the RelyOnVML property

    /*
    Property ResizeGraphics

    For more information, see help context 632003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ResizeGraphics() const; //Returns the value of ResizeGraphics
    inline void SetResizeGraphics(Office::MsoTriState value); //Sets the value of the ResizeGraphics property

    /*
    Property SaveNewWebPagesAsWebArchives

    For more information, see help context 632017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState SaveNewWebPagesAsWebArchives() const; //Returns the value of SaveNewWebPagesAsWebArchives
    inline void SetSaveNewWebPagesAsWebArchives(Office::MsoTriState value); //Sets the value of the SaveNewWebPagesAsWebArchives property

    /*
    Property ScreenSize

    For more information, see help context 632009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoScreenSize ScreenSize() const; //Returns the value of ScreenSize
    inline void SetScreenSize(Office::MsoScreenSize value); //Sets the value of the ScreenSize property

    /*
    Property ShowSlideAnimation

    For more information, see help context 632004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ShowSlideAnimation() const; //Returns the value of ShowSlideAnimation
    inline void SetShowSlideAnimation(Office::MsoTriState value); //Sets the value of the ShowSlideAnimation property

    /*
    Property TargetBrowser

    For more information, see help context 632016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTargetBrowser TargetBrowser() const; //Returns the value of TargetBrowser
    inline void SetTargetBrowser(Office::MsoTargetBrowser value); //Sets the value of the TargetBrowser property

    /*
    Property UpdateLinksOnSave

    For more information, see help context 632011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState UpdateLinksOnSave() const; //Returns the value of UpdateLinksOnSave
    inline void SetUpdateLinksOnSave(Office::MsoTriState value); //Sets the value of the UpdateLinksOnSave property

    /*
    Property UseLongFileNames

    For more information, see help context 632006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState UseLongFileNames() const; //Returns the value of UseLongFileNames
    inline void SetUseLongFileNames(Office::MsoTriState value); //Sets the value of the UseLongFileNames property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT WebOptions : public QAxObject
{
public:
    WebOptions(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AllowPNG

    For more information, see help context 633008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AllowPNG() const; //Returns the value of AllowPNG
    inline void SetAllowPNG(Office::MsoTriState value); //Sets the value of the AllowPNG property

    /*
    Property Encoding

    For more information, see help context 633010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoEncoding Encoding() const; //Returns the value of Encoding
    inline void SetEncoding(Office::MsoEncoding value); //Sets the value of the Encoding property

    /*
    Property FolderSuffix

    For more information, see help context 633011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString FolderSuffix() const; //Returns the value of FolderSuffix

    /*
    Property FrameColors

    For more information, see help context 633002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpFrameColors FrameColors() const; //Returns the value of FrameColors
    inline void SetFrameColors(PowerPoint::PpFrameColors value); //Sets the value of the FrameColors property

    /*
    Property HTMLVersion

    For more information, see help context 633014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpHTMLVersion HTMLVersion() const; //Returns the value of HTMLVersion
    inline void SetHTMLVersion(PowerPoint::PpHTMLVersion value); //Sets the value of the HTMLVersion property

    /*
    Property IncludeNavigation

    For more information, see help context 633001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState IncludeNavigation() const; //Returns the value of IncludeNavigation
    inline void SetIncludeNavigation(Office::MsoTriState value); //Sets the value of the IncludeNavigation property

    /*
    Property OrganizeInFolder

    For more information, see help context 633005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState OrganizeInFolder() const; //Returns the value of OrganizeInFolder
    inline void SetOrganizeInFolder(Office::MsoTriState value); //Sets the value of the OrganizeInFolder property

    /*
    Property RelyOnVML

    For more information, see help context 633007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState RelyOnVML() const; //Returns the value of RelyOnVML
    inline void SetRelyOnVML(Office::MsoTriState value); //Sets the value of the RelyOnVML property

    /*
    Property ResizeGraphics

    For more information, see help context 633003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ResizeGraphics() const; //Returns the value of ResizeGraphics
    inline void SetResizeGraphics(Office::MsoTriState value); //Sets the value of the ResizeGraphics property

    /*
    Property ScreenSize

    For more information, see help context 633009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoScreenSize ScreenSize() const; //Returns the value of ScreenSize
    inline void SetScreenSize(Office::MsoScreenSize value); //Sets the value of the ScreenSize property

    /*
    Property ShowSlideAnimation

    For more information, see help context 633004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ShowSlideAnimation() const; //Returns the value of ShowSlideAnimation
    inline void SetShowSlideAnimation(Office::MsoTriState value); //Sets the value of the ShowSlideAnimation property

    /*
    Property TargetBrowser

    For more information, see help context 633013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTargetBrowser TargetBrowser() const; //Returns the value of TargetBrowser
    inline void SetTargetBrowser(Office::MsoTargetBrowser value); //Sets the value of the TargetBrowser property

    /*
    Property UseLongFileNames

    For more information, see help context 633006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState UseLongFileNames() const; //Returns the value of UseLongFileNames
    inline void SetUseLongFileNames(Office::MsoTriState value); //Sets the value of the UseLongFileNames property

    /*
    Method UseDefaultFolderSuffix

    For more information, see help context 633012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void UseDefaultFolderSuffix();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT PublishObjects : public QAxObject
{
public:
    PublishObjects(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 634001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 634002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 634003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PublishObject* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT PublishObject : public QAxObject
{
public:
    PublishObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 635001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property FileName

    For more information, see help context 635009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property HTMLVersion

    For more information, see help context 635003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpHTMLVersion HTMLVersion() const; //Returns the value of HTMLVersion
    inline void SetHTMLVersion(PowerPoint::PpHTMLVersion value); //Sets the value of the HTMLVersion property

    /*
    Property Parent

    For more information, see help context 635002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property RangeEnd

    For more information, see help context 635006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int RangeEnd() const; //Returns the value of RangeEnd
    inline void SetRangeEnd(int value); //Sets the value of the RangeEnd property

    /*
    Property RangeStart

    For more information, see help context 635005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int RangeStart() const; //Returns the value of RangeStart
    inline void SetRangeStart(int value); //Sets the value of the RangeStart property

    /*
    Property SlideShowName

    For more information, see help context 635007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString SlideShowName() const; //Returns the value of SlideShowName
    inline void SetSlideShowName(const QString& value); //Sets the value of the SlideShowName property

    /*
    Property SourceType

    For more information, see help context 635004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpPublishSourceType SourceType() const; //Returns the value of SourceType
    inline void SetSourceType(PowerPoint::PpPublishSourceType value); //Sets the value of the SourceType property

    /*
    Property SpeakerNotes

    For more information, see help context 635008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState SpeakerNotes() const; //Returns the value of SpeakerNotes
    inline void SetSpeakerNotes(Office::MsoTriState value); //Sets the value of the SpeakerNotes property

    /*
    Method Publish

    For more information, see help context 635010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Publish();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// stub for vtable-only interface
class MasterEvents : public QAxObject {};

class POWERPOINT_EXPORT _PowerRex : public QAxObject
{
public:
    _PowerRex(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method OnAsfEncoderEvent

    For more information, see help context 639001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void OnAsfEncoderEvent(const QVariant& erorCode, const QVariant& bstrErrorDesc);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Comments : public QAxObject
{
public:
    Comments(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 641001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 641002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 641004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Comment* Add(double Left, double Top, const QString& Author, const QString& AuthorInitials, const QString& Text);

    /*
    Method Item

    For more information, see help context 641003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Comment* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Comment : public QAxObject
{
public:
    Comment(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 642001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Author

    For more information, see help context 642003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Author() const; //Returns the value of Author

    /*
    Property AuthorIndex

    For more information, see help context 642007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int AuthorIndex() const; //Returns the value of AuthorIndex

    /*
    Property AuthorInitials

    For more information, see help context 642004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString AuthorInitials() const; //Returns the value of AuthorInitials

    /*
    Property DateTime

    For more information, see help context 642006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QDateTime DateTime() const; //Returns the value of DateTime

    /*
    Property Left

    For more information, see help context 642008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Left() const; //Returns the value of Left

    /*
    Property Parent

    For more information, see help context 642002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Text

    For more information, see help context 642005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Property Top

    For more information, see help context 642009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Top() const; //Returns the value of Top

    /*
    Method Delete

    For more information, see help context 642010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Designs : public QAxObject
{
public:
    Designs(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 643001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 643002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 643004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Add(const QString& designName);

    /*
    Method Add

    For more information, see help context 643004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Add(const QString& designName, int Index);

    /*
    Method Clone

    For more information, see help context 643006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Clone(PowerPoint::Design* pOriginal);

    /*
    Method Clone

    For more information, see help context 643006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Clone(PowerPoint::Design* pOriginal, int Index);

    /*
    Method Item

    For more information, see help context 643003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Item(const QVariant& Index);

    /*
    Method Load

    For more information, see help context 643005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Load(const QString& TemplateName);

    /*
    Method Load

    For more information, see help context 643005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Load(const QString& TemplateName, int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Design : public QAxObject
{
public:
    Design(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 644001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property HasTitleMaster

    For more information, see help context 644005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasTitleMaster() const; //Returns the value of HasTitleMaster

    /*
    Property Index

    For more information, see help context 644007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Index() const; //Returns the value of Index

    /*
    Property Name

    For more information, see help context 644008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    For more information, see help context 644002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Preserved

    For more information, see help context 644009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Preserved() const; //Returns the value of Preserved
    inline void SetPreserved(Office::MsoTriState value); //Sets the value of the Preserved property

    /*
    Property SlideMaster

    For more information, see help context 644003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* SlideMaster() const; //Returns the value of SlideMaster

    /*
    Property TitleMaster

    For more information, see help context 644004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* TitleMaster() const; //Returns the value of TitleMaster

    /*
    Method AddTitleMaster

    For more information, see help context 644006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* AddTitleMaster();

    /*
    Method Delete

    For more information, see help context 644011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method MoveTo

    For more information, see help context 644010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void MoveTo(int toPos);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT DiagramNode : public QAxObject
{
public:
    DiagramNode(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Children

    For more information, see help context 645011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNodeChildren* Children() const; //Returns the value of Children

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Diagram

    For more information, see help context 645014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Diagram* Diagram() const; //Returns the value of Diagram

    /*
    Property Layout

    For more information, see help context 645015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoOrgChartLayoutType Layout() const; //Returns the value of Layout
    inline void SetLayout(Office::MsoOrgChartLayoutType value); //Sets the value of the Layout property

    /*
    Property Parent

    For more information, see help context 645010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Root

    For more information, see help context 645013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* Root() const; //Returns the value of Root

    /*
    Property Shape

    For more information, see help context 645012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Shape() const; //Returns the value of Shape

    /*
    Property TextShape

    For more information, see help context 645016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* TextShape() const; //Returns the value of TextShape

    /*
    Method AddNode

    For more information, see help context 645001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* AddNode();

    /*
    Method AddNode

    For more information, see help context 645001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* AddNode(Office::MsoRelativeNodePosition Pos);

    /*
    Method AddNode

    For more information, see help context 645001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* AddNode(Office::MsoRelativeNodePosition Pos, Office::MsoDiagramNodeType NodeType);

    /*
    Method CloneNode

    For more information, see help context 645006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* CloneNode(bool CopyChildren, PowerPoint::DiagramNode* TargetNode);

    /*
    Method CloneNode

    For more information, see help context 645006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* CloneNode(bool CopyChildren, PowerPoint::DiagramNode* TargetNode, Office::MsoRelativeNodePosition Pos);

    /*
    Method Delete

    For more information, see help context 645002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method MoveNode

    For more information, see help context 645003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void MoveNode(PowerPoint::DiagramNode* TargetNode, Office::MsoRelativeNodePosition Pos);

    /*
    Method NextNode

    For more information, see help context 645008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* NextNode();

    /*
    Method PrevNode

    For more information, see help context 645009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* PrevNode();

    /*
    Method ReplaceNode

    For more information, see help context 645004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ReplaceNode(PowerPoint::DiagramNode* TargetNode);

    /*
    Method SwapNode

    For more information, see help context 645005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SwapNode(PowerPoint::DiagramNode* TargetNode);

    /*
    Method SwapNode

    For more information, see help context 645005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SwapNode(PowerPoint::DiagramNode* TargetNode, bool SwapChildren);

    /*
    Method TransferChildren

    For more information, see help context 645007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void TransferChildren(PowerPoint::DiagramNode* ReceivingNode);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT DiagramNodeChildren : public QAxObject
{
public:
    DiagramNodeChildren(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 646006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property FirstChild

    For more information, see help context 646007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* FirstChild() const; //Returns the value of FirstChild

    /*
    Property LastChild

    For more information, see help context 646008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* LastChild() const; //Returns the value of LastChild

    /*
    Property Parent

    For more information, see help context 646005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 646001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method AddNode

    For more information, see help context 646003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* AddNode();

    /*
    Method AddNode

    For more information, see help context 646003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* AddNode(const QVariant& Index);

    /*
    Method AddNode

    For more information, see help context 646003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* AddNode(const QVariant& Index, Office::MsoDiagramNodeType NodeType);

    /*
    Method Item

    For more information, see help context 646002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* Item(const QVariant& Index);

    /*
    Method SelectAll

    For more information, see help context 646004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SelectAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT DiagramNodes : public QAxObject
{
public:
    DiagramNodes(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 647005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Parent

    For more information, see help context 647004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 647001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    For more information, see help context 647002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNode* Item(const QVariant& Index);

    /*
    Method SelectAll

    For more information, see help context 647003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SelectAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Diagram : public QAxObject
{
public:
    Diagram(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property AutoFormat

    For more information, see help context 648006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AutoFormat() const; //Returns the value of AutoFormat
    inline void SetAutoFormat(Office::MsoTriState value); //Sets the value of the AutoFormat property

    /*
    Property AutoLayout

    For more information, see help context 648004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AutoLayout() const; //Returns the value of AutoLayout
    inline void SetAutoLayout(Office::MsoTriState value); //Sets the value of the AutoLayout property

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Nodes

    For more information, see help context 648002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DiagramNodes* Nodes() const; //Returns the value of Nodes

    /*
    Property Parent

    For more information, see help context 648001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Reverse

    For more information, see help context 648005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Reverse() const; //Returns the value of Reverse
    inline void SetReverse(Office::MsoTriState value); //Sets the value of the Reverse property

    /*
    Property Type

    For more information, see help context 648003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoDiagramType Type() const; //Returns the value of Type

    /*
    Method Convert

    For more information, see help context 648007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Convert(Office::MsoDiagramType Type);

    /*
    Method FitText

    For more information, see help context 648008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FitText();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT TimeLine : public QAxObject
{
public:
    TimeLine(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 649001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property InteractiveSequences

    For more information, see help context 649004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Sequences* InteractiveSequences() const; //Returns the value of InteractiveSequences

    /*
    Property MainSequence

    For more information, see help context 649003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Sequence* MainSequence() const; //Returns the value of MainSequence

    /*
    Property Parent

    For more information, see help context 649002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Sequences : public QAxObject
{
public:
    Sequences(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 650001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 650002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 650004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Sequence* Add();

    /*
    Method Add

    For more information, see help context 650004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Sequence* Add(int Index);

    /*
    Method Item

    For more information, see help context 650003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Sequence* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Sequence : public QAxObject
{
public:
    Sequence(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 651001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 651002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method AddEffect

    For more information, see help context 651004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* AddEffect(PowerPoint::Shape* Shape, PowerPoint::MsoAnimEffect effectId);

    /*
    Method AddEffect

    For more information, see help context 651004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* AddEffect(PowerPoint::Shape* Shape, PowerPoint::MsoAnimEffect effectId, PowerPoint::MsoAnimateByLevel Level);

    /*
    Method AddEffect

    For more information, see help context 651004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* AddEffect(PowerPoint::Shape* Shape, PowerPoint::MsoAnimEffect effectId, PowerPoint::MsoAnimateByLevel Level, PowerPoint::MsoAnimTriggerType trigger);

    /*
    Method AddEffect

    For more information, see help context 651004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* AddEffect(PowerPoint::Shape* Shape, PowerPoint::MsoAnimEffect effectId, PowerPoint::MsoAnimateByLevel Level, PowerPoint::MsoAnimTriggerType trigger, int Index);

    /*
    Method Clone

    For more information, see help context 651005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* Clone(PowerPoint::Effect* Effect);

    /*
    Method Clone

    For more information, see help context 651005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* Clone(PowerPoint::Effect* Effect, int Index);

    /*
    Method ConvertToAfterEffect

    For more information, see help context 651009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* ConvertToAfterEffect(PowerPoint::Effect* Effect, PowerPoint::MsoAnimAfterEffect After);

    /*
    Method ConvertToAfterEffect

    For more information, see help context 651009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* ConvertToAfterEffect(PowerPoint::Effect* Effect, PowerPoint::MsoAnimAfterEffect After, int DimColor);

    /*
    Method ConvertToAfterEffect

    For more information, see help context 651009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* ConvertToAfterEffect(PowerPoint::Effect* Effect, PowerPoint::MsoAnimAfterEffect After, int DimColor, PowerPoint::PpColorSchemeIndex DimSchemeColor);

    /*
    Method ConvertToAnimateBackground

    For more information, see help context 651010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* ConvertToAnimateBackground(PowerPoint::Effect* Effect, Office::MsoTriState AnimateBackground);

    /*
    Method ConvertToAnimateInReverse

    For more information, see help context 651011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* ConvertToAnimateInReverse(PowerPoint::Effect* Effect, Office::MsoTriState animateInReverse);

    /*
    Method ConvertToBuildLevel

    For more information, see help context 651008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* ConvertToBuildLevel(PowerPoint::Effect* Effect, PowerPoint::MsoAnimateByLevel Level);

    /*
    Method ConvertToTextUnitEffect

    For more information, see help context 651012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* ConvertToTextUnitEffect(PowerPoint::Effect* Effect, PowerPoint::MsoAnimTextUnitEffect unitEffect);

    /*
    Method FindFirstAnimationFor

    For more information, see help context 651006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* FindFirstAnimationFor(PowerPoint::Shape* Shape);

    /*
    Method FindFirstAnimationForClick

    For more information, see help context 651007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* FindFirstAnimationForClick(int click);

    /*
    Method Item

    For more information, see help context 651003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Effect* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Effect : public QAxObject
{
public:
    Effect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 652001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Behaviors

    For more information, see help context 652017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AnimationBehaviors* Behaviors() const; //Returns the value of Behaviors

    /*
    Property DisplayName

    For more information, see help context 652015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString DisplayName() const; //Returns the value of DisplayName

    /*
    Property EffectInformation

    For more information, see help context 652018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::EffectInformation* EffectInformation() const; //Returns the value of EffectInformation

    /*
    Property EffectParameters

    For more information, see help context 652011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::EffectParameters* EffectParameters() const; //Returns the value of EffectParameters

    /*
    Property EffectType

    For more information, see help context 652010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimEffect EffectType() const; //Returns the value of EffectType
    inline void SetEffectType(PowerPoint::MsoAnimEffect value); //Sets the value of the EffectType property

    /*
    Property Exit

    For more information, see help context 652016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Exit() const; //Returns the value of Exit
    inline void SetExit(Office::MsoTriState value); //Sets the value of the Exit property

    /*
    Property Index

    For more information, see help context 652008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Index() const; //Returns the value of Index

    /*
    Property Paragraph

    For more information, see help context 652014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Paragraph() const; //Returns the value of Paragraph
    inline void SetParagraph(int value); //Sets the value of the Paragraph property

    /*
    Property Parent

    For more information, see help context 652002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Shape

    For more information, see help context 652003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Shape() const; //Returns the value of Shape
    inline void SetShape(PowerPoint::Shape* value); //Sets the value of the Shape property

    /*
    Property TextRangeLength

    For more information, see help context 652013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int TextRangeLength() const; //Returns the value of TextRangeLength

    /*
    Property TextRangeStart

    For more information, see help context 652012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int TextRangeStart() const; //Returns the value of TextRangeStart

    /*
    Property Timing

    For more information, see help context 652009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Timing* Timing() const; //Returns the value of Timing

    /*
    Method Delete

    For more information, see help context 652007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method MoveAfter

    For more information, see help context 652006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void MoveAfter(PowerPoint::Effect* Effect);

    /*
    Method MoveBefore

    For more information, see help context 652005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void MoveBefore(PowerPoint::Effect* Effect);

    /*
    Method MoveTo

    For more information, see help context 652004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void MoveTo(int toPos);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Timing : public QAxObject
{
public:
    Timing(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Accelerate

    For more information, see help context 653010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Accelerate() const; //Returns the value of Accelerate
    inline void SetAccelerate(double value); //Sets the value of the Accelerate property

    /*
    Property Application

    For more information, see help context 653001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property AutoReverse

    For more information, see help context 653012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AutoReverse() const; //Returns the value of AutoReverse
    inline void SetAutoReverse(Office::MsoTriState value); //Sets the value of the AutoReverse property

    /*
    Property Decelerate

    For more information, see help context 653011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Decelerate() const; //Returns the value of Decelerate
    inline void SetDecelerate(double value); //Sets the value of the Decelerate property

    /*
    Property Duration

    For more information, see help context 653003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Duration() const; //Returns the value of Duration
    inline void SetDuration(double value); //Sets the value of the Duration property

    /*
    Property Parent

    For more information, see help context 653002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property RepeatCount

    For more information, see help context 653007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int RepeatCount() const; //Returns the value of RepeatCount
    inline void SetRepeatCount(int value); //Sets the value of the RepeatCount property

    /*
    Property RepeatDuration

    For more information, see help context 653008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double RepeatDuration() const; //Returns the value of RepeatDuration
    inline void SetRepeatDuration(double value); //Sets the value of the RepeatDuration property

    /*
    Property Restart

    For more information, see help context 653016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimEffectRestart Restart() const; //Returns the value of Restart
    inline void SetRestart(PowerPoint::MsoAnimEffectRestart value); //Sets the value of the Restart property

    /*
    Property RewindAtEnd

    For more information, see help context 653015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState RewindAtEnd() const; //Returns the value of RewindAtEnd
    inline void SetRewindAtEnd(Office::MsoTriState value); //Sets the value of the RewindAtEnd property

    /*
    Property SmoothEnd

    For more information, see help context 653014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState SmoothEnd() const; //Returns the value of SmoothEnd
    inline void SetSmoothEnd(Office::MsoTriState value); //Sets the value of the SmoothEnd property

    /*
    Property SmoothStart

    For more information, see help context 653013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState SmoothStart() const; //Returns the value of SmoothStart
    inline void SetSmoothStart(Office::MsoTriState value); //Sets the value of the SmoothStart property

    /*
    Property Speed

    For more information, see help context 653009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Speed() const; //Returns the value of Speed
    inline void SetSpeed(double value); //Sets the value of the Speed property

    /*
    Property TriggerDelayTime

    For more information, see help context 653005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double TriggerDelayTime() const; //Returns the value of TriggerDelayTime
    inline void SetTriggerDelayTime(double value); //Sets the value of the TriggerDelayTime property

    /*
    Property TriggerShape

    For more information, see help context 653006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* TriggerShape() const; //Returns the value of TriggerShape
    inline void SetTriggerShape(PowerPoint::Shape* value); //Sets the value of the TriggerShape property

    /*
    Property TriggerType

    For more information, see help context 653004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimTriggerType TriggerType() const; //Returns the value of TriggerType
    inline void SetTriggerType(PowerPoint::MsoAnimTriggerType value); //Sets the value of the TriggerType property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT EffectParameters : public QAxObject
{
public:
    EffectParameters(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Amount

    For more information, see help context 654004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Amount() const; //Returns the value of Amount
    inline void SetAmount(double value); //Sets the value of the Amount property

    /*
    Property Application

    For more information, see help context 654001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Color2

    For more information, see help context 654006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* Color2() const; //Returns the value of Color2

    /*
    Property Direction

    For more information, see help context 654003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimDirection Direction() const; //Returns the value of Direction
    inline void SetDirection(PowerPoint::MsoAnimDirection value); //Sets the value of the Direction property

    /*
    Property FontName

    For more information, see help context 654008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString FontName() const; //Returns the value of FontName
    inline void SetFontName(const QString& value); //Sets the value of the FontName property

    /*
    Property Parent

    For more information, see help context 654002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Relative

    For more information, see help context 654007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Relative() const; //Returns the value of Relative
    inline void SetRelative(Office::MsoTriState value); //Sets the value of the Relative property

    /*
    Property Size

    For more information, see help context 654005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Size() const; //Returns the value of Size
    inline void SetSize(double value); //Sets the value of the Size property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT EffectInformation : public QAxObject
{
public:
    EffectInformation(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AfterEffect

    For more information, see help context 655003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimAfterEffect AfterEffect() const; //Returns the value of AfterEffect

    /*
    Property AnimateBackground

    For more information, see help context 655004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AnimateBackground() const; //Returns the value of AnimateBackground

    /*
    Property AnimateTextInReverse

    For more information, see help context 655005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState AnimateTextInReverse() const; //Returns the value of AnimateTextInReverse

    /*
    Property Application

    For more information, see help context 655001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property BuildByLevelEffect

    For more information, see help context 655006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimateByLevel BuildByLevelEffect() const; //Returns the value of BuildByLevelEffect

    /*
    Property Dim

    For more information, see help context 655007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* Dim() const; //Returns the value of Dim

    /*
    Property Parent

    For more information, see help context 655002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PlaySettings

    For more information, see help context 655008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PlaySettings* PlaySettings() const; //Returns the value of PlaySettings

    /*
    Property SoundEffect

    For more information, see help context 655009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SoundEffect* SoundEffect() const; //Returns the value of SoundEffect

    /*
    Property TextUnitEffect

    For more information, see help context 655010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimTextUnitEffect TextUnitEffect() const; //Returns the value of TextUnitEffect

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT AnimationBehaviors : public QAxObject
{
public:
    AnimationBehaviors(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 656001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 656002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 656004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AnimationBehavior* Add(PowerPoint::MsoAnimType Type);

    /*
    Method Add

    For more information, see help context 656004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AnimationBehavior* Add(PowerPoint::MsoAnimType Type, int Index);

    /*
    Method Item

    For more information, see help context 656003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AnimationBehavior* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT AnimationBehavior : public QAxObject
{
public:
    AnimationBehavior(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Accumulate

    For more information, see help context 657004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimAccumulate Accumulate() const; //Returns the value of Accumulate
    inline void SetAccumulate(PowerPoint::MsoAnimAccumulate value); //Sets the value of the Accumulate property

    /*
    Property Additive

    For more information, see help context 657003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimAdditive Additive() const; //Returns the value of Additive
    inline void SetAdditive(PowerPoint::MsoAnimAdditive value); //Sets the value of the Additive property

    /*
    Property Application

    For more information, see help context 657001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property ColorEffect

    For more information, see help context 657007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorEffect* ColorEffect() const; //Returns the value of ColorEffect

    /*
    Property CommandEffect

    For more information, see help context 657013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::CommandEffect* CommandEffect() const; //Returns the value of CommandEffect

    /*
    Property FilterEffect

    For more information, see help context 657014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::FilterEffect* FilterEffect() const; //Returns the value of FilterEffect

    /*
    Property MotionEffect

    For more information, see help context 657006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MotionEffect* MotionEffect() const; //Returns the value of MotionEffect

    /*
    Property Parent

    For more information, see help context 657002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PropertyEffect

    For more information, see help context 657010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PropertyEffect* PropertyEffect() const; //Returns the value of PropertyEffect

    /*
    Property RotationEffect

    For more information, see help context 657009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::RotationEffect* RotationEffect() const; //Returns the value of RotationEffect

    /*
    Property ScaleEffect

    For more information, see help context 657008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ScaleEffect* ScaleEffect() const; //Returns the value of ScaleEffect

    /*
    Property SetEffect

    For more information, see help context 657015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SetEffect* SetEffect() const; //Returns the value of SetEffect

    /*
    Property Timing

    For more information, see help context 657011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Timing* Timing() const; //Returns the value of Timing

    /*
    Property Type

    For more information, see help context 657005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimType Type() const; //Returns the value of Type
    inline void SetType(PowerPoint::MsoAnimType value); //Sets the value of the Type property

    /*
    Method Delete

    For more information, see help context 657012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT MotionEffect : public QAxObject
{
public:
    MotionEffect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 658001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property ByX

    For more information, see help context 658003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double ByX() const; //Returns the value of ByX
    inline void SetByX(double value); //Sets the value of the ByX property

    /*
    Property ByY

    For more information, see help context 658004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double ByY() const; //Returns the value of ByY
    inline void SetByY(double value); //Sets the value of the ByY property

    /*
    Property FromX

    For more information, see help context 658005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double FromX() const; //Returns the value of FromX
    inline void SetFromX(double value); //Sets the value of the FromX property

    /*
    Property FromY

    For more information, see help context 658006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double FromY() const; //Returns the value of FromY
    inline void SetFromY(double value); //Sets the value of the FromY property

    /*
    Property Parent

    For more information, see help context 658002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Path

    For more information, see help context 658009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Path() const; //Returns the value of Path
    inline void SetPath(const QString& value); //Sets the value of the Path property

    /*
    Property ToX

    For more information, see help context 658007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double ToX() const; //Returns the value of ToX
    inline void SetToX(double value); //Sets the value of the ToX property

    /*
    Property ToY

    For more information, see help context 658008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double ToY() const; //Returns the value of ToY
    inline void SetToY(double value); //Sets the value of the ToY property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ColorEffect : public QAxObject
{
public:
    ColorEffect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 659001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property By

    For more information, see help context 659003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* By() const; //Returns the value of By

    /*
    Property From

    For more information, see help context 659004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* From() const; //Returns the value of From

    /*
    Property Parent

    For more information, see help context 659002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property To

    For more information, see help context 659005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorFormat* To() const; //Returns the value of To

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT ScaleEffect : public QAxObject
{
public:
    ScaleEffect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 660001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property ByX

    For more information, see help context 660003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double ByX() const; //Returns the value of ByX
    inline void SetByX(double value); //Sets the value of the ByX property

    /*
    Property ByY

    For more information, see help context 660004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double ByY() const; //Returns the value of ByY
    inline void SetByY(double value); //Sets the value of the ByY property

    /*
    Property FromX

    For more information, see help context 660005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double FromX() const; //Returns the value of FromX
    inline void SetFromX(double value); //Sets the value of the FromX property

    /*
    Property FromY

    For more information, see help context 660006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double FromY() const; //Returns the value of FromY
    inline void SetFromY(double value); //Sets the value of the FromY property

    /*
    Property Parent

    For more information, see help context 660002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property ToX

    For more information, see help context 660007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double ToX() const; //Returns the value of ToX
    inline void SetToX(double value); //Sets the value of the ToX property

    /*
    Property ToY

    For more information, see help context 660008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double ToY() const; //Returns the value of ToY
    inline void SetToY(double value); //Sets the value of the ToY property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT RotationEffect : public QAxObject
{
public:
    RotationEffect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 661001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property By

    For more information, see help context 661003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double By() const; //Returns the value of By
    inline void SetBy(double value); //Sets the value of the By property

    /*
    Property From

    For more information, see help context 661004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double From() const; //Returns the value of From
    inline void SetFrom(double value); //Sets the value of the From property

    /*
    Property Parent

    For more information, see help context 661002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property To

    For more information, see help context 661005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double To() const; //Returns the value of To
    inline void SetTo(double value); //Sets the value of the To property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT PropertyEffect : public QAxObject
{
public:
    PropertyEffect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 662001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property From

    For more information, see help context 662005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant From() const; //Returns the value of From
    inline void SetFrom(const QVariant& value); //Sets the value of the From property

    /*
    Property Parent

    For more information, see help context 662002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Points

    For more information, see help context 662004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AnimationPoints* Points() const; //Returns the value of Points

    /*
    Property Property

    For more information, see help context 662003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimProperty Property() const; //Returns the value of Property
    inline void SetProperty(PowerPoint::MsoAnimProperty value); //Sets the value of the Property property

    /*
    Property To

    For more information, see help context 662006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant To() const; //Returns the value of To
    inline void SetTo(const QVariant& value); //Sets the value of the To property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT AnimationPoints : public QAxObject
{
public:
    AnimationPoints(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 663001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Count

    For more information, see help context 501003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Parent

    For more information, see help context 663002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Smooth

    For more information, see help context 663005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Smooth() const; //Returns the value of Smooth
    inline void SetSmooth(Office::MsoTriState value); //Sets the value of the Smooth property

    /*
    Property _NewEnum

    For more information, see help context 501001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    For more information, see help context 663004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AnimationPoint* Add();

    /*
    Method Add

    For more information, see help context 663004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AnimationPoint* Add(int Index);

    /*
    Method Item

    For more information, see help context 663003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AnimationPoint* Item(int Index);

    /*
    Method _Index

    For more information, see help context 501002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant _Index(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT AnimationPoint : public QAxObject
{
public:
    AnimationPoint(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 664001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Formula

    For more information, see help context 664006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Formula() const; //Returns the value of Formula
    inline void SetFormula(const QString& value); //Sets the value of the Formula property

    /*
    Property Parent

    For more information, see help context 664002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Time

    For more information, see help context 664004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Time() const; //Returns the value of Time
    inline void SetTime(double value); //Sets the value of the Time property

    /*
    Property Value

    For more information, see help context 664005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

    /*
    Method Delete

    For more information, see help context 664003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT CanvasShapes : public QAxObject
{
public:
    CanvasShapes(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 1001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Application() const; //Returns the value of Application

    /*
    Property Background

    For more information, see help context 665018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Background() const; //Returns the value of Background

    /*
    Property Count

    For more information, see help context 665002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Creator

    For more information, see help context 1002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property Parent

    For more information, see help context 665001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property _NewEnum

    For more information, see help context 665004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method AddCallout

    For more information, see help context 665005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddCallout(Office::MsoCalloutType Type, double Left, double Top, double Width, double Height);

    /*
    Method AddConnector

    For more information, see help context 665006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddConnector(Office::MsoConnectorType Type, double BeginX, double BeginY, double EndX, double EndY);

    /*
    Method AddCurve

    For more information, see help context 665007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddCurve(const QVariant& SafeArrayOfPoints);

    /*
    Method AddLabel

    For more information, see help context 665008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddLabel(Office::MsoTextOrientation Orientation, double Left, double Top, double Width, double Height);

    /*
    Method AddLine

    For more information, see help context 665009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddLine(double BeginX, double BeginY, double EndX, double EndY);

    /*
    Method AddPicture

    For more information, see help context 665010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top);

    /*
    Method AddPicture

    For more information, see help context 665010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top, double Width);

    /*
    Method AddPicture

    For more information, see help context 665010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top, double Width, double Height);

    /*
    Method AddPolyline

    For more information, see help context 665011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddPolyline(const QVariant& SafeArrayOfPoints);

    /*
    Method AddShape

    For more information, see help context 665012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddShape(Office::MsoAutoShapeType Type, double Left, double Top, double Width, double Height);

    /*
    Method AddTextEffect

    For more information, see help context 665013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddTextEffect(Office::MsoPresetTextEffect PresetTextEffect, const QString& Text, const QString& FontName, double FontSize, Office::MsoTriState FontBold, Office::MsoTriState FontItalic, double Left, double Top);

    /*
    Method AddTextbox

    For more information, see help context 665014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* AddTextbox(Office::MsoTextOrientation Orientation, double Left, double Top, double Width, double Height);

    /*
    Method BuildFreeform

    For more information, see help context 665015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::FreeformBuilder* BuildFreeform(Office::MsoEditingType EditingType, double X1, double Y1);

    /*
    Method Item

    For more information, see help context 665003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* Item(const QVariant& Index);

    /*
    Method Range

    For more information, see help context 665016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Range(const QVariant& Index);

    /*
    Method SelectAll

    For more information, see help context 665017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SelectAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT AutoCorrect : public QAxObject
{
public:
    AutoCorrect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DisplayAutoCorrectOptions

    For more information, see help context 666001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool DisplayAutoCorrectOptions() const; //Returns the value of DisplayAutoCorrectOptions
    inline void SetDisplayAutoCorrectOptions(bool value); //Sets the value of the DisplayAutoCorrectOptions property

    /*
    Property DisplayAutoLayoutOptions

    For more information, see help context 666002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool DisplayAutoLayoutOptions() const; //Returns the value of DisplayAutoLayoutOptions
    inline void SetDisplayAutoLayoutOptions(bool value); //Sets the value of the DisplayAutoLayoutOptions property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Options : public QAxObject
{
public:
    Options(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DisplayPasteOptions

    For more information, see help context 667001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState DisplayPasteOptions() const; //Returns the value of DisplayPasteOptions
    inline void SetDisplayPasteOptions(Office::MsoTriState value); //Sets the value of the DisplayPasteOptions property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT CommandEffect : public QAxObject
{
public:
    CommandEffect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 668001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Command

    For more information, see help context 668004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Command() const; //Returns the value of Command
    inline void SetCommand(const QString& value); //Sets the value of the Command property

    /*
    Property Parent

    For more information, see help context 668002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Type

    For more information, see help context 668003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimCommandType Type() const; //Returns the value of Type
    inline void SetType(PowerPoint::MsoAnimCommandType value); //Sets the value of the Type property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT FilterEffect : public QAxObject
{
public:
    FilterEffect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 669001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Parent

    For more information, see help context 669002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Reveal

    For more information, see help context 669005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Reveal() const; //Returns the value of Reveal
    inline void SetReveal(Office::MsoTriState value); //Sets the value of the Reveal property

    /*
    Property Subtype

    For more information, see help context 669004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimFilterEffectSubtype Subtype() const; //Returns the value of Subtype
    inline void SetSubtype(PowerPoint::MsoAnimFilterEffectSubtype value); //Sets the value of the Subtype property

    /*
    Property Type

    For more information, see help context 669003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimFilterEffectType Type() const; //Returns the value of Type
    inline void SetType(PowerPoint::MsoAnimFilterEffectType value); //Sets the value of the Type property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT SetEffect : public QAxObject
{
public:
    SetEffect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 670001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Parent

    For more information, see help context 670002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Property

    For more information, see help context 670003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::MsoAnimProperty Property() const; //Returns the value of Property
    inline void SetProperty(PowerPoint::MsoAnimProperty value); //Sets the value of the Property property

    /*
    Property To

    For more information, see help context 670004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant To() const; //Returns the value of To
    inline void SetTo(const QVariant& value); //Sets the value of the To property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class POWERPOINT_EXPORT Application : public QAxObject
{
public:
    Application(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{91493441-5a91-11cf-8700-00aa0060263b}");
    }

    Application(_Application *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Active

    For more information, see help context 502033 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Active() const; //Returns the value of Active

    /*
    Property ActivePresentation

    For more information, see help context 502005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* ActivePresentation() const; //Returns the value of ActivePresentation

    /*
    Property ActivePrinter

    For more information, see help context 502017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString ActivePrinter() const; //Returns the value of ActivePrinter

    /*
    Property ActiveWindow

    For more information, see help context 502004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindow* ActiveWindow() const; //Returns the value of ActiveWindow

    /*
    Property AddIns

    For more information, see help context 502019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AddIns* AddIns() const; //Returns the value of AddIns

    /*
    Property AnswerWizard

    For more information, see help context 502035 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::AnswerWizard* AnswerWizard() const; //Returns the value of AnswerWizard

    /*
    Property Assistant

    For more information, see help context 502011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Assistant* Assistant() const; //Returns the value of Assistant

    /*
    Property AutoCorrect

    For more information, see help context 502053 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AutoCorrect* AutoCorrect() const; //Returns the value of AutoCorrect

    /*
    Property AutomationSecurity

    For more information, see help context 502048 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoAutomationSecurity AutomationSecurity() const; //Returns the value of AutomationSecurity
    inline void SetAutomationSecurity(Office::MsoAutomationSecurity value); //Sets the value of the AutomationSecurity property

    /*
    Property Build

    For more information, see help context 502014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Build() const; //Returns the value of Build

    /*
    Property COMAddIns

    For more information, see help context 502036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::COMAddIns* COMAddIns() const; //Returns the value of COMAddIns

    /*
    Property Caption

    For more information, see help context 502010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Caption() const; //Returns the value of Caption
    inline void SetCaption(const QString& value); //Sets the value of the Caption property

    /*
    Property CommandBars

    For more information, see help context 502007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::CommandBars* CommandBars() const; //Returns the value of CommandBars

    /*
    Property Creator

    For more information, see help context 502018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int Creator() const; //Returns the value of Creator

    /*
    Property DefaultWebOptions

    For more information, see help context 502038 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DefaultWebOptions* DefaultWebOptions() const; //Returns the value of DefaultWebOptions

    /*
    Property Dialogs

    For more information, see help context 502003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* Dialogs() const; //Returns the value of Dialogs

    /*
    Property DisplayAlerts

    For more information, see help context 502050 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpAlertLevel DisplayAlerts() const; //Returns the value of DisplayAlerts
    inline void SetDisplayAlerts(PowerPoint::PpAlertLevel value); //Sets the value of the DisplayAlerts property

    /*
    Property DisplayGridLines

    For more information, see help context 502047 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState DisplayGridLines() const; //Returns the value of DisplayGridLines
    inline void SetDisplayGridLines(Office::MsoTriState value); //Sets the value of the DisplayGridLines property

    /*
    Property FeatureInstall

    For more information, see help context 502043 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoFeatureInstall FeatureInstall() const; //Returns the value of FeatureInstall
    inline void SetFeatureInstall(Office::MsoFeatureInstall value); //Sets the value of the FeatureInstall property

    /*
    Property FileFind

    For more information, see help context 502013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::IFind* FileFind() const; //Returns the value of FileFind

    /*
    Property FileSearch

    For more information, see help context 502012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::FileSearch* FileSearch() const; //Returns the value of FileSearch

    /*
    Property HWND

    For more information, see help context 502032 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int HWND() const; //Returns the value of HWND

    /*
    Property Height

    For more information, see help context 502029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property LanguageSettings

    For more information, see help context 502039 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::LanguageSettings* LanguageSettings() const; //Returns the value of LanguageSettings

    /*
    Property Left

    For more information, see help context 502026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Marker

    For more information, see help context 502042 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* Marker() const; //Returns the value of Marker

    /*
    Property MsoDebugOptions

    For more information, see help context 502040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoDebugOptions* MsoDebugOptions() const; //Returns the value of MsoDebugOptions

    /*
    Property Name

    For more information, see help context 502009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property NewPresentation

    For more information, see help context 502049 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::NewFile* NewPresentation() const; //Returns the value of NewPresentation

    /*
    Property OperatingSystem

    For more information, see help context 502016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString OperatingSystem() const; //Returns the value of OperatingSystem

    /*
    Property Options

    For more information, see help context 502054 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Options* Options() const; //Returns the value of Options

    /*
    Property Path

    For more information, see help context 502008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property Presentations

    For more information, see help context 502001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentations* Presentations() const; //Returns the value of Presentations

    /*
    Property ProductCode

    For more information, see help context 502037 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString ProductCode() const; //Returns the value of ProductCode

    /*
    Property ShowStartupDialog

    For more information, see help context 502051 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ShowStartupDialog() const; //Returns the value of ShowStartupDialog
    inline void SetShowStartupDialog(Office::MsoTriState value); //Sets the value of the ShowStartupDialog property

    /*
    Property ShowWindowsInTaskbar

    For more information, see help context 502041 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ShowWindowsInTaskbar() const; //Returns the value of ShowWindowsInTaskbar
    inline void SetShowWindowsInTaskbar(Office::MsoTriState value); //Sets the value of the ShowWindowsInTaskbar property

    /*
    Property SlideShowWindows

    For more information, see help context 502006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowWindows* SlideShowWindows() const; //Returns the value of SlideShowWindows

    /*
    Property Top

    For more information, see help context 502027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property VBE

    For more information, see help context 502020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline VBIDE::VBE* VBE() const; //Returns the value of VBE

    /*
    Property Version

    For more information, see help context 502015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Version() const; //Returns the value of Version

    /*
    Property Visible

    For more information, see help context 502031 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Visible() const; //Returns the value of Visible
    inline void SetVisible(Office::MsoTriState value); //Sets the value of the Visible property

    /*
    Property Width

    For more information, see help context 502028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property WindowState

    For more information, see help context 502030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpWindowState WindowState() const; //Returns the value of WindowState
    inline void SetWindowState(PowerPoint::PpWindowState value); //Sets the value of the WindowState property

    /*
    Property Windows

    For more information, see help context 502002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindows* Windows() const; //Returns the value of Windows

    /*
    Method Activate

    For more information, see help context 502034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Activate();

    /*
    Method FileDialog

    For more information, see help context 502046 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::FileDialog* FileDialog(Office::MsoFileDialogType Type);

    /*
    Method GetOptionFlag

    For more information, see help context 502044 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool GetOptionFlag(int Option);

    /*
    Method GetOptionFlag

    For more information, see help context 502044 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool GetOptionFlag(int Option, bool Persist);

    /*
    Method Help

    For more information, see help context 502021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Help();

    /*
    Method Help

    For more information, see help context 502021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Help(const QString& HelpFile);

    /*
    Method Help

    For more information, see help context 502021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Help(const QString& HelpFile, int ContextID);

    /*
    Method LaunchSpelling

    For more information, see help context 502025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void LaunchSpelling(PowerPoint::DocumentWindow* pWindow);

    /*
    Method PPFileDialog

    For more information, see help context 502024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* PPFileDialog(PowerPoint::PpFileDialogType Type);

    /*
    Method Quit

    For more information, see help context 502022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Quit();

    /*
    Method Run

    For more information, see help context 502023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QVariant Run(const QString& MacroName, QVariantList& safeArrayOfParams);

    /*
    Method SetOptionFlag

    For more information, see help context 502045 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetOptionFlag(int Option, bool State);

    /*
    Method SetOptionFlag

    For more information, see help context 502045 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetOptionFlag(int Option, bool State, bool Persist);

    /*
    Method SetPerfMarker

    For more information, see help context 502052 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetPerfMarker(int Marker);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Global : public QAxObject
{
public:
    Global(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{91493443-5a91-11cf-8700-00aa0060263b}");
    }

    /*
    Property ActivePresentation

    For more information, see help context 503001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentation* ActivePresentation() const; //Returns the value of ActivePresentation

    /*
    Property ActiveWindow

    For more information, see help context 503002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindow* ActiveWindow() const; //Returns the value of ActiveWindow

    /*
    Property AddIns

    For more information, see help context 503003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::AddIns* AddIns() const; //Returns the value of AddIns

    /*
    Property AnswerWizard

    For more information, see help context 503011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::AnswerWizard* AnswerWizard() const; //Returns the value of AnswerWizard

    /*
    Property Application

    For more information, see help context 503004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Assistant

    For more information, see help context 503005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Assistant* Assistant() const; //Returns the value of Assistant

    /*
    Property CommandBars

    For more information, see help context 503010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::CommandBars* CommandBars() const; //Returns the value of CommandBars

    /*
    Property Dialogs

    For more information, see help context 503006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IUnknown* Dialogs() const; //Returns the value of Dialogs

    /*
    Property Presentations

    For more information, see help context 503007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Presentations* Presentations() const; //Returns the value of Presentations

    /*
    Property SlideShowWindows

    For more information, see help context 503008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowWindows* SlideShowWindows() const; //Returns the value of SlideShowWindows

    /*
    Property Windows

    For more information, see help context 503009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindows* Windows() const; //Returns the value of Windows

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Presentation : public QAxObject
{
public:
    Presentation(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Application

    For more information, see help context 583001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property BuiltInDocumentProperties

    For more information, see help context 583020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* BuiltInDocumentProperties() const; //Returns the value of BuiltInDocumentProperties

    /*
    Property ColorSchemes

    For more information, see help context 583013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorSchemes* ColorSchemes() const; //Returns the value of ColorSchemes

    /*
    Property CommandBars

    For more information, see help context 583051 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::CommandBars* CommandBars() const; //Returns the value of CommandBars

    /*
    Property Container

    For more information, see help context 583041 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Container() const; //Returns the value of Container

    /*
    Property CustomDocumentProperties

    For more information, see help context 583021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* CustomDocumentProperties() const; //Returns the value of CustomDocumentProperties

    /*
    Property DefaultLanguageID

    For more information, see help context 583050 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoLanguageID DefaultLanguageID() const; //Returns the value of DefaultLanguageID
    inline void SetDefaultLanguageID(Office::MsoLanguageID value); //Sets the value of the DefaultLanguageID property

    /*
    Property DefaultShape

    For more information, see help context 583019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shape* DefaultShape() const; //Returns the value of DefaultShape

    /*
    Property Designs

    For more information, see help context 583063 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Designs* Designs() const; //Returns the value of Designs

    /*
    Property DisplayComments

    For more information, see help context 583042 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState DisplayComments() const; //Returns the value of DisplayComments
    inline void SetDisplayComments(Office::MsoTriState value); //Sets the value of the DisplayComments property

    /*
    Property DocumentLibraryVersions

    For more information, see help context 583086 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::DocumentLibraryVersions* DocumentLibraryVersions() const; //Returns the value of DocumentLibraryVersions

    /*
    Property EnvelopeVisible

    For more information, see help context 583057 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState EnvelopeVisible() const; //Returns the value of EnvelopeVisible
    inline void SetEnvelopeVisible(Office::MsoTriState value); //Sets the value of the EnvelopeVisible property

    /*
    Property ExtraColors

    For more information, see help context 583014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ExtraColors* ExtraColors() const; //Returns the value of ExtraColors

    /*
    Property FarEastLineBreakLanguage

    For more information, see help context 583048 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage() const; //Returns the value of FarEastLineBreakLanguage
    inline void SetFarEastLineBreakLanguage(Office::MsoFarEastLineBreakLanguageID value); //Sets the value of the FarEastLineBreakLanguage property

    /*
    Property FarEastLineBreakLevel

    For more information, see help context 583043 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpFarEastLineBreakLevel FarEastLineBreakLevel() const; //Returns the value of FarEastLineBreakLevel
    inline void SetFarEastLineBreakLevel(PowerPoint::PpFarEastLineBreakLevel value); //Sets the value of the FarEastLineBreakLevel property

    /*
    Property Fonts

    For more information, see help context 583016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Fonts* Fonts() const; //Returns the value of Fonts

    /*
    Property FullName

    For more information, see help context 583024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString FullName() const; //Returns the value of FullName

    /*
    Property GridDistance

    For more information, see help context 583062 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double GridDistance() const; //Returns the value of GridDistance
    inline void SetGridDistance(double value); //Sets the value of the GridDistance property

    /*
    Property HTMLProject

    For more information, see help context 583054 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::HTMLProject* HTMLProject() const; //Returns the value of HTMLProject

    /*
    Property HandoutMaster

    For more information, see help context 583010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* HandoutMaster() const; //Returns the value of HandoutMaster

    /*
    Property HasRevisionInfo

    For more information, see help context 583072 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpRevisionInfo HasRevisionInfo() const; //Returns the value of HasRevisionInfo

    /*
    Property HasTitleMaster

    For more information, see help context 583005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState HasTitleMaster() const; //Returns the value of HasTitleMaster

    /*
    Property LayoutDirection

    For more information, see help context 583028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpDirection LayoutDirection() const; //Returns the value of LayoutDirection
    inline void SetLayoutDirection(PowerPoint::PpDirection value); //Sets the value of the LayoutDirection property

    /*
    Property Name

    For more information, see help context 583025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property NoLineBreakAfter

    For more information, see help context 583045 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString NoLineBreakAfter() const; //Returns the value of NoLineBreakAfter
    inline void SetNoLineBreakAfter(const QString& value); //Sets the value of the NoLineBreakAfter property

    /*
    Property NoLineBreakBefore

    For more information, see help context 583044 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString NoLineBreakBefore() const; //Returns the value of NoLineBreakBefore
    inline void SetNoLineBreakBefore(const QString& value); //Sets the value of the NoLineBreakBefore property

    /*
    Property NotesMaster

    For more information, see help context 583009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* NotesMaster() const; //Returns the value of NotesMaster

    /*
    Property PageSetup

    For more information, see help context 583012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PageSetup* PageSetup() const; //Returns the value of PageSetup

    /*
    Property Parent

    For more information, see help context 583002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Password

    For more information, see help context 583080 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Password() const; //Returns the value of Password
    inline void SetPassword(const QString& value); //Sets the value of the Password property

    /*
    Property PasswordEncryptionAlgorithm

    For more information, see help context 583076 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString PasswordEncryptionAlgorithm() const; //Returns the value of PasswordEncryptionAlgorithm

    /*
    Property PasswordEncryptionFileProperties

    For more information, see help context 583078 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool PasswordEncryptionFileProperties() const; //Returns the value of PasswordEncryptionFileProperties

    /*
    Property PasswordEncryptionKeyLength

    For more information, see help context 583077 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int PasswordEncryptionKeyLength() const; //Returns the value of PasswordEncryptionKeyLength

    /*
    Property PasswordEncryptionProvider

    For more information, see help context 583075 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString PasswordEncryptionProvider() const; //Returns the value of PasswordEncryptionProvider

    /*
    Property Path

    For more information, see help context 583026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property Permission

    For more information, see help context 583082 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Permission* Permission() const; //Returns the value of Permission

    /*
    Property PrintOptions

    For more information, see help context 583033 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PrintOptions* PrintOptions() const; //Returns the value of PrintOptions

    /*
    Property PublishObjects

    For more information, see help context 583052 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PublishObjects* PublishObjects() const; //Returns the value of PublishObjects

    /*
    Property ReadOnly

    For more information, see help context 583023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState ReadOnly() const; //Returns the value of ReadOnly

    /*
    Property RemovePersonalInformation

    For more information, see help context 583068 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState RemovePersonalInformation() const; //Returns the value of RemovePersonalInformation
    inline void SetRemovePersonalInformation(Office::MsoTriState value); //Sets the value of the RemovePersonalInformation property

    /*
    Property Saved

    For more information, see help context 583027 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState Saved() const; //Returns the value of Saved
    inline void SetSaved(Office::MsoTriState value); //Sets the value of the Saved property

    /*
    Property SharedWorkspace

    For more information, see help context 583083 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::SharedWorkspace* SharedWorkspace() const; //Returns the value of SharedWorkspace

    /*
    Property Signatures

    For more information, see help context 583067 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::SignatureSet* Signatures() const; //Returns the value of Signatures

    /*
    Property SlideMaster

    For more information, see help context 583003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* SlideMaster() const; //Returns the value of SlideMaster

    /*
    Property SlideShowSettings

    For more information, see help context 583015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowSettings* SlideShowSettings() const; //Returns the value of SlideShowSettings

    /*
    Property SlideShowWindow

    For more information, see help context 583047 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowWindow* SlideShowWindow() const; //Returns the value of SlideShowWindow

    /*
    Property Slides

    For more information, see help context 583011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Slides* Slides() const; //Returns the value of Slides

    /*
    Property SnapToGrid

    For more information, see help context 583061 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState SnapToGrid() const; //Returns the value of SnapToGrid
    inline void SetSnapToGrid(Office::MsoTriState value); //Sets the value of the SnapToGrid property

    /*
    Property Sync

    For more information, see help context 583084 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Sync* Sync() const; //Returns the value of Sync

    /*
    Property Tags

    For more information, see help context 583018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Tags* Tags() const; //Returns the value of Tags

    /*
    Property TemplateName

    For more information, see help context 583008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString TemplateName() const; //Returns the value of TemplateName

    /*
    Property TitleMaster

    For more information, see help context 583004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* TitleMaster() const; //Returns the value of TitleMaster

    /*
    Property VBASigned

    For more information, see help context 583059 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState VBASigned() const; //Returns the value of VBASigned

    /*
    Property VBProject

    For more information, see help context 583022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline VBIDE::VBProject* VBProject() const; //Returns the value of VBProject

    /*
    Property WebOptions

    For more information, see help context 583053 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::WebOptions* WebOptions() const; //Returns the value of WebOptions

    /*
    Property Windows

    For more information, see help context 583017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindows* Windows() const; //Returns the value of Windows

    /*
    Property WritePassword

    For more information, see help context 583081 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString WritePassword() const; //Returns the value of WritePassword
    inline void SetWritePassword(const QString& value); //Sets the value of the WritePassword property

    /*
    Method AddBaseline

    For more information, see help context 583073 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddBaseline();

    /*
    Method AddBaseline

    For more information, see help context 583073 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddBaseline(const QString& FileName);

    /*
    Method AddTitleMaster

    For more information, see help context 583006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* AddTitleMaster();

    /*
    Method AddToFavorites

    For more information, see help context 583031 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void AddToFavorites();

    /*
    Method ApplyTemplate

    For more information, see help context 583007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ApplyTemplate(const QString& FileName);

    /*
    Method CanCheckIn

    For more information, see help context 583066 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool CanCheckIn();

    /*
    Method CheckIn

    For more information, see help context 583065 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CheckIn();

    /*
    Method CheckIn

    For more information, see help context 583065 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CheckIn(bool SaveChanges);

    /*
    Method CheckIn

    For more information, see help context 583065 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CheckIn(bool SaveChanges, const QVariant& Comments);

    /*
    Method CheckIn

    For more information, see help context 583065 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void CheckIn(bool SaveChanges, const QVariant& Comments, const QVariant& MakePublic);

    /*
    Method Close

    For more information, see help context 583039 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Close();

    /*
    Method EndReview

    For more information, see help context 583071 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void EndReview();

    /*
    Method Export

    For more information, see help context 583038 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& Path, const QString& FilterName);

    /*
    Method Export

    For more information, see help context 583038 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& Path, const QString& FilterName, int ScaleWidth);

    /*
    Method Export

    For more information, see help context 583038 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& Path, const QString& FilterName, int ScaleWidth, int ScaleHeight);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo, Office::MsoExtraInfoMethod Method);

    /*
    Method FollowHyperlink

    For more information, see help context 583030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo, Office::MsoExtraInfoMethod Method, const QString& HeaderInfo);

    /*
    Method MakeIntoTemplate

    For more information, see help context 583056 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void MakeIntoTemplate(Office::MsoTriState IsDesignTemplate);

    /*
    Method Merge

    For more information, see help context 583064 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Merge(const QString& Path);

    /*
    Method NewWindow

    For more information, see help context 583029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::DocumentWindow* NewWindow();

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut();

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From);

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To);

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To, const QString& PrintToFile);

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To, const QString& PrintToFile, int Copies);

    /*
    Method PrintOut

    For more information, see help context 583034 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void PrintOut(int From, int To, const QString& PrintToFile, int Copies, Office::MsoTriState Collate);

    /*
    Method ReloadAs

    For more information, see help context 583055 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ReloadAs(Office::MsoEncoding cp);

    /*
    Method RemoveBaseline

    For more information, see help context 583074 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void RemoveBaseline();

    /*
    Method ReplyWithChanges

    For more information, see help context 583070 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ReplyWithChanges();

    /*
    Method ReplyWithChanges

    For more information, see help context 583070 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ReplyWithChanges(bool ShowMessage);

    /*
    Method Save

    For more information, see help context 583035 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Save();

    /*
    Method SaveAs

    For more information, see help context 583036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveAs(const QString& FileName);

    /*
    Method SaveAs

    For more information, see help context 583036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat);

    /*
    Method SaveAs

    For more information, see help context 583036 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat, Office::MsoTriState EmbedTrueTypeFonts);

    /*
    Method SaveCopyAs

    For more information, see help context 583037 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveCopyAs(const QString& FileName);

    /*
    Method SaveCopyAs

    For more information, see help context 583037 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveCopyAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat);

    /*
    Method SaveCopyAs

    For more information, see help context 583037 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SaveCopyAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat, Office::MsoTriState EmbedTrueTypeFonts);

    /*
    Method SendFaxOverInternet

    For more information, see help context 583085 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendFaxOverInternet();

    /*
    Method SendFaxOverInternet

    For more information, see help context 583085 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendFaxOverInternet(const QString& Recipients);

    /*
    Method SendFaxOverInternet

    For more information, see help context 583085 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendFaxOverInternet(const QString& Recipients, const QString& Subject);

    /*
    Method SendFaxOverInternet

    For more information, see help context 583085 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendFaxOverInternet(const QString& Recipients, const QString& Subject, bool ShowMessage);

    /*
    Method SendForReview

    For more information, see help context 583069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendForReview();

    /*
    Method SendForReview

    For more information, see help context 583069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendForReview(const QString& Recipients);

    /*
    Method SendForReview

    For more information, see help context 583069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendForReview(const QString& Recipients, const QString& Subject);

    /*
    Method SendForReview

    For more information, see help context 583069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendForReview(const QString& Recipients, const QString& Subject, bool ShowMessage);

    /*
    Method SendForReview

    For more information, see help context 583069 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SendForReview(const QString& Recipients, const QString& Subject, bool ShowMessage, const QVariant& IncludeAttachment);

    /*
    Method SetPasswordEncryptionOptions

    For more information, see help context 583079 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetPasswordEncryptionOptions(const QString& PasswordEncryptionProvider, const QString& PasswordEncryptionAlgorithm, int PasswordEncryptionKeyLength, bool PasswordEncryptionFileProperties);

    /*
    Method SetUndoText

    For more information, see help context 583040 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void SetUndoText(const QString& Text);

    /*
    Method Unused

    For more information, see help context 583032 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Unused();

    /*
    Method UpdateLinks

    For more information, see help context 583046 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void UpdateLinks();

    /*
    Method WebPagePreview

    For more information, see help context 583049 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void WebPagePreview();

    /*
    Method sblt

    For more information, see help context 583058 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void sblt(const QString& s);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Slide : public QAxObject
{
public:
    Slide(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    Slide(_Slide *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Application

    For more information, see help context 531001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Background

    For more information, see help context 531007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Background() const; //Returns the value of Background

    /*
    Property ColorScheme

    For more information, see help context 531006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorScheme* ColorScheme() const; //Returns the value of ColorScheme
    inline void SetColorScheme(PowerPoint::ColorScheme* value); //Sets the value of the ColorScheme property

    /*
    Property Comments

    For more information, see help context 531028 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Comments* Comments() const; //Returns the value of Comments

    /*
    Property Design

    For more information, see help context 531029 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Design() const; //Returns the value of Design
    inline void SetDesign(PowerPoint::Design* value); //Sets the value of the Design property

    /*
    Property DisplayMasterShapes

    For more information, see help context 531020 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState DisplayMasterShapes() const; //Returns the value of DisplayMasterShapes
    inline void SetDisplayMasterShapes(Office::MsoTriState value); //Sets the value of the DisplayMasterShapes property

    /*
    Property FollowMasterBackground

    For more information, see help context 531021 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::MsoTriState FollowMasterBackground() const; //Returns the value of FollowMasterBackground
    inline void SetFollowMasterBackground(Office::MsoTriState value); //Sets the value of the FollowMasterBackground property

    /*
    Property HeadersFooters

    For more information, see help context 531004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::HeadersFooters* HeadersFooters() const; //Returns the value of HeadersFooters

    /*
    Property Hyperlinks

    For more information, see help context 531024 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Hyperlinks* Hyperlinks() const; //Returns the value of Hyperlinks

    /*
    Property Layout

    For more information, see help context 531014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::PpSlideLayout Layout() const; //Returns the value of Layout
    inline void SetLayout(PowerPoint::PpSlideLayout value); //Sets the value of the Layout property

    /*
    Property Master

    For more information, see help context 531023 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::_Master* Master() const; //Returns the value of Master

    /*
    Property Name

    For more information, see help context 531008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NotesPage

    For more information, see help context 531022 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideRange* NotesPage() const; //Returns the value of NotesPage

    /*
    Property Parent

    For more information, see help context 531002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property PrintSteps

    For more information, see help context 531010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int PrintSteps() const; //Returns the value of PrintSteps

    /*
    Property Scripts

    For more information, see help context 531026 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Scripts* Scripts() const; //Returns the value of Scripts

    /*
    Property Shapes

    For more information, see help context 531003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shapes* Shapes() const; //Returns the value of Shapes

    /*
    Property SlideID

    For more information, see help context 531009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int SlideID() const; //Returns the value of SlideID

    /*
    Property SlideIndex

    For more information, see help context 531018 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int SlideIndex() const; //Returns the value of SlideIndex

    /*
    Property SlideNumber

    For more information, see help context 531019 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int SlideNumber() const; //Returns the value of SlideNumber

    /*
    Property SlideShowTransition

    For more information, see help context 531005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowTransition* SlideShowTransition() const; //Returns the value of SlideShowTransition

    /*
    Property Tags

    For more information, see help context 531017 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Tags* Tags() const; //Returns the value of Tags

    /*
    Property TimeLine

    For more information, see help context 531031 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TimeLine* TimeLine() const; //Returns the value of TimeLine

    /*
    Method ApplyTemplate

    For more information, see help context 531032 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void ApplyTemplate(const QString& FileName);

    /*
    Method Copy

    For more information, see help context 531013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Copy();

    /*
    Method Cut

    For more information, see help context 531012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Cut();

    /*
    Method Delete

    For more information, see help context 531016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

    /*
    Method Duplicate

    For more information, see help context 531015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideRange* Duplicate();

    /*
    Method Export

    For more information, see help context 531025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& FileName, const QString& FilterName);

    /*
    Method Export

    For more information, see help context 531025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& FileName, const QString& FilterName, int ScaleWidth);

    /*
    Method Export

    For more information, see help context 531025 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Export(const QString& FileName, const QString& FilterName, int ScaleWidth, int ScaleHeight);

    /*
    Method MoveTo

    For more information, see help context 531030 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void MoveTo(int toPos);

    /*
    Method Select

    For more information, see help context 531011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Select();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT OLEControl : public QAxObject
{
public:
    OLEControl(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{91493446-5a91-11cf-8700-00aa0060263b}");
    }

    /*
    Property AltHTML

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString AltHTML() const; //Returns the value of AltHTML
    inline void SetAltHTML(const QString& value); //Sets the value of the AltHTML property

    /*
    Property Height

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Left

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    For more information, see help context 618003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Top

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    For more information, see help context 618001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property ZOrderPosition

    For more information, see help context 618002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline int ZOrderPosition() const; //Returns the value of ZOrderPosition

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT Master : public QAxObject
{
public:
    Master(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    Master(_Master *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Application

    For more information, see help context 533001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Application* Application() const; //Returns the value of Application

    /*
    Property Background

    For more information, see help context 533006 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ShapeRange* Background() const; //Returns the value of Background

    /*
    Property ColorScheme

    For more information, see help context 533005 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::ColorScheme* ColorScheme() const; //Returns the value of ColorScheme
    inline void SetColorScheme(PowerPoint::ColorScheme* value); //Sets the value of the ColorScheme property

    /*
    Property Design

    For more information, see help context 533014 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Design* Design() const; //Returns the value of Design

    /*
    Property HeadersFooters

    For more information, see help context 533004 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::HeadersFooters* HeadersFooters() const; //Returns the value of HeadersFooters

    /*
    Property Height

    For more information, see help context 533009 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Height() const; //Returns the value of Height

    /*
    Property Hyperlinks

    For more information, see help context 533012 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Hyperlinks* Hyperlinks() const; //Returns the value of Hyperlinks

    /*
    Property Name

    For more information, see help context 533007 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    For more information, see help context 533002 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline IDispatch* Parent() const; //Returns the value of Parent

    /*
    Property Scripts

    For more information, see help context 533013 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline Office::Scripts* Scripts() const; //Returns the value of Scripts

    /*
    Property Shapes

    For more information, see help context 533003 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::Shapes* Shapes() const; //Returns the value of Shapes

    /*
    Property SlideShowTransition

    For more information, see help context 533016 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::SlideShowTransition* SlideShowTransition() const; //Returns the value of SlideShowTransition

    /*
    Property TextStyles

    For more information, see help context 533011 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TextStyles* TextStyles() const; //Returns the value of TextStyles

    /*
    Property TimeLine

    For more information, see help context 533015 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline PowerPoint::TimeLine* TimeLine() const; //Returns the value of TimeLine

    /*
    Property Width

    For more information, see help context 533010 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline double Width() const; //Returns the value of Width

    /*
    Method Delete

    For more information, see help context 533008 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void Delete();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class POWERPOINT_EXPORT PowerRex : public QAxObject
{
public:
    PowerRex(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{91493448-5a91-11cf-8700-00aa0060263b}");
    }

    /*
    Method OnAsfEncoderEvent

    For more information, see help context 639001 in c:\Program Files\Microsoft Office\OFFICE11\VBAPP10.CHM.
    */
    inline void OnAsfEncoderEvent(const QVariant& erorCode, const QVariant& bstrErrorDesc);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_POWERPOINT_NOINLINES
inline int Collection::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* Collection::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline QVariant Collection::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}


inline Office::MsoTriState _Application::Active() const
{
    QVariant qax_result = property("Active");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::Presentation* _Application::ActivePresentation() const
{
    PowerPoint::Presentation* qax_pointer = 0;
    qRegisterMetaType("Presentation*", &qax_pointer);
    qRegisterMetaType("Presentation", qax_pointer);
    QVariant qax_result = property("ActivePresentation");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Presentation**)qax_result.constData();
}

inline QString _Application::ActivePrinter() const
{
    QVariant qax_result = property("ActivePrinter");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::DocumentWindow* _Application::ActiveWindow() const
{
    PowerPoint::DocumentWindow* qax_pointer = 0;
    qRegisterMetaType("DocumentWindow*", &qax_pointer);
    qRegisterMetaType("DocumentWindow", qax_pointer);
    QVariant qax_result = property("ActiveWindow");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DocumentWindow**)qax_result.constData();
}

inline PowerPoint::AddIns* _Application::AddIns() const
{
    PowerPoint::AddIns* qax_pointer = 0;
    qRegisterMetaType("AddIns*", &qax_pointer);
    qRegisterMetaType("AddIns", qax_pointer);
    QVariant qax_result = property("AddIns");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::AddIns**)qax_result.constData();
}

inline Office::AnswerWizard* _Application::AnswerWizard() const
{
    Office::AnswerWizard* qax_pointer = 0;
    qRegisterMetaType("Office::AnswerWizard*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::AnswerWizard", qax_pointer);
#endif
    QVariant qax_result = property("AnswerWizard");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::AnswerWizard**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline Office::Assistant* _Application::Assistant() const
{
    Office::Assistant* qax_pointer = 0;
    qRegisterMetaType("Office::Assistant*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Assistant", qax_pointer);
#endif
    QVariant qax_result = property("Assistant");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Assistant**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::AutoCorrect* _Application::AutoCorrect() const
{
    PowerPoint::AutoCorrect* qax_pointer = 0;
    qRegisterMetaType("AutoCorrect*", &qax_pointer);
    qRegisterMetaType("AutoCorrect", qax_pointer);
    QVariant qax_result = property("AutoCorrect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::AutoCorrect**)qax_result.constData();
}

inline Office::MsoAutomationSecurity _Application::AutomationSecurity() const
{
    QVariant qax_result = property("AutomationSecurity");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoAutomationSecurity*)qax_result.constData();
}
inline void _Application::SetAutomationSecurity(Office::MsoAutomationSecurity value){ setProperty("AutomationSecurity", QVariant(value)); }

inline QString _Application::Build() const
{
    QVariant qax_result = property("Build");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::COMAddIns* _Application::COMAddIns() const
{
    Office::COMAddIns* qax_pointer = 0;
    qRegisterMetaType("Office::COMAddIns*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::COMAddIns", qax_pointer);
#endif
    QVariant qax_result = property("COMAddIns");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::COMAddIns**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline QString _Application::Caption() const
{
    QVariant qax_result = property("Caption");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Application::SetCaption(const QString& value){ setProperty("Caption", QVariant(value)); }

inline Office::CommandBars* _Application::CommandBars() const
{
    Office::CommandBars* qax_pointer = 0;
    qRegisterMetaType("Office::CommandBars*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::CommandBars", qax_pointer);
#endif
    QVariant qax_result = property("CommandBars");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::CommandBars**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline int _Application::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::DefaultWebOptions* _Application::DefaultWebOptions() const
{
    PowerPoint::DefaultWebOptions* qax_pointer = 0;
    qRegisterMetaType("DefaultWebOptions*", &qax_pointer);
    qRegisterMetaType("DefaultWebOptions", qax_pointer);
    QVariant qax_result = property("DefaultWebOptions");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DefaultWebOptions**)qax_result.constData();
}

inline IUnknown* _Application::Dialogs() const
{
    QVariant qax_result = property("Dialogs");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::PpAlertLevel _Application::DisplayAlerts() const
{
    QVariant qax_result = property("DisplayAlerts");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpAlertLevel*)qax_result.constData();
}
inline void _Application::SetDisplayAlerts(PowerPoint::PpAlertLevel value){ setProperty("DisplayAlerts", QVariant(value)); }

inline Office::MsoTriState _Application::DisplayGridLines() const
{
    QVariant qax_result = property("DisplayGridLines");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void _Application::SetDisplayGridLines(Office::MsoTriState value){ setProperty("DisplayGridLines", QVariant(value)); }

inline Office::MsoFeatureInstall _Application::FeatureInstall() const
{
    QVariant qax_result = property("FeatureInstall");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoFeatureInstall*)qax_result.constData();
}
inline void _Application::SetFeatureInstall(Office::MsoFeatureInstall value){ setProperty("FeatureInstall", QVariant(value)); }

inline Office::IFind* _Application::FileFind() const
{
    Office::IFind* qax_pointer = 0;
    qRegisterMetaType("Office::IFind*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::IFind", qax_pointer);
#endif
    QVariant qax_result = property("FileFind");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::IFind**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline Office::FileSearch* _Application::FileSearch() const
{
    Office::FileSearch* qax_pointer = 0;
    qRegisterMetaType("Office::FileSearch*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::FileSearch", qax_pointer);
#endif
    QVariant qax_result = property("FileSearch");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::FileSearch**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline int _Application::HWND() const
{
    QVariant qax_result = property("HWND");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double _Application::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void _Application::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline Office::LanguageSettings* _Application::LanguageSettings() const
{
    Office::LanguageSettings* qax_pointer = 0;
    qRegisterMetaType("Office::LanguageSettings*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::LanguageSettings", qax_pointer);
#endif
    QVariant qax_result = property("LanguageSettings");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::LanguageSettings**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline double _Application::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void _Application::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline IUnknown* _Application::Marker() const
{
    QVariant qax_result = property("Marker");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline Office::MsoDebugOptions* _Application::MsoDebugOptions() const
{
    Office::MsoDebugOptions* qax_pointer = 0;
    qRegisterMetaType("Office::MsoDebugOptions*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::MsoDebugOptions", qax_pointer);
#endif
    QVariant qax_result = property("MsoDebugOptions");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::MsoDebugOptions**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline QString _Application::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::NewFile* _Application::NewPresentation() const
{
    Office::NewFile* qax_pointer = 0;
    qRegisterMetaType("Office::NewFile*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::NewFile", qax_pointer);
#endif
    QVariant qax_result = property("NewPresentation");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::NewFile**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline QString _Application::OperatingSystem() const
{
    QVariant qax_result = property("OperatingSystem");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::Options* _Application::Options() const
{
    PowerPoint::Options* qax_pointer = 0;
    qRegisterMetaType("Options*", &qax_pointer);
    qRegisterMetaType("Options", qax_pointer);
    QVariant qax_result = property("Options");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Options**)qax_result.constData();
}

inline QString _Application::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::Presentations* _Application::Presentations() const
{
    PowerPoint::Presentations* qax_pointer = 0;
    qRegisterMetaType("Presentations*", &qax_pointer);
    qRegisterMetaType("Presentations", qax_pointer);
    QVariant qax_result = property("Presentations");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Presentations**)qax_result.constData();
}

inline QString _Application::ProductCode() const
{
    QVariant qax_result = property("ProductCode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::MsoTriState _Application::ShowStartupDialog() const
{
    QVariant qax_result = property("ShowStartupDialog");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void _Application::SetShowStartupDialog(Office::MsoTriState value){ setProperty("ShowStartupDialog", QVariant(value)); }

inline Office::MsoTriState _Application::ShowWindowsInTaskbar() const
{
    QVariant qax_result = property("ShowWindowsInTaskbar");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void _Application::SetShowWindowsInTaskbar(Office::MsoTriState value){ setProperty("ShowWindowsInTaskbar", QVariant(value)); }

inline PowerPoint::SlideShowWindows* _Application::SlideShowWindows() const
{
    PowerPoint::SlideShowWindows* qax_pointer = 0;
    qRegisterMetaType("SlideShowWindows*", &qax_pointer);
    qRegisterMetaType("SlideShowWindows", qax_pointer);
    QVariant qax_result = property("SlideShowWindows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowWindows**)qax_result.constData();
}

inline double _Application::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void _Application::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline VBIDE::VBE* _Application::VBE() const
{
    VBIDE::VBE* qax_pointer = 0;
    qRegisterMetaType("VBIDE::VBE*", &qax_pointer);
#ifdef QAX_DUMPCPP_VBIDE_H
    qRegisterMetaType("VBIDE::VBE", qax_pointer);
#endif
    QVariant qax_result = property("VBE");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_VBIDE_H
    return *(VBIDE::VBE**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline QString _Application::Version() const
{
    QVariant qax_result = property("Version");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::MsoTriState _Application::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void _Application::SetVisible(Office::MsoTriState value){ setProperty("Visible", QVariant(value)); }

inline double _Application::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void _Application::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline PowerPoint::PpWindowState _Application::WindowState() const
{
    QVariant qax_result = property("WindowState");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpWindowState*)qax_result.constData();
}
inline void _Application::SetWindowState(PowerPoint::PpWindowState value){ setProperty("WindowState", QVariant(value)); }

inline PowerPoint::DocumentWindows* _Application::Windows() const
{
    PowerPoint::DocumentWindows* qax_pointer = 0;
    qRegisterMetaType("DocumentWindows*", &qax_pointer);
    qRegisterMetaType("DocumentWindows", qax_pointer);
    QVariant qax_result = property("Windows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DocumentWindows**)qax_result.constData();
}

inline void _Application::Activate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline Office::FileDialog* _Application::FileDialog(Office::MsoFileDialogType Type)
{
    Office::FileDialog* qax_result = 0;
    qRegisterMetaType("Office::FileDialog*", &qax_result);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::FileDialog", qax_result);
#endif
    void *_a[] = {(void*)&qax_result, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool _Application::GetOptionFlag(int Option)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Option};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool _Application::GetOptionFlag(int Option, bool Persist)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Option, (void*)&Persist};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void _Application::Help()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void _Application::Help(const QString& HelpFile)
{
    void *_a[] = {0, (void*)&HelpFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void _Application::Help(const QString& HelpFile, int ContextID)
{
    void *_a[] = {0, (void*)&HelpFile, (void*)&ContextID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void _Application::LaunchSpelling(PowerPoint::DocumentWindow* pWindow)
{
    void *_a[] = {0, (void*)&pWindow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline IUnknown* _Application::PPFileDialog(PowerPoint::PpFileDialogType Type)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void _Application::Quit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline QVariant _Application::Run(const QString& MacroName, QVariantList& safeArrayOfParams)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MacroName, (void*)&safeArrayOfParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void _Application::SetOptionFlag(int Option, bool State)
{
    void *_a[] = {0, (void*)&Option, (void*)&State};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void _Application::SetOptionFlag(int Option, bool State, bool Persist)
{
    void *_a[] = {0, (void*)&Option, (void*)&State, (void*)&Persist};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void _Application::SetPerfMarker(int Marker)
{
    void *_a[] = {0, (void*)&Marker};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}


inline PowerPoint::Presentation* _Global::ActivePresentation() const
{
    PowerPoint::Presentation* qax_pointer = 0;
    qRegisterMetaType("Presentation*", &qax_pointer);
    qRegisterMetaType("Presentation", qax_pointer);
    QVariant qax_result = property("ActivePresentation");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Presentation**)qax_result.constData();
}

inline PowerPoint::DocumentWindow* _Global::ActiveWindow() const
{
    PowerPoint::DocumentWindow* qax_pointer = 0;
    qRegisterMetaType("DocumentWindow*", &qax_pointer);
    qRegisterMetaType("DocumentWindow", qax_pointer);
    QVariant qax_result = property("ActiveWindow");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DocumentWindow**)qax_result.constData();
}

inline PowerPoint::AddIns* _Global::AddIns() const
{
    PowerPoint::AddIns* qax_pointer = 0;
    qRegisterMetaType("AddIns*", &qax_pointer);
    qRegisterMetaType("AddIns", qax_pointer);
    QVariant qax_result = property("AddIns");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::AddIns**)qax_result.constData();
}

inline Office::AnswerWizard* _Global::AnswerWizard() const
{
    Office::AnswerWizard* qax_pointer = 0;
    qRegisterMetaType("Office::AnswerWizard*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::AnswerWizard", qax_pointer);
#endif
    QVariant qax_result = property("AnswerWizard");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::AnswerWizard**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::Application* _Global::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline Office::Assistant* _Global::Assistant() const
{
    Office::Assistant* qax_pointer = 0;
    qRegisterMetaType("Office::Assistant*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Assistant", qax_pointer);
#endif
    QVariant qax_result = property("Assistant");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Assistant**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline Office::CommandBars* _Global::CommandBars() const
{
    Office::CommandBars* qax_pointer = 0;
    qRegisterMetaType("Office::CommandBars*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::CommandBars", qax_pointer);
#endif
    QVariant qax_result = property("CommandBars");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::CommandBars**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline IUnknown* _Global::Dialogs() const
{
    QVariant qax_result = property("Dialogs");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Presentations* _Global::Presentations() const
{
    PowerPoint::Presentations* qax_pointer = 0;
    qRegisterMetaType("Presentations*", &qax_pointer);
    qRegisterMetaType("Presentations", qax_pointer);
    QVariant qax_result = property("Presentations");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Presentations**)qax_result.constData();
}

inline PowerPoint::SlideShowWindows* _Global::SlideShowWindows() const
{
    PowerPoint::SlideShowWindows* qax_pointer = 0;
    qRegisterMetaType("SlideShowWindows*", &qax_pointer);
    qRegisterMetaType("SlideShowWindows", qax_pointer);
    QVariant qax_result = property("SlideShowWindows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowWindows**)qax_result.constData();
}

inline PowerPoint::DocumentWindows* _Global::Windows() const
{
    PowerPoint::DocumentWindows* qax_pointer = 0;
    qRegisterMetaType("DocumentWindows*", &qax_pointer);
    qRegisterMetaType("DocumentWindows", qax_pointer);
    QVariant qax_result = property("Windows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DocumentWindows**)qax_result.constData();
}


inline Office::MsoTriState Application::Active() const
{
    QVariant qax_result = property("Active");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::Presentation* Application::ActivePresentation() const
{
    PowerPoint::Presentation* qax_pointer = 0;
    qRegisterMetaType("Presentation*", &qax_pointer);
    qRegisterMetaType("Presentation", qax_pointer);
    QVariant qax_result = property("ActivePresentation");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Presentation**)qax_result.constData();
}

inline QString Application::ActivePrinter() const
{
    QVariant qax_result = property("ActivePrinter");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::DocumentWindow* Application::ActiveWindow() const
{
    PowerPoint::DocumentWindow* qax_pointer = 0;
    qRegisterMetaType("DocumentWindow*", &qax_pointer);
    qRegisterMetaType("DocumentWindow", qax_pointer);
    QVariant qax_result = property("ActiveWindow");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DocumentWindow**)qax_result.constData();
}

inline PowerPoint::AddIns* Application::AddIns() const
{
    PowerPoint::AddIns* qax_pointer = 0;
    qRegisterMetaType("AddIns*", &qax_pointer);
    qRegisterMetaType("AddIns", qax_pointer);
    QVariant qax_result = property("AddIns");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::AddIns**)qax_result.constData();
}

inline Office::AnswerWizard* Application::AnswerWizard() const
{
    Office::AnswerWizard* qax_pointer = 0;
    qRegisterMetaType("Office::AnswerWizard*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::AnswerWizard", qax_pointer);
#endif
    QVariant qax_result = property("AnswerWizard");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::AnswerWizard**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline Office::Assistant* Application::Assistant() const
{
    Office::Assistant* qax_pointer = 0;
    qRegisterMetaType("Office::Assistant*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Assistant", qax_pointer);
#endif
    QVariant qax_result = property("Assistant");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Assistant**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::AutoCorrect* Application::AutoCorrect() const
{
    PowerPoint::AutoCorrect* qax_pointer = 0;
    qRegisterMetaType("AutoCorrect*", &qax_pointer);
    qRegisterMetaType("AutoCorrect", qax_pointer);
    QVariant qax_result = property("AutoCorrect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::AutoCorrect**)qax_result.constData();
}

inline Office::MsoAutomationSecurity Application::AutomationSecurity() const
{
    QVariant qax_result = property("AutomationSecurity");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoAutomationSecurity*)qax_result.constData();
}
inline void Application::SetAutomationSecurity(Office::MsoAutomationSecurity value){ setProperty("AutomationSecurity", QVariant(value)); }

inline QString Application::Build() const
{
    QVariant qax_result = property("Build");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::COMAddIns* Application::COMAddIns() const
{
    Office::COMAddIns* qax_pointer = 0;
    qRegisterMetaType("Office::COMAddIns*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::COMAddIns", qax_pointer);
#endif
    QVariant qax_result = property("COMAddIns");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::COMAddIns**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline QString Application::Caption() const
{
    QVariant qax_result = property("Caption");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Application::SetCaption(const QString& value){ setProperty("Caption", QVariant(value)); }

inline Office::CommandBars* Application::CommandBars() const
{
    Office::CommandBars* qax_pointer = 0;
    qRegisterMetaType("Office::CommandBars*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::CommandBars", qax_pointer);
#endif
    QVariant qax_result = property("CommandBars");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::CommandBars**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline int Application::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::DefaultWebOptions* Application::DefaultWebOptions() const
{
    PowerPoint::DefaultWebOptions* qax_pointer = 0;
    qRegisterMetaType("DefaultWebOptions*", &qax_pointer);
    qRegisterMetaType("DefaultWebOptions", qax_pointer);
    QVariant qax_result = property("DefaultWebOptions");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DefaultWebOptions**)qax_result.constData();
}

inline IUnknown* Application::Dialogs() const
{
    QVariant qax_result = property("Dialogs");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::PpAlertLevel Application::DisplayAlerts() const
{
    QVariant qax_result = property("DisplayAlerts");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpAlertLevel*)qax_result.constData();
}
inline void Application::SetDisplayAlerts(PowerPoint::PpAlertLevel value){ setProperty("DisplayAlerts", QVariant(value)); }

inline Office::MsoTriState Application::DisplayGridLines() const
{
    QVariant qax_result = property("DisplayGridLines");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Application::SetDisplayGridLines(Office::MsoTriState value){ setProperty("DisplayGridLines", QVariant(value)); }

inline Office::MsoFeatureInstall Application::FeatureInstall() const
{
    QVariant qax_result = property("FeatureInstall");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoFeatureInstall*)qax_result.constData();
}
inline void Application::SetFeatureInstall(Office::MsoFeatureInstall value){ setProperty("FeatureInstall", QVariant(value)); }

inline Office::IFind* Application::FileFind() const
{
    Office::IFind* qax_pointer = 0;
    qRegisterMetaType("Office::IFind*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::IFind", qax_pointer);
#endif
    QVariant qax_result = property("FileFind");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::IFind**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline Office::FileSearch* Application::FileSearch() const
{
    Office::FileSearch* qax_pointer = 0;
    qRegisterMetaType("Office::FileSearch*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::FileSearch", qax_pointer);
#endif
    QVariant qax_result = property("FileSearch");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::FileSearch**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline int Application::HWND() const
{
    QVariant qax_result = property("HWND");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double Application::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Application::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline Office::LanguageSettings* Application::LanguageSettings() const
{
    Office::LanguageSettings* qax_pointer = 0;
    qRegisterMetaType("Office::LanguageSettings*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::LanguageSettings", qax_pointer);
#endif
    QVariant qax_result = property("LanguageSettings");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::LanguageSettings**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline double Application::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Application::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline IUnknown* Application::Marker() const
{
    QVariant qax_result = property("Marker");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline Office::MsoDebugOptions* Application::MsoDebugOptions() const
{
    Office::MsoDebugOptions* qax_pointer = 0;
    qRegisterMetaType("Office::MsoDebugOptions*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::MsoDebugOptions", qax_pointer);
#endif
    QVariant qax_result = property("MsoDebugOptions");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::MsoDebugOptions**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline QString Application::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::NewFile* Application::NewPresentation() const
{
    Office::NewFile* qax_pointer = 0;
    qRegisterMetaType("Office::NewFile*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::NewFile", qax_pointer);
#endif
    QVariant qax_result = property("NewPresentation");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::NewFile**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline QString Application::OperatingSystem() const
{
    QVariant qax_result = property("OperatingSystem");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::Options* Application::Options() const
{
    PowerPoint::Options* qax_pointer = 0;
    qRegisterMetaType("Options*", &qax_pointer);
    qRegisterMetaType("Options", qax_pointer);
    QVariant qax_result = property("Options");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Options**)qax_result.constData();
}

inline QString Application::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::Presentations* Application::Presentations() const
{
    PowerPoint::Presentations* qax_pointer = 0;
    qRegisterMetaType("Presentations*", &qax_pointer);
    qRegisterMetaType("Presentations", qax_pointer);
    QVariant qax_result = property("Presentations");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Presentations**)qax_result.constData();
}

inline QString Application::ProductCode() const
{
    QVariant qax_result = property("ProductCode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::MsoTriState Application::ShowStartupDialog() const
{
    QVariant qax_result = property("ShowStartupDialog");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Application::SetShowStartupDialog(Office::MsoTriState value){ setProperty("ShowStartupDialog", QVariant(value)); }

inline Office::MsoTriState Application::ShowWindowsInTaskbar() const
{
    QVariant qax_result = property("ShowWindowsInTaskbar");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Application::SetShowWindowsInTaskbar(Office::MsoTriState value){ setProperty("ShowWindowsInTaskbar", QVariant(value)); }

inline PowerPoint::SlideShowWindows* Application::SlideShowWindows() const
{
    PowerPoint::SlideShowWindows* qax_pointer = 0;
    qRegisterMetaType("SlideShowWindows*", &qax_pointer);
    qRegisterMetaType("SlideShowWindows", qax_pointer);
    QVariant qax_result = property("SlideShowWindows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowWindows**)qax_result.constData();
}

inline double Application::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Application::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline VBIDE::VBE* Application::VBE() const
{
    VBIDE::VBE* qax_pointer = 0;
    qRegisterMetaType("VBIDE::VBE*", &qax_pointer);
#ifdef QAX_DUMPCPP_VBIDE_H
    qRegisterMetaType("VBIDE::VBE", qax_pointer);
#endif
    QVariant qax_result = property("VBE");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_VBIDE_H
    return *(VBIDE::VBE**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline QString Application::Version() const
{
    QVariant qax_result = property("Version");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::MsoTriState Application::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Application::SetVisible(Office::MsoTriState value){ setProperty("Visible", QVariant(value)); }

inline double Application::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Application::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline PowerPoint::PpWindowState Application::WindowState() const
{
    QVariant qax_result = property("WindowState");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpWindowState*)qax_result.constData();
}
inline void Application::SetWindowState(PowerPoint::PpWindowState value){ setProperty("WindowState", QVariant(value)); }

inline PowerPoint::DocumentWindows* Application::Windows() const
{
    PowerPoint::DocumentWindows* qax_pointer = 0;
    qRegisterMetaType("DocumentWindows*", &qax_pointer);
    qRegisterMetaType("DocumentWindows", qax_pointer);
    QVariant qax_result = property("Windows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DocumentWindows**)qax_result.constData();
}

inline void Application::Activate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline Office::FileDialog* Application::FileDialog(Office::MsoFileDialogType Type)
{
    Office::FileDialog* qax_result = 0;
    qRegisterMetaType("Office::FileDialog*", &qax_result);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::FileDialog", qax_result);
#endif
    void *_a[] = {(void*)&qax_result, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool Application::GetOptionFlag(int Option)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Option};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool Application::GetOptionFlag(int Option, bool Persist)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Option, (void*)&Persist};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void Application::Help()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void Application::Help(const QString& HelpFile)
{
    void *_a[] = {0, (void*)&HelpFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void Application::Help(const QString& HelpFile, int ContextID)
{
    void *_a[] = {0, (void*)&HelpFile, (void*)&ContextID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void Application::LaunchSpelling(PowerPoint::DocumentWindow* pWindow)
{
    void *_a[] = {0, (void*)&pWindow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline IUnknown* Application::PPFileDialog(PowerPoint::PpFileDialogType Type)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void Application::Quit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline QVariant Application::Run(const QString& MacroName, QVariantList& safeArrayOfParams)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MacroName, (void*)&safeArrayOfParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void Application::SetOptionFlag(int Option, bool State)
{
    void *_a[] = {0, (void*)&Option, (void*)&State};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void Application::SetOptionFlag(int Option, bool State, bool Persist)
{
    void *_a[] = {0, (void*)&Option, (void*)&State, (void*)&Persist};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void Application::SetPerfMarker(int Marker)
{
    void *_a[] = {0, (void*)&Marker};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}


inline PowerPoint::Presentation* Global::ActivePresentation() const
{
    PowerPoint::Presentation* qax_pointer = 0;
    qRegisterMetaType("Presentation*", &qax_pointer);
    qRegisterMetaType("Presentation", qax_pointer);
    QVariant qax_result = property("ActivePresentation");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Presentation**)qax_result.constData();
}

inline PowerPoint::DocumentWindow* Global::ActiveWindow() const
{
    PowerPoint::DocumentWindow* qax_pointer = 0;
    qRegisterMetaType("DocumentWindow*", &qax_pointer);
    qRegisterMetaType("DocumentWindow", qax_pointer);
    QVariant qax_result = property("ActiveWindow");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DocumentWindow**)qax_result.constData();
}

inline PowerPoint::AddIns* Global::AddIns() const
{
    PowerPoint::AddIns* qax_pointer = 0;
    qRegisterMetaType("AddIns*", &qax_pointer);
    qRegisterMetaType("AddIns", qax_pointer);
    QVariant qax_result = property("AddIns");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::AddIns**)qax_result.constData();
}

inline Office::AnswerWizard* Global::AnswerWizard() const
{
    Office::AnswerWizard* qax_pointer = 0;
    qRegisterMetaType("Office::AnswerWizard*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::AnswerWizard", qax_pointer);
#endif
    QVariant qax_result = property("AnswerWizard");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::AnswerWizard**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::Application* Global::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline Office::Assistant* Global::Assistant() const
{
    Office::Assistant* qax_pointer = 0;
    qRegisterMetaType("Office::Assistant*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Assistant", qax_pointer);
#endif
    QVariant qax_result = property("Assistant");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Assistant**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline Office::CommandBars* Global::CommandBars() const
{
    Office::CommandBars* qax_pointer = 0;
    qRegisterMetaType("Office::CommandBars*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::CommandBars", qax_pointer);
#endif
    QVariant qax_result = property("CommandBars");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::CommandBars**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline IUnknown* Global::Dialogs() const
{
    QVariant qax_result = property("Dialogs");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Presentations* Global::Presentations() const
{
    PowerPoint::Presentations* qax_pointer = 0;
    qRegisterMetaType("Presentations*", &qax_pointer);
    qRegisterMetaType("Presentations", qax_pointer);
    QVariant qax_result = property("Presentations");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Presentations**)qax_result.constData();
}

inline PowerPoint::SlideShowWindows* Global::SlideShowWindows() const
{
    PowerPoint::SlideShowWindows* qax_pointer = 0;
    qRegisterMetaType("SlideShowWindows*", &qax_pointer);
    qRegisterMetaType("SlideShowWindows", qax_pointer);
    QVariant qax_result = property("SlideShowWindows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowWindows**)qax_result.constData();
}

inline PowerPoint::DocumentWindows* Global::Windows() const
{
    PowerPoint::DocumentWindows* qax_pointer = 0;
    qRegisterMetaType("DocumentWindows*", &qax_pointer);
    qRegisterMetaType("DocumentWindows", qax_pointer);
    QVariant qax_result = property("Windows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DocumentWindows**)qax_result.constData();
}


inline IDispatch* ColorFormat::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int ColorFormat::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* ColorFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int ColorFormat::RGB() const
{
    QVariant qax_result = property("RGB");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ColorFormat::SetRGB(int value){ setProperty("RGB", QVariant(value)); }

inline PowerPoint::PpColorSchemeIndex ColorFormat::SchemeColor() const
{
    QVariant qax_result = property("SchemeColor");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpColorSchemeIndex*)qax_result.constData();
}
inline void ColorFormat::SetSchemeColor(PowerPoint::PpColorSchemeIndex value){ setProperty("SchemeColor", QVariant(value)); }

inline double ColorFormat::TintAndShade() const
{
    QVariant qax_result = property("TintAndShade");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ColorFormat::SetTintAndShade(double value){ setProperty("TintAndShade", QVariant(value)); }

inline Office::MsoColorType ColorFormat::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoColorType*)qax_result.constData();
}


inline Office::MsoTriState SlideShowWindow::Active() const
{
    QVariant qax_result = property("Active");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::Application* SlideShowWindow::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int SlideShowWindow::HWND() const
{
    QVariant qax_result = property("HWND");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double SlideShowWindow::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void SlideShowWindow::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline Office::MsoTriState SlideShowWindow::IsFullScreen() const
{
    QVariant qax_result = property("IsFullScreen");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline double SlideShowWindow::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void SlideShowWindow::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline IDispatch* SlideShowWindow::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::Presentation* SlideShowWindow::Presentation() const
{
    PowerPoint::Presentation* qax_pointer = 0;
    qRegisterMetaType("Presentation*", &qax_pointer);
    qRegisterMetaType("Presentation", qax_pointer);
    QVariant qax_result = property("Presentation");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Presentation**)qax_result.constData();
}

inline double SlideShowWindow::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void SlideShowWindow::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline PowerPoint::SlideShowView* SlideShowWindow::View() const
{
    PowerPoint::SlideShowView* qax_pointer = 0;
    qRegisterMetaType("SlideShowView*", &qax_pointer);
    qRegisterMetaType("SlideShowView", qax_pointer);
    QVariant qax_result = property("View");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowView**)qax_result.constData();
}

inline double SlideShowWindow::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void SlideShowWindow::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline void SlideShowWindow::Activate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline PowerPoint::Application* Selection::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::ShapeRange* Selection::ChildShapeRange() const
{
    PowerPoint::ShapeRange* qax_pointer = 0;
    qRegisterMetaType("ShapeRange*", &qax_pointer);
    qRegisterMetaType("ShapeRange", qax_pointer);
    QVariant qax_result = property("ChildShapeRange");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ShapeRange**)qax_result.constData();
}

inline bool Selection::HasChildShapeRange() const
{
    QVariant qax_result = property("HasChildShapeRange");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline IDispatch* Selection::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::ShapeRange* Selection::ShapeRange() const
{
    PowerPoint::ShapeRange* qax_pointer = 0;
    qRegisterMetaType("ShapeRange*", &qax_pointer);
    qRegisterMetaType("ShapeRange", qax_pointer);
    QVariant qax_result = property("ShapeRange");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ShapeRange**)qax_result.constData();
}

inline PowerPoint::SlideRange* Selection::SlideRange() const
{
    PowerPoint::SlideRange* qax_pointer = 0;
    qRegisterMetaType("SlideRange*", &qax_pointer);
    qRegisterMetaType("SlideRange", qax_pointer);
    QVariant qax_result = property("SlideRange");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideRange**)qax_result.constData();
}

inline PowerPoint::TextRange* Selection::TextRange() const
{
    PowerPoint::TextRange* qax_pointer = 0;
    qRegisterMetaType("TextRange*", &qax_pointer);
    qRegisterMetaType("TextRange", qax_pointer);
    QVariant qax_result = property("TextRange");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TextRange**)qax_result.constData();
}

inline PowerPoint::PpSelectionType Selection::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSelectionType*)qax_result.constData();
}

inline void Selection::Copy()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Selection::Cut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Selection::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Selection::Unselect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline PowerPoint::Application* DocumentWindows::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int DocumentWindows::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* DocumentWindows::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* DocumentWindows::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void DocumentWindows::Arrange()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void DocumentWindows::Arrange(PowerPoint::PpArrangeStyle arrangeStyle)
{
    void *_a[] = {0, (void*)&arrangeStyle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline PowerPoint::DocumentWindow* DocumentWindows::Item(int Index)
{
    PowerPoint::DocumentWindow* qax_result = 0;
    qRegisterMetaType("DocumentWindow*", &qax_result);
    qRegisterMetaType("DocumentWindow", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant DocumentWindows::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline PowerPoint::Application* SlideShowWindows::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int SlideShowWindows::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* SlideShowWindows::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* SlideShowWindows::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::SlideShowWindow* SlideShowWindows::Item(int Index)
{
    PowerPoint::SlideShowWindow* qax_result = 0;
    qRegisterMetaType("SlideShowWindow*", &qax_result);
    qRegisterMetaType("SlideShowWindow", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant SlideShowWindows::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline Office::MsoTriState DocumentWindow::Active() const
{
    QVariant qax_result = property("Active");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::Pane* DocumentWindow::ActivePane() const
{
    PowerPoint::Pane* qax_pointer = 0;
    qRegisterMetaType("Pane*", &qax_pointer);
    qRegisterMetaType("Pane", qax_pointer);
    QVariant qax_result = property("ActivePane");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Pane**)qax_result.constData();
}

inline PowerPoint::Application* DocumentWindow::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline Office::MsoTriState DocumentWindow::BlackAndWhite() const
{
    QVariant qax_result = property("BlackAndWhite");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DocumentWindow::SetBlackAndWhite(Office::MsoTriState value){ setProperty("BlackAndWhite", QVariant(value)); }

inline QString DocumentWindow::Caption() const
{
    QVariant qax_result = property("Caption");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int DocumentWindow::HWND() const
{
    QVariant qax_result = property("HWND");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double DocumentWindow::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void DocumentWindow::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline double DocumentWindow::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void DocumentWindow::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline PowerPoint::Panes* DocumentWindow::Panes() const
{
    PowerPoint::Panes* qax_pointer = 0;
    qRegisterMetaType("Panes*", &qax_pointer);
    qRegisterMetaType("Panes", qax_pointer);
    QVariant qax_result = property("Panes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Panes**)qax_result.constData();
}

inline IDispatch* DocumentWindow::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::Presentation* DocumentWindow::Presentation() const
{
    PowerPoint::Presentation* qax_pointer = 0;
    qRegisterMetaType("Presentation*", &qax_pointer);
    qRegisterMetaType("Presentation", qax_pointer);
    QVariant qax_result = property("Presentation");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Presentation**)qax_result.constData();
}

inline PowerPoint::Selection* DocumentWindow::Selection() const
{
    PowerPoint::Selection* qax_pointer = 0;
    qRegisterMetaType("Selection*", &qax_pointer);
    qRegisterMetaType("Selection", qax_pointer);
    QVariant qax_result = property("Selection");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Selection**)qax_result.constData();
}

inline int DocumentWindow::SplitHorizontal() const
{
    QVariant qax_result = property("SplitHorizontal");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void DocumentWindow::SetSplitHorizontal(int value){ setProperty("SplitHorizontal", QVariant(value)); }

inline int DocumentWindow::SplitVertical() const
{
    QVariant qax_result = property("SplitVertical");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void DocumentWindow::SetSplitVertical(int value){ setProperty("SplitVertical", QVariant(value)); }

inline double DocumentWindow::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void DocumentWindow::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline PowerPoint::View* DocumentWindow::View() const
{
    PowerPoint::View* qax_pointer = 0;
    qRegisterMetaType("View*", &qax_pointer);
    qRegisterMetaType("View", qax_pointer);
    QVariant qax_result = property("View");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::View**)qax_result.constData();
}

inline PowerPoint::PpViewType DocumentWindow::ViewType() const
{
    QVariant qax_result = property("ViewType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpViewType*)qax_result.constData();
}
inline void DocumentWindow::SetViewType(PowerPoint::PpViewType value){ setProperty("ViewType", QVariant(value)); }

inline double DocumentWindow::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void DocumentWindow::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline PowerPoint::PpWindowState DocumentWindow::WindowState() const
{
    QVariant qax_result = property("WindowState");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpWindowState*)qax_result.constData();
}
inline void DocumentWindow::SetWindowState(PowerPoint::PpWindowState value){ setProperty("WindowState", QVariant(value)); }

inline void DocumentWindow::Activate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void DocumentWindow::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void DocumentWindow::FitToPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void DocumentWindow::LargeScroll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void DocumentWindow::LargeScroll(int Down)
{
    void *_a[] = {0, (void*)&Down};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void DocumentWindow::LargeScroll(int Down, int Up)
{
    void *_a[] = {0, (void*)&Down, (void*)&Up};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void DocumentWindow::LargeScroll(int Down, int Up, int ToRight)
{
    void *_a[] = {0, (void*)&Down, (void*)&Up, (void*)&ToRight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void DocumentWindow::LargeScroll(int Down, int Up, int ToRight, int ToLeft)
{
    void *_a[] = {0, (void*)&Down, (void*)&Up, (void*)&ToRight, (void*)&ToLeft};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline PowerPoint::DocumentWindow* DocumentWindow::NewWindow()
{
    PowerPoint::DocumentWindow* qax_result = 0;
    qRegisterMetaType("DocumentWindow*", &qax_result);
    qRegisterMetaType("DocumentWindow", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline int DocumentWindow::PointsToScreenPixelsX(double Points)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline int DocumentWindow::PointsToScreenPixelsY(double Points)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline IDispatch* DocumentWindow::RangeFromPoint(int X, int Y)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&X, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void DocumentWindow::ScrollIntoView(double Left, double Top, double Width, double Height)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void DocumentWindow::ScrollIntoView(double Left, double Top, double Width, double Height, Office::MsoTriState Start)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void DocumentWindow::SmallScroll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void DocumentWindow::SmallScroll(int Down)
{
    void *_a[] = {0, (void*)&Down};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void DocumentWindow::SmallScroll(int Down, int Up)
{
    void *_a[] = {0, (void*)&Down, (void*)&Up};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void DocumentWindow::SmallScroll(int Down, int Up, int ToRight)
{
    void *_a[] = {0, (void*)&Down, (void*)&Up, (void*)&ToRight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void DocumentWindow::SmallScroll(int Down, int Up, int ToRight, int ToLeft)
{
    void *_a[] = {0, (void*)&Down, (void*)&Up, (void*)&ToRight, (void*)&ToLeft};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}


inline PowerPoint::Application* View::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline Office::MsoTriState View::DisplaySlideMiniature() const
{
    QVariant qax_result = property("DisplaySlideMiniature");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void View::SetDisplaySlideMiniature(Office::MsoTriState value){ setProperty("DisplaySlideMiniature", QVariant(value)); }

inline IDispatch* View::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::PrintOptions* View::PrintOptions() const
{
    PowerPoint::PrintOptions* qax_pointer = 0;
    qRegisterMetaType("PrintOptions*", &qax_pointer);
    qRegisterMetaType("PrintOptions", qax_pointer);
    QVariant qax_result = property("PrintOptions");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PrintOptions**)qax_result.constData();
}

inline IDispatch* View::Slide() const
{
    QVariant qax_result = property("Slide");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void View::SetSlide(IDispatch* value){
    int typeId = qRegisterMetaType("IDispatch*", &value);
    setProperty("Slide", QVariant(typeId, &value));
}

inline PowerPoint::PpViewType View::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpViewType*)qax_result.constData();
}

inline int View::Zoom() const
{
    QVariant qax_result = property("Zoom");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void View::SetZoom(int value){ setProperty("Zoom", QVariant(value)); }

inline Office::MsoTriState View::ZoomToFit() const
{
    QVariant qax_result = property("ZoomToFit");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void View::SetZoomToFit(Office::MsoTriState value){ setProperty("ZoomToFit", QVariant(value)); }

inline void View::GotoSlide(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void View::Paste()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void View::PasteSpecial()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void View::PasteSpecial(PowerPoint::PpPasteDataType DataType)
{
    void *_a[] = {0, (void*)&DataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void View::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon)
{
    void *_a[] = {0, (void*)&DataType, (void*)&DisplayAsIcon};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void View::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName)
{
    void *_a[] = {0, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void View::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex)
{
    void *_a[] = {0, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void View::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel)
{
    void *_a[] = {0, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex, (void*)&IconLabel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void View::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel, Office::MsoTriState Link)
{
    void *_a[] = {0, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex, (void*)&IconLabel, (void*)&Link};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void View::PrintOut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void View::PrintOut(int From)
{
    void *_a[] = {0, (void*)&From};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void View::PrintOut(int From, int To)
{
    void *_a[] = {0, (void*)&From, (void*)&To};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void View::PrintOut(int From, int To, const QString& PrintToFile)
{
    void *_a[] = {0, (void*)&From, (void*)&To, (void*)&PrintToFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void View::PrintOut(int From, int To, const QString& PrintToFile, int Copies)
{
    void *_a[] = {0, (void*)&From, (void*)&To, (void*)&PrintToFile, (void*)&Copies};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void View::PrintOut(int From, int To, const QString& PrintToFile, int Copies, Office::MsoTriState Collate)
{
    void *_a[] = {0, (void*)&From, (void*)&To, (void*)&PrintToFile, (void*)&Copies, (void*)&Collate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline Office::MsoTriState SlideShowView::AcceleratorsEnabled() const
{
    QVariant qax_result = property("AcceleratorsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void SlideShowView::SetAcceleratorsEnabled(Office::MsoTriState value){ setProperty("AcceleratorsEnabled", QVariant(value)); }

inline PowerPoint::PpSlideShowAdvanceMode SlideShowView::AdvanceMode() const
{
    QVariant qax_result = property("AdvanceMode");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSlideShowAdvanceMode*)qax_result.constData();
}

inline PowerPoint::Application* SlideShowView::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int SlideShowView::CurrentShowPosition() const
{
    QVariant qax_result = property("CurrentShowPosition");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::MsoTriState SlideShowView::IsNamedShow() const
{
    QVariant qax_result = property("IsNamedShow");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::Slide* SlideShowView::LastSlideViewed() const
{
    PowerPoint::Slide* qax_pointer = 0;
    qRegisterMetaType("Slide*", &qax_pointer);
    qRegisterMetaType("Slide", qax_pointer);
    QVariant qax_result = property("LastSlideViewed");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Slide**)qax_result.constData();
}

inline IDispatch* SlideShowView::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::ColorFormat* SlideShowView::PointerColor() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("PointerColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}

inline PowerPoint::PpSlideShowPointerType SlideShowView::PointerType() const
{
    QVariant qax_result = property("PointerType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSlideShowPointerType*)qax_result.constData();
}
inline void SlideShowView::SetPointerType(PowerPoint::PpSlideShowPointerType value){ setProperty("PointerType", QVariant(value)); }

inline double SlideShowView::PresentationElapsedTime() const
{
    QVariant qax_result = property("PresentationElapsedTime");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline PowerPoint::Slide* SlideShowView::Slide() const
{
    PowerPoint::Slide* qax_pointer = 0;
    qRegisterMetaType("Slide*", &qax_pointer);
    qRegisterMetaType("Slide", qax_pointer);
    QVariant qax_result = property("Slide");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Slide**)qax_result.constData();
}

inline double SlideShowView::SlideElapsedTime() const
{
    QVariant qax_result = property("SlideElapsedTime");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void SlideShowView::SetSlideElapsedTime(double value){ setProperty("SlideElapsedTime", QVariant(value)); }

inline QString SlideShowView::SlideShowName() const
{
    QVariant qax_result = property("SlideShowName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::PpSlideShowState SlideShowView::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSlideShowState*)qax_result.constData();
}
inline void SlideShowView::SetState(PowerPoint::PpSlideShowState value){ setProperty("State", QVariant(value)); }

inline int SlideShowView::Zoom() const
{
    QVariant qax_result = property("Zoom");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void SlideShowView::DrawLine(double BeginX, double BeginY, double EndX, double EndY)
{
    void *_a[] = {0, (void*)&BeginX, (void*)&BeginY, (void*)&EndX, (void*)&EndY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void SlideShowView::EndNamedShow()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void SlideShowView::EraseDrawing()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void SlideShowView::Exit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void SlideShowView::First()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void SlideShowView::GotoNamedShow(const QString& SlideShowName)
{
    void *_a[] = {0, (void*)&SlideShowName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void SlideShowView::GotoSlide(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void SlideShowView::GotoSlide(int Index, Office::MsoTriState ResetSlide)
{
    void *_a[] = {0, (void*)&Index, (void*)&ResetSlide};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void SlideShowView::InstallTracker(PowerPoint::MouseTracker* pTracker, Office::MsoTriState Presenter)
{
    void *_a[] = {0, (void*)&pTracker, (void*)&Presenter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void SlideShowView::Last()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void SlideShowView::Next()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void SlideShowView::Previous()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void SlideShowView::ResetSlideTime()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline PowerPoint::PpSlideShowAdvanceMode SlideShowSettings::AdvanceMode() const
{
    QVariant qax_result = property("AdvanceMode");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSlideShowAdvanceMode*)qax_result.constData();
}
inline void SlideShowSettings::SetAdvanceMode(PowerPoint::PpSlideShowAdvanceMode value){ setProperty("AdvanceMode", QVariant(value)); }

inline PowerPoint::Application* SlideShowSettings::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int SlideShowSettings::EndingSlide() const
{
    QVariant qax_result = property("EndingSlide");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void SlideShowSettings::SetEndingSlide(int value){ setProperty("EndingSlide", QVariant(value)); }

inline Office::MsoTriState SlideShowSettings::LoopUntilStopped() const
{
    QVariant qax_result = property("LoopUntilStopped");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void SlideShowSettings::SetLoopUntilStopped(Office::MsoTriState value){ setProperty("LoopUntilStopped", QVariant(value)); }

inline PowerPoint::NamedSlideShows* SlideShowSettings::NamedSlideShows() const
{
    PowerPoint::NamedSlideShows* qax_pointer = 0;
    qRegisterMetaType("NamedSlideShows*", &qax_pointer);
    qRegisterMetaType("NamedSlideShows", qax_pointer);
    QVariant qax_result = property("NamedSlideShows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::NamedSlideShows**)qax_result.constData();
}

inline IDispatch* SlideShowSettings::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::ColorFormat* SlideShowSettings::PointerColor() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("PointerColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}

inline PowerPoint::PpSlideShowRangeType SlideShowSettings::RangeType() const
{
    QVariant qax_result = property("RangeType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSlideShowRangeType*)qax_result.constData();
}
inline void SlideShowSettings::SetRangeType(PowerPoint::PpSlideShowRangeType value){ setProperty("RangeType", QVariant(value)); }

inline Office::MsoTriState SlideShowSettings::ShowScrollbar() const
{
    QVariant qax_result = property("ShowScrollbar");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void SlideShowSettings::SetShowScrollbar(Office::MsoTriState value){ setProperty("ShowScrollbar", QVariant(value)); }

inline PowerPoint::PpSlideShowType SlideShowSettings::ShowType() const
{
    QVariant qax_result = property("ShowType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSlideShowType*)qax_result.constData();
}
inline void SlideShowSettings::SetShowType(PowerPoint::PpSlideShowType value){ setProperty("ShowType", QVariant(value)); }

inline Office::MsoTriState SlideShowSettings::ShowWithAnimation() const
{
    QVariant qax_result = property("ShowWithAnimation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void SlideShowSettings::SetShowWithAnimation(Office::MsoTriState value){ setProperty("ShowWithAnimation", QVariant(value)); }

inline Office::MsoTriState SlideShowSettings::ShowWithNarration() const
{
    QVariant qax_result = property("ShowWithNarration");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void SlideShowSettings::SetShowWithNarration(Office::MsoTriState value){ setProperty("ShowWithNarration", QVariant(value)); }

inline QString SlideShowSettings::SlideShowName() const
{
    QVariant qax_result = property("SlideShowName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void SlideShowSettings::SetSlideShowName(const QString& value){ setProperty("SlideShowName", QVariant(value)); }

inline int SlideShowSettings::StartingSlide() const
{
    QVariant qax_result = property("StartingSlide");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void SlideShowSettings::SetStartingSlide(int value){ setProperty("StartingSlide", QVariant(value)); }

inline PowerPoint::SlideShowWindow* SlideShowSettings::Run()
{
    PowerPoint::SlideShowWindow* qax_result = 0;
    qRegisterMetaType("SlideShowWindow*", &qax_result);
    qRegisterMetaType("SlideShowWindow", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}


inline PowerPoint::Application* NamedSlideShows::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int NamedSlideShows::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* NamedSlideShows::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* NamedSlideShows::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::NamedSlideShow* NamedSlideShows::Add(const QString& Name, const QVariant& safeArrayOfSlideIDs)
{
    PowerPoint::NamedSlideShow* qax_result = 0;
    qRegisterMetaType("NamedSlideShow*", &qax_result);
    qRegisterMetaType("NamedSlideShow", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&safeArrayOfSlideIDs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::NamedSlideShow* NamedSlideShows::Item(const QVariant& Index)
{
    PowerPoint::NamedSlideShow* qax_result = 0;
    qRegisterMetaType("NamedSlideShow*", &qax_result);
    qRegisterMetaType("NamedSlideShow", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QVariant NamedSlideShows::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline PowerPoint::Application* NamedSlideShow::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int NamedSlideShow::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString NamedSlideShow::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline IDispatch* NamedSlideShow::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QVariant NamedSlideShow::SlideIDs() const
{
    QVariant qax_result = property("SlideIDs");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline void NamedSlideShow::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline QString PrintOptions::ActivePrinter() const
{
    QVariant qax_result = property("ActivePrinter");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void PrintOptions::SetActivePrinter(const QString& value){ setProperty("ActivePrinter", QVariant(value)); }

inline PowerPoint::Application* PrintOptions::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline Office::MsoTriState PrintOptions::Collate() const
{
    QVariant qax_result = property("Collate");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PrintOptions::SetCollate(Office::MsoTriState value){ setProperty("Collate", QVariant(value)); }

inline Office::MsoTriState PrintOptions::FitToPage() const
{
    QVariant qax_result = property("FitToPage");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PrintOptions::SetFitToPage(Office::MsoTriState value){ setProperty("FitToPage", QVariant(value)); }

inline Office::MsoTriState PrintOptions::FrameSlides() const
{
    QVariant qax_result = property("FrameSlides");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PrintOptions::SetFrameSlides(Office::MsoTriState value){ setProperty("FrameSlides", QVariant(value)); }

inline PowerPoint::PpPrintHandoutOrder PrintOptions::HandoutOrder() const
{
    QVariant qax_result = property("HandoutOrder");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpPrintHandoutOrder*)qax_result.constData();
}
inline void PrintOptions::SetHandoutOrder(PowerPoint::PpPrintHandoutOrder value){ setProperty("HandoutOrder", QVariant(value)); }

inline int PrintOptions::NumberOfCopies() const
{
    QVariant qax_result = property("NumberOfCopies");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void PrintOptions::SetNumberOfCopies(int value){ setProperty("NumberOfCopies", QVariant(value)); }

inline PowerPoint::PpPrintOutputType PrintOptions::OutputType() const
{
    QVariant qax_result = property("OutputType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpPrintOutputType*)qax_result.constData();
}
inline void PrintOptions::SetOutputType(PowerPoint::PpPrintOutputType value){ setProperty("OutputType", QVariant(value)); }

inline IDispatch* PrintOptions::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::PpPrintColorType PrintOptions::PrintColorType() const
{
    QVariant qax_result = property("PrintColorType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpPrintColorType*)qax_result.constData();
}
inline void PrintOptions::SetPrintColorType(PowerPoint::PpPrintColorType value){ setProperty("PrintColorType", QVariant(value)); }

inline Office::MsoTriState PrintOptions::PrintComments() const
{
    QVariant qax_result = property("PrintComments");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PrintOptions::SetPrintComments(Office::MsoTriState value){ setProperty("PrintComments", QVariant(value)); }

inline Office::MsoTriState PrintOptions::PrintFontsAsGraphics() const
{
    QVariant qax_result = property("PrintFontsAsGraphics");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PrintOptions::SetPrintFontsAsGraphics(Office::MsoTriState value){ setProperty("PrintFontsAsGraphics", QVariant(value)); }

inline Office::MsoTriState PrintOptions::PrintHiddenSlides() const
{
    QVariant qax_result = property("PrintHiddenSlides");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PrintOptions::SetPrintHiddenSlides(Office::MsoTriState value){ setProperty("PrintHiddenSlides", QVariant(value)); }

inline Office::MsoTriState PrintOptions::PrintInBackground() const
{
    QVariant qax_result = property("PrintInBackground");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PrintOptions::SetPrintInBackground(Office::MsoTriState value){ setProperty("PrintInBackground", QVariant(value)); }

inline PowerPoint::PpPrintRangeType PrintOptions::RangeType() const
{
    QVariant qax_result = property("RangeType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpPrintRangeType*)qax_result.constData();
}
inline void PrintOptions::SetRangeType(PowerPoint::PpPrintRangeType value){ setProperty("RangeType", QVariant(value)); }

inline PowerPoint::PrintRanges* PrintOptions::Ranges() const
{
    PowerPoint::PrintRanges* qax_pointer = 0;
    qRegisterMetaType("PrintRanges*", &qax_pointer);
    qRegisterMetaType("PrintRanges", qax_pointer);
    QVariant qax_result = property("Ranges");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PrintRanges**)qax_result.constData();
}

inline QString PrintOptions::SlideShowName() const
{
    QVariant qax_result = property("SlideShowName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void PrintOptions::SetSlideShowName(const QString& value){ setProperty("SlideShowName", QVariant(value)); }


inline PowerPoint::Application* PrintRanges::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int PrintRanges::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* PrintRanges::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* PrintRanges::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::PrintRange* PrintRanges::Add(int Start, int End)
{
    PowerPoint::PrintRange* qax_result = 0;
    qRegisterMetaType("PrintRange*", &qax_result);
    qRegisterMetaType("PrintRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start, (void*)&End};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void PrintRanges::ClearAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline PowerPoint::PrintRange* PrintRanges::Item(int Index)
{
    PowerPoint::PrintRange* qax_result = 0;
    qRegisterMetaType("PrintRange*", &qax_result);
    qRegisterMetaType("PrintRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant PrintRanges::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline PowerPoint::Application* PrintRange::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int PrintRange::End() const
{
    QVariant qax_result = property("End");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* PrintRange::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int PrintRange::Start() const
{
    QVariant qax_result = property("Start");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void PrintRange::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline PowerPoint::Application* AddIns::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int AddIns::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* AddIns::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* AddIns::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::AddIn* AddIns::Add(const QString& FileName)
{
    PowerPoint::AddIn* qax_result = 0;
    qRegisterMetaType("AddIn*", &qax_result);
    qRegisterMetaType("AddIn", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::AddIn* AddIns::Item(QVariant& Index)
{
    PowerPoint::AddIn* qax_result = 0;
    qRegisterMetaType("AddIn*", &qax_result);
    qRegisterMetaType("AddIn", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void AddIns::Remove(QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline QVariant AddIns::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline PowerPoint::Application* AddIn::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline Office::MsoTriState AddIn::AutoLoad() const
{
    QVariant qax_result = property("AutoLoad");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void AddIn::SetAutoLoad(Office::MsoTriState value){ setProperty("AutoLoad", QVariant(value)); }

inline Office::MsoTriState AddIn::DisplayAlerts() const
{
    QVariant qax_result = property("DisplayAlerts");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void AddIn::SetDisplayAlerts(Office::MsoTriState value){ setProperty("DisplayAlerts", QVariant(value)); }

inline QString AddIn::FullName() const
{
    QVariant qax_result = property("FullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::MsoTriState AddIn::Loaded() const
{
    QVariant qax_result = property("Loaded");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void AddIn::SetLoaded(Office::MsoTriState value){ setProperty("Loaded", QVariant(value)); }

inline QString AddIn::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline IDispatch* AddIn::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString AddIn::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::MsoTriState AddIn::Registered() const
{
    QVariant qax_result = property("Registered");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void AddIn::SetRegistered(Office::MsoTriState value){ setProperty("Registered", QVariant(value)); }

inline Office::MsoTriState AddIn::RegisteredInHKLM() const
{
    QVariant qax_result = property("RegisteredInHKLM");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}


inline PowerPoint::Application* Presentations::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Presentations::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Presentations::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Presentations::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Presentation* Presentations::Add()
{
    PowerPoint::Presentation* qax_result = 0;
    qRegisterMetaType("Presentation*", &qax_result);
    qRegisterMetaType("Presentation", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::Presentation* Presentations::Add(Office::MsoTriState WithWindow)
{
    PowerPoint::Presentation* qax_result = 0;
    qRegisterMetaType("Presentation*", &qax_result);
    qRegisterMetaType("Presentation", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&WithWindow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool Presentations::CanCheckOut(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void Presentations::CheckOut(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline PowerPoint::Presentation* Presentations::Item(const QVariant& Index)
{
    PowerPoint::Presentation* qax_result = 0;
    qRegisterMetaType("Presentation*", &qax_result);
    qRegisterMetaType("Presentation", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline PowerPoint::Presentation* Presentations::Open(const QString& FileName)
{
    PowerPoint::Presentation* qax_result = 0;
    qRegisterMetaType("Presentation*", &qax_result);
    qRegisterMetaType("Presentation", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline PowerPoint::Presentation* Presentations::Open(const QString& FileName, Office::MsoTriState ReadOnly)
{
    PowerPoint::Presentation* qax_result = 0;
    qRegisterMetaType("Presentation*", &qax_result);
    qRegisterMetaType("Presentation", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&ReadOnly};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline PowerPoint::Presentation* Presentations::Open(const QString& FileName, Office::MsoTriState ReadOnly, Office::MsoTriState Untitled)
{
    PowerPoint::Presentation* qax_result = 0;
    qRegisterMetaType("Presentation*", &qax_result);
    qRegisterMetaType("Presentation", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&ReadOnly, (void*)&Untitled};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline PowerPoint::Presentation* Presentations::Open(const QString& FileName, Office::MsoTriState ReadOnly, Office::MsoTriState Untitled, Office::MsoTriState WithWindow)
{
    PowerPoint::Presentation* qax_result = 0;
    qRegisterMetaType("Presentation*", &qax_result);
    qRegisterMetaType("Presentation", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&ReadOnly, (void*)&Untitled, (void*)&WithWindow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline PowerPoint::Presentation* Presentations::OpenOld(const QString& FileName)
{
    PowerPoint::Presentation* qax_result = 0;
    qRegisterMetaType("Presentation*", &qax_result);
    qRegisterMetaType("Presentation", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline PowerPoint::Presentation* Presentations::OpenOld(const QString& FileName, Office::MsoTriState ReadOnly)
{
    PowerPoint::Presentation* qax_result = 0;
    qRegisterMetaType("Presentation*", &qax_result);
    qRegisterMetaType("Presentation", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&ReadOnly};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline PowerPoint::Presentation* Presentations::OpenOld(const QString& FileName, Office::MsoTriState ReadOnly, Office::MsoTriState Untitled)
{
    PowerPoint::Presentation* qax_result = 0;
    qRegisterMetaType("Presentation*", &qax_result);
    qRegisterMetaType("Presentation", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&ReadOnly, (void*)&Untitled};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline PowerPoint::Presentation* Presentations::OpenOld(const QString& FileName, Office::MsoTriState ReadOnly, Office::MsoTriState Untitled, Office::MsoTriState WithWindow)
{
    PowerPoint::Presentation* qax_result = 0;
    qRegisterMetaType("Presentation*", &qax_result);
    qRegisterMetaType("Presentation", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&ReadOnly, (void*)&Untitled, (void*)&WithWindow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QVariant Presentations::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}


inline PowerPoint::Application* Presentation::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline IDispatch* Presentation::BuiltInDocumentProperties() const
{
    QVariant qax_result = property("BuiltInDocumentProperties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::ColorSchemes* Presentation::ColorSchemes() const
{
    PowerPoint::ColorSchemes* qax_pointer = 0;
    qRegisterMetaType("ColorSchemes*", &qax_pointer);
    qRegisterMetaType("ColorSchemes", qax_pointer);
    QVariant qax_result = property("ColorSchemes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorSchemes**)qax_result.constData();
}

inline Office::CommandBars* Presentation::CommandBars() const
{
    Office::CommandBars* qax_pointer = 0;
    qRegisterMetaType("Office::CommandBars*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::CommandBars", qax_pointer);
#endif
    QVariant qax_result = property("CommandBars");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::CommandBars**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline IDispatch* Presentation::Container() const
{
    QVariant qax_result = property("Container");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* Presentation::CustomDocumentProperties() const
{
    QVariant qax_result = property("CustomDocumentProperties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoLanguageID Presentation::DefaultLanguageID() const
{
    QVariant qax_result = property("DefaultLanguageID");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoLanguageID*)qax_result.constData();
}
inline void Presentation::SetDefaultLanguageID(Office::MsoLanguageID value){ setProperty("DefaultLanguageID", QVariant(value)); }

inline PowerPoint::Shape* Presentation::DefaultShape() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("DefaultShape");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}

inline PowerPoint::Designs* Presentation::Designs() const
{
    PowerPoint::Designs* qax_pointer = 0;
    qRegisterMetaType("Designs*", &qax_pointer);
    qRegisterMetaType("Designs", qax_pointer);
    QVariant qax_result = property("Designs");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Designs**)qax_result.constData();
}

inline Office::MsoTriState Presentation::DisplayComments() const
{
    QVariant qax_result = property("DisplayComments");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Presentation::SetDisplayComments(Office::MsoTriState value){ setProperty("DisplayComments", QVariant(value)); }

inline Office::DocumentLibraryVersions* Presentation::DocumentLibraryVersions() const
{
    Office::DocumentLibraryVersions* qax_pointer = 0;
    qRegisterMetaType("Office::DocumentLibraryVersions*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::DocumentLibraryVersions", qax_pointer);
#endif
    QVariant qax_result = property("DocumentLibraryVersions");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::DocumentLibraryVersions**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline Office::MsoTriState Presentation::EnvelopeVisible() const
{
    QVariant qax_result = property("EnvelopeVisible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Presentation::SetEnvelopeVisible(Office::MsoTriState value){ setProperty("EnvelopeVisible", QVariant(value)); }

inline PowerPoint::ExtraColors* Presentation::ExtraColors() const
{
    PowerPoint::ExtraColors* qax_pointer = 0;
    qRegisterMetaType("ExtraColors*", &qax_pointer);
    qRegisterMetaType("ExtraColors", qax_pointer);
    QVariant qax_result = property("ExtraColors");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ExtraColors**)qax_result.constData();
}

inline Office::MsoFarEastLineBreakLanguageID Presentation::FarEastLineBreakLanguage() const
{
    QVariant qax_result = property("FarEastLineBreakLanguage");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoFarEastLineBreakLanguageID*)qax_result.constData();
}
inline void Presentation::SetFarEastLineBreakLanguage(Office::MsoFarEastLineBreakLanguageID value){ setProperty("FarEastLineBreakLanguage", QVariant(value)); }

inline PowerPoint::PpFarEastLineBreakLevel Presentation::FarEastLineBreakLevel() const
{
    QVariant qax_result = property("FarEastLineBreakLevel");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpFarEastLineBreakLevel*)qax_result.constData();
}
inline void Presentation::SetFarEastLineBreakLevel(PowerPoint::PpFarEastLineBreakLevel value){ setProperty("FarEastLineBreakLevel", QVariant(value)); }

inline PowerPoint::Fonts* Presentation::Fonts() const
{
    PowerPoint::Fonts* qax_pointer = 0;
    qRegisterMetaType("Fonts*", &qax_pointer);
    qRegisterMetaType("Fonts", qax_pointer);
    QVariant qax_result = property("Fonts");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Fonts**)qax_result.constData();
}

inline QString Presentation::FullName() const
{
    QVariant qax_result = property("FullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double Presentation::GridDistance() const
{
    QVariant qax_result = property("GridDistance");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Presentation::SetGridDistance(double value){ setProperty("GridDistance", QVariant(value)); }

inline Office::HTMLProject* Presentation::HTMLProject() const
{
    Office::HTMLProject* qax_pointer = 0;
    qRegisterMetaType("Office::HTMLProject*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::HTMLProject", qax_pointer);
#endif
    QVariant qax_result = property("HTMLProject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::HTMLProject**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::_Master* Presentation::HandoutMaster() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("HandoutMaster");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline PowerPoint::PpRevisionInfo Presentation::HasRevisionInfo() const
{
    QVariant qax_result = property("HasRevisionInfo");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpRevisionInfo*)qax_result.constData();
}

inline Office::MsoTriState Presentation::HasTitleMaster() const
{
    QVariant qax_result = property("HasTitleMaster");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::PpDirection Presentation::LayoutDirection() const
{
    QVariant qax_result = property("LayoutDirection");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpDirection*)qax_result.constData();
}
inline void Presentation::SetLayoutDirection(PowerPoint::PpDirection value){ setProperty("LayoutDirection", QVariant(value)); }

inline QString Presentation::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Presentation::NoLineBreakAfter() const
{
    QVariant qax_result = property("NoLineBreakAfter");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Presentation::SetNoLineBreakAfter(const QString& value){ setProperty("NoLineBreakAfter", QVariant(value)); }

inline QString Presentation::NoLineBreakBefore() const
{
    QVariant qax_result = property("NoLineBreakBefore");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Presentation::SetNoLineBreakBefore(const QString& value){ setProperty("NoLineBreakBefore", QVariant(value)); }

inline PowerPoint::_Master* Presentation::NotesMaster() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("NotesMaster");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline PowerPoint::PageSetup* Presentation::PageSetup() const
{
    PowerPoint::PageSetup* qax_pointer = 0;
    qRegisterMetaType("PageSetup*", &qax_pointer);
    qRegisterMetaType("PageSetup", qax_pointer);
    QVariant qax_result = property("PageSetup");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PageSetup**)qax_result.constData();
}

inline IDispatch* Presentation::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString Presentation::Password() const
{
    QVariant qax_result = property("Password");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Presentation::SetPassword(const QString& value){ setProperty("Password", QVariant(value)); }

inline QString Presentation::PasswordEncryptionAlgorithm() const
{
    QVariant qax_result = property("PasswordEncryptionAlgorithm");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool Presentation::PasswordEncryptionFileProperties() const
{
    QVariant qax_result = property("PasswordEncryptionFileProperties");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int Presentation::PasswordEncryptionKeyLength() const
{
    QVariant qax_result = property("PasswordEncryptionKeyLength");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Presentation::PasswordEncryptionProvider() const
{
    QVariant qax_result = property("PasswordEncryptionProvider");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Presentation::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::Permission* Presentation::Permission() const
{
    Office::Permission* qax_pointer = 0;
    qRegisterMetaType("Office::Permission*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Permission", qax_pointer);
#endif
    QVariant qax_result = property("Permission");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Permission**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::PrintOptions* Presentation::PrintOptions() const
{
    PowerPoint::PrintOptions* qax_pointer = 0;
    qRegisterMetaType("PrintOptions*", &qax_pointer);
    qRegisterMetaType("PrintOptions", qax_pointer);
    QVariant qax_result = property("PrintOptions");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PrintOptions**)qax_result.constData();
}

inline PowerPoint::PublishObjects* Presentation::PublishObjects() const
{
    PowerPoint::PublishObjects* qax_pointer = 0;
    qRegisterMetaType("PublishObjects*", &qax_pointer);
    qRegisterMetaType("PublishObjects", qax_pointer);
    QVariant qax_result = property("PublishObjects");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PublishObjects**)qax_result.constData();
}

inline Office::MsoTriState Presentation::ReadOnly() const
{
    QVariant qax_result = property("ReadOnly");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState Presentation::RemovePersonalInformation() const
{
    QVariant qax_result = property("RemovePersonalInformation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Presentation::SetRemovePersonalInformation(Office::MsoTriState value){ setProperty("RemovePersonalInformation", QVariant(value)); }

inline Office::MsoTriState Presentation::Saved() const
{
    QVariant qax_result = property("Saved");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Presentation::SetSaved(Office::MsoTriState value){ setProperty("Saved", QVariant(value)); }

inline Office::SharedWorkspace* Presentation::SharedWorkspace() const
{
    Office::SharedWorkspace* qax_pointer = 0;
    qRegisterMetaType("Office::SharedWorkspace*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::SharedWorkspace", qax_pointer);
#endif
    QVariant qax_result = property("SharedWorkspace");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::SharedWorkspace**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline Office::SignatureSet* Presentation::Signatures() const
{
    Office::SignatureSet* qax_pointer = 0;
    qRegisterMetaType("Office::SignatureSet*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::SignatureSet", qax_pointer);
#endif
    QVariant qax_result = property("Signatures");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::SignatureSet**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::_Master* Presentation::SlideMaster() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("SlideMaster");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline PowerPoint::SlideShowSettings* Presentation::SlideShowSettings() const
{
    PowerPoint::SlideShowSettings* qax_pointer = 0;
    qRegisterMetaType("SlideShowSettings*", &qax_pointer);
    qRegisterMetaType("SlideShowSettings", qax_pointer);
    QVariant qax_result = property("SlideShowSettings");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowSettings**)qax_result.constData();
}

inline PowerPoint::SlideShowWindow* Presentation::SlideShowWindow() const
{
    PowerPoint::SlideShowWindow* qax_pointer = 0;
    qRegisterMetaType("SlideShowWindow*", &qax_pointer);
    qRegisterMetaType("SlideShowWindow", qax_pointer);
    QVariant qax_result = property("SlideShowWindow");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowWindow**)qax_result.constData();
}

inline PowerPoint::Slides* Presentation::Slides() const
{
    PowerPoint::Slides* qax_pointer = 0;
    qRegisterMetaType("Slides*", &qax_pointer);
    qRegisterMetaType("Slides", qax_pointer);
    QVariant qax_result = property("Slides");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Slides**)qax_result.constData();
}

inline Office::MsoTriState Presentation::SnapToGrid() const
{
    QVariant qax_result = property("SnapToGrid");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Presentation::SetSnapToGrid(Office::MsoTriState value){ setProperty("SnapToGrid", QVariant(value)); }

inline Office::Sync* Presentation::Sync() const
{
    Office::Sync* qax_pointer = 0;
    qRegisterMetaType("Office::Sync*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Sync", qax_pointer);
#endif
    QVariant qax_result = property("Sync");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Sync**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::Tags* Presentation::Tags() const
{
    PowerPoint::Tags* qax_pointer = 0;
    qRegisterMetaType("Tags*", &qax_pointer);
    qRegisterMetaType("Tags", qax_pointer);
    QVariant qax_result = property("Tags");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Tags**)qax_result.constData();
}

inline QString Presentation::TemplateName() const
{
    QVariant qax_result = property("TemplateName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::_Master* Presentation::TitleMaster() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("TitleMaster");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline Office::MsoTriState Presentation::VBASigned() const
{
    QVariant qax_result = property("VBASigned");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline VBIDE::VBProject* Presentation::VBProject() const
{
    VBIDE::VBProject* qax_pointer = 0;
    qRegisterMetaType("VBIDE::VBProject*", &qax_pointer);
#ifdef QAX_DUMPCPP_VBIDE_H
    qRegisterMetaType("VBIDE::VBProject", qax_pointer);
#endif
    QVariant qax_result = property("VBProject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_VBIDE_H
    return *(VBIDE::VBProject**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::WebOptions* Presentation::WebOptions() const
{
    PowerPoint::WebOptions* qax_pointer = 0;
    qRegisterMetaType("WebOptions*", &qax_pointer);
    qRegisterMetaType("WebOptions", qax_pointer);
    QVariant qax_result = property("WebOptions");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::WebOptions**)qax_result.constData();
}

inline PowerPoint::DocumentWindows* Presentation::Windows() const
{
    PowerPoint::DocumentWindows* qax_pointer = 0;
    qRegisterMetaType("DocumentWindows*", &qax_pointer);
    qRegisterMetaType("DocumentWindows", qax_pointer);
    QVariant qax_result = property("Windows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DocumentWindows**)qax_result.constData();
}

inline QString Presentation::WritePassword() const
{
    QVariant qax_result = property("WritePassword");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Presentation::SetWritePassword(const QString& value){ setProperty("WritePassword", QVariant(value)); }

inline void Presentation::AddBaseline()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Presentation::AddBaseline(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline PowerPoint::_Master* Presentation::AddTitleMaster()
{
    PowerPoint::_Master* qax_result = 0;
    qRegisterMetaType("_Master*", &qax_result);
    qRegisterMetaType("_Master", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void Presentation::AddToFavorites()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void Presentation::ApplyTemplate(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline bool Presentation::CanCheckIn()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void Presentation::CheckIn()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void Presentation::CheckIn(bool SaveChanges)
{
    void *_a[] = {0, (void*)&SaveChanges};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void Presentation::CheckIn(bool SaveChanges, const QVariant& Comments)
{
    void *_a[] = {0, (void*)&SaveChanges, (void*)&Comments};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void Presentation::CheckIn(bool SaveChanges, const QVariant& Comments, const QVariant& MakePublic)
{
    void *_a[] = {0, (void*)&SaveChanges, (void*)&Comments, (void*)&MakePublic};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void Presentation::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void Presentation::EndReview()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void Presentation::Export(const QString& Path, const QString& FilterName)
{
    void *_a[] = {0, (void*)&Path, (void*)&FilterName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void Presentation::Export(const QString& Path, const QString& FilterName, int ScaleWidth)
{
    void *_a[] = {0, (void*)&Path, (void*)&FilterName, (void*)&ScaleWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void Presentation::Export(const QString& Path, const QString& FilterName, int ScaleWidth, int ScaleHeight)
{
    void *_a[] = {0, (void*)&Path, (void*)&FilterName, (void*)&ScaleWidth, (void*)&ScaleHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void Presentation::FollowHyperlink(const QString& Address)
{
    void *_a[] = {0, (void*)&Address};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress, (void*)&NewWindow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress, (void*)&NewWindow, (void*)&AddHistory};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress, (void*)&NewWindow, (void*)&AddHistory, (void*)&ExtraInfo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo, Office::MsoExtraInfoMethod Method)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress, (void*)&NewWindow, (void*)&AddHistory, (void*)&ExtraInfo, (void*)&Method};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo, Office::MsoExtraInfoMethod Method, const QString& HeaderInfo)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress, (void*)&NewWindow, (void*)&AddHistory, (void*)&ExtraInfo, (void*)&Method, (void*)&HeaderInfo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void Presentation::MakeIntoTemplate(Office::MsoTriState IsDesignTemplate)
{
    void *_a[] = {0, (void*)&IsDesignTemplate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void Presentation::Merge(const QString& Path)
{
    void *_a[] = {0, (void*)&Path};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline PowerPoint::DocumentWindow* Presentation::NewWindow()
{
    PowerPoint::DocumentWindow* qax_result = 0;
    qRegisterMetaType("DocumentWindow*", &qax_result);
    qRegisterMetaType("DocumentWindow", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void Presentation::PrintOut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void Presentation::PrintOut(int From)
{
    void *_a[] = {0, (void*)&From};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void Presentation::PrintOut(int From, int To)
{
    void *_a[] = {0, (void*)&From, (void*)&To};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void Presentation::PrintOut(int From, int To, const QString& PrintToFile)
{
    void *_a[] = {0, (void*)&From, (void*)&To, (void*)&PrintToFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void Presentation::PrintOut(int From, int To, const QString& PrintToFile, int Copies)
{
    void *_a[] = {0, (void*)&From, (void*)&To, (void*)&PrintToFile, (void*)&Copies};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void Presentation::PrintOut(int From, int To, const QString& PrintToFile, int Copies, Office::MsoTriState Collate)
{
    void *_a[] = {0, (void*)&From, (void*)&To, (void*)&PrintToFile, (void*)&Copies, (void*)&Collate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void Presentation::ReloadAs(Office::MsoEncoding cp)
{
    void *_a[] = {0, (void*)&cp};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void Presentation::RemoveBaseline()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void Presentation::ReplyWithChanges()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void Presentation::ReplyWithChanges(bool ShowMessage)
{
    void *_a[] = {0, (void*)&ShowMessage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void Presentation::Save()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void Presentation::SaveAs(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void Presentation::SaveAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FileFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void Presentation::SaveAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat, Office::MsoTriState EmbedTrueTypeFonts)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FileFormat, (void*)&EmbedTrueTypeFonts};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void Presentation::SaveCopyAs(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void Presentation::SaveCopyAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FileFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void Presentation::SaveCopyAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat, Office::MsoTriState EmbedTrueTypeFonts)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FileFormat, (void*)&EmbedTrueTypeFonts};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void Presentation::SendFaxOverInternet()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void Presentation::SendFaxOverInternet(const QString& Recipients)
{
    void *_a[] = {0, (void*)&Recipients};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void Presentation::SendFaxOverInternet(const QString& Recipients, const QString& Subject)
{
    void *_a[] = {0, (void*)&Recipients, (void*)&Subject};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void Presentation::SendFaxOverInternet(const QString& Recipients, const QString& Subject, bool ShowMessage)
{
    void *_a[] = {0, (void*)&Recipients, (void*)&Subject, (void*)&ShowMessage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void Presentation::SendForReview()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void Presentation::SendForReview(const QString& Recipients)
{
    void *_a[] = {0, (void*)&Recipients};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void Presentation::SendForReview(const QString& Recipients, const QString& Subject)
{
    void *_a[] = {0, (void*)&Recipients, (void*)&Subject};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void Presentation::SendForReview(const QString& Recipients, const QString& Subject, bool ShowMessage)
{
    void *_a[] = {0, (void*)&Recipients, (void*)&Subject, (void*)&ShowMessage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void Presentation::SendForReview(const QString& Recipients, const QString& Subject, bool ShowMessage, const QVariant& IncludeAttachment)
{
    void *_a[] = {0, (void*)&Recipients, (void*)&Subject, (void*)&ShowMessage, (void*)&IncludeAttachment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void Presentation::SetPasswordEncryptionOptions(const QString& PasswordEncryptionProvider, const QString& PasswordEncryptionAlgorithm, int PasswordEncryptionKeyLength, bool PasswordEncryptionFileProperties)
{
    void *_a[] = {0, (void*)&PasswordEncryptionProvider, (void*)&PasswordEncryptionAlgorithm, (void*)&PasswordEncryptionKeyLength, (void*)&PasswordEncryptionFileProperties};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void Presentation::SetUndoText(const QString& Text)
{
    void *_a[] = {0, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void Presentation::Unused()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void Presentation::UpdateLinks()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void Presentation::WebPagePreview()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void Presentation::sblt(const QString& s)
{
    void *_a[] = {0, (void*)&s};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}


inline PowerPoint::Application* Hyperlinks::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Hyperlinks::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Hyperlinks::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Hyperlinks::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Hyperlink* Hyperlinks::Item(int Index)
{
    PowerPoint::Hyperlink* qax_result = 0;
    qRegisterMetaType("Hyperlink*", &qax_result);
    qRegisterMetaType("Hyperlink", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant Hyperlinks::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline QString Hyperlink::Address() const
{
    QVariant qax_result = property("Address");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Hyperlink::SetAddress(const QString& value){ setProperty("Address", QVariant(value)); }

inline PowerPoint::Application* Hyperlink::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline QString Hyperlink::EmailSubject() const
{
    QVariant qax_result = property("EmailSubject");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Hyperlink::SetEmailSubject(const QString& value){ setProperty("EmailSubject", QVariant(value)); }

inline IDispatch* Hyperlink::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString Hyperlink::ScreenTip() const
{
    QVariant qax_result = property("ScreenTip");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Hyperlink::SetScreenTip(const QString& value){ setProperty("ScreenTip", QVariant(value)); }

inline Office::MsoTriState Hyperlink::ShowAndReturn() const
{
    QVariant qax_result = property("ShowAndReturn");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Hyperlink::SetShowAndReturn(Office::MsoTriState value){ setProperty("ShowAndReturn", QVariant(value)); }

inline QString Hyperlink::SubAddress() const
{
    QVariant qax_result = property("SubAddress");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Hyperlink::SetSubAddress(const QString& value){ setProperty("SubAddress", QVariant(value)); }

inline QString Hyperlink::TextToDisplay() const
{
    QVariant qax_result = property("TextToDisplay");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Hyperlink::SetTextToDisplay(const QString& value){ setProperty("TextToDisplay", QVariant(value)); }

inline Office::MsoHyperlinkType Hyperlink::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoHyperlinkType*)qax_result.constData();
}

inline void Hyperlink::AddToFavorites()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Hyperlink::CreateNewDocument(const QString& FileName, Office::MsoTriState EditNow, Office::MsoTriState Overwrite)
{
    void *_a[] = {0, (void*)&FileName, (void*)&EditNow, (void*)&Overwrite};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Hyperlink::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Hyperlink::Follow()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline PowerPoint::Application* PageSetup::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int PageSetup::FirstSlideNumber() const
{
    QVariant qax_result = property("FirstSlideNumber");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void PageSetup::SetFirstSlideNumber(int value){ setProperty("FirstSlideNumber", QVariant(value)); }

inline Office::MsoOrientation PageSetup::NotesOrientation() const
{
    QVariant qax_result = property("NotesOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoOrientation*)qax_result.constData();
}
inline void PageSetup::SetNotesOrientation(Office::MsoOrientation value){ setProperty("NotesOrientation", QVariant(value)); }

inline IDispatch* PageSetup::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline double PageSetup::SlideHeight() const
{
    QVariant qax_result = property("SlideHeight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void PageSetup::SetSlideHeight(double value){ setProperty("SlideHeight", QVariant(value)); }

inline Office::MsoOrientation PageSetup::SlideOrientation() const
{
    QVariant qax_result = property("SlideOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoOrientation*)qax_result.constData();
}
inline void PageSetup::SetSlideOrientation(Office::MsoOrientation value){ setProperty("SlideOrientation", QVariant(value)); }

inline PowerPoint::PpSlideSizeType PageSetup::SlideSize() const
{
    QVariant qax_result = property("SlideSize");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSlideSizeType*)qax_result.constData();
}
inline void PageSetup::SetSlideSize(PowerPoint::PpSlideSizeType value){ setProperty("SlideSize", QVariant(value)); }

inline double PageSetup::SlideWidth() const
{
    QVariant qax_result = property("SlideWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void PageSetup::SetSlideWidth(double value){ setProperty("SlideWidth", QVariant(value)); }


inline PowerPoint::Application* Fonts::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Fonts::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Fonts::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Fonts::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Font* Fonts::Item(const QVariant& Index)
{
    PowerPoint::Font* qax_result = 0;
    qRegisterMetaType("Font*", &qax_result);
    qRegisterMetaType("Font", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void Fonts::Replace(const QString& Original, const QString& Replacement)
{
    void *_a[] = {0, (void*)&Original, (void*)&Replacement};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline QVariant Fonts::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline PowerPoint::Application* ExtraColors::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int ExtraColors::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* ExtraColors::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* ExtraColors::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void ExtraColors::Add(int Type)
{
    void *_a[] = {0, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline int ExtraColors::Item(int Index)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QVariant ExtraColors::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline PowerPoint::Application* Slides::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Slides::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Slides::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Slides::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Slide* Slides::Add(int Index, PowerPoint::PpSlideLayout Layout)
{
    PowerPoint::Slide* qax_result = 0;
    qRegisterMetaType("Slide*", &qax_result);
    qRegisterMetaType("Slide", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index, (void*)&Layout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::Slide* Slides::FindBySlideID(int SlideID)
{
    PowerPoint::Slide* qax_result = 0;
    qRegisterMetaType("Slide*", &qax_result);
    qRegisterMetaType("Slide", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&SlideID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int Slides::InsertFromFile(const QString& FileName, int Index)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int Slides::InsertFromFile(const QString& FileName, int Index, int SlideStart)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&Index, (void*)&SlideStart};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int Slides::InsertFromFile(const QString& FileName, int Index, int SlideStart, int SlideEnd)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&Index, (void*)&SlideStart, (void*)&SlideEnd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline PowerPoint::Slide* Slides::Item(const QVariant& Index)
{
    PowerPoint::Slide* qax_result = 0;
    qRegisterMetaType("Slide*", &qax_result);
    qRegisterMetaType("Slide", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline PowerPoint::SlideRange* Slides::Paste()
{
    PowerPoint::SlideRange* qax_result = 0;
    qRegisterMetaType("SlideRange*", &qax_result);
    qRegisterMetaType("SlideRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline PowerPoint::SlideRange* Slides::Paste(int Index)
{
    PowerPoint::SlideRange* qax_result = 0;
    qRegisterMetaType("SlideRange*", &qax_result);
    qRegisterMetaType("SlideRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline PowerPoint::SlideRange* Slides::Range()
{
    PowerPoint::SlideRange* qax_result = 0;
    qRegisterMetaType("SlideRange*", &qax_result);
    qRegisterMetaType("SlideRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline PowerPoint::SlideRange* Slides::Range(const QVariant& Index)
{
    PowerPoint::SlideRange* qax_result = 0;
    qRegisterMetaType("SlideRange*", &qax_result);
    qRegisterMetaType("SlideRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline QVariant Slides::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}


inline PowerPoint::Application* _Slide::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::ShapeRange* _Slide::Background() const
{
    PowerPoint::ShapeRange* qax_pointer = 0;
    qRegisterMetaType("ShapeRange*", &qax_pointer);
    qRegisterMetaType("ShapeRange", qax_pointer);
    QVariant qax_result = property("Background");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ShapeRange**)qax_result.constData();
}

inline PowerPoint::ColorScheme* _Slide::ColorScheme() const
{
    PowerPoint::ColorScheme* qax_pointer = 0;
    qRegisterMetaType("ColorScheme*", &qax_pointer);
    qRegisterMetaType("ColorScheme", qax_pointer);
    QVariant qax_result = property("ColorScheme");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorScheme**)qax_result.constData();
}
inline void _Slide::SetColorScheme(PowerPoint::ColorScheme* value){
    int typeId = qRegisterMetaType("PowerPoint::ColorScheme*", &value);
    setProperty("ColorScheme", QVariant(typeId, &value));
}

inline PowerPoint::Comments* _Slide::Comments() const
{
    PowerPoint::Comments* qax_pointer = 0;
    qRegisterMetaType("Comments*", &qax_pointer);
    qRegisterMetaType("Comments", qax_pointer);
    QVariant qax_result = property("Comments");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Comments**)qax_result.constData();
}

inline PowerPoint::Design* _Slide::Design() const
{
    PowerPoint::Design* qax_pointer = 0;
    qRegisterMetaType("Design*", &qax_pointer);
    qRegisterMetaType("Design", qax_pointer);
    QVariant qax_result = property("Design");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Design**)qax_result.constData();
}
inline void _Slide::SetDesign(PowerPoint::Design* value){
    int typeId = qRegisterMetaType("PowerPoint::Design*", &value);
    setProperty("Design", QVariant(typeId, &value));
}

inline Office::MsoTriState _Slide::DisplayMasterShapes() const
{
    QVariant qax_result = property("DisplayMasterShapes");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void _Slide::SetDisplayMasterShapes(Office::MsoTriState value){ setProperty("DisplayMasterShapes", QVariant(value)); }

inline Office::MsoTriState _Slide::FollowMasterBackground() const
{
    QVariant qax_result = property("FollowMasterBackground");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void _Slide::SetFollowMasterBackground(Office::MsoTriState value){ setProperty("FollowMasterBackground", QVariant(value)); }

inline PowerPoint::HeadersFooters* _Slide::HeadersFooters() const
{
    PowerPoint::HeadersFooters* qax_pointer = 0;
    qRegisterMetaType("HeadersFooters*", &qax_pointer);
    qRegisterMetaType("HeadersFooters", qax_pointer);
    QVariant qax_result = property("HeadersFooters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::HeadersFooters**)qax_result.constData();
}

inline PowerPoint::Hyperlinks* _Slide::Hyperlinks() const
{
    PowerPoint::Hyperlinks* qax_pointer = 0;
    qRegisterMetaType("Hyperlinks*", &qax_pointer);
    qRegisterMetaType("Hyperlinks", qax_pointer);
    QVariant qax_result = property("Hyperlinks");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Hyperlinks**)qax_result.constData();
}

inline PowerPoint::PpSlideLayout _Slide::Layout() const
{
    QVariant qax_result = property("Layout");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSlideLayout*)qax_result.constData();
}
inline void _Slide::SetLayout(PowerPoint::PpSlideLayout value){ setProperty("Layout", QVariant(value)); }

inline PowerPoint::_Master* _Slide::Master() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("Master");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline QString _Slide::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Slide::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline PowerPoint::SlideRange* _Slide::NotesPage() const
{
    PowerPoint::SlideRange* qax_pointer = 0;
    qRegisterMetaType("SlideRange*", &qax_pointer);
    qRegisterMetaType("SlideRange", qax_pointer);
    QVariant qax_result = property("NotesPage");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideRange**)qax_result.constData();
}

inline IDispatch* _Slide::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int _Slide::PrintSteps() const
{
    QVariant qax_result = property("PrintSteps");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::Scripts* _Slide::Scripts() const
{
    Office::Scripts* qax_pointer = 0;
    qRegisterMetaType("Office::Scripts*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Scripts", qax_pointer);
#endif
    QVariant qax_result = property("Scripts");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Scripts**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::Shapes* _Slide::Shapes() const
{
    PowerPoint::Shapes* qax_pointer = 0;
    qRegisterMetaType("Shapes*", &qax_pointer);
    qRegisterMetaType("Shapes", qax_pointer);
    QVariant qax_result = property("Shapes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shapes**)qax_result.constData();
}

inline int _Slide::SlideID() const
{
    QVariant qax_result = property("SlideID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int _Slide::SlideIndex() const
{
    QVariant qax_result = property("SlideIndex");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int _Slide::SlideNumber() const
{
    QVariant qax_result = property("SlideNumber");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::SlideShowTransition* _Slide::SlideShowTransition() const
{
    PowerPoint::SlideShowTransition* qax_pointer = 0;
    qRegisterMetaType("SlideShowTransition*", &qax_pointer);
    qRegisterMetaType("SlideShowTransition", qax_pointer);
    QVariant qax_result = property("SlideShowTransition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowTransition**)qax_result.constData();
}

inline PowerPoint::Tags* _Slide::Tags() const
{
    PowerPoint::Tags* qax_pointer = 0;
    qRegisterMetaType("Tags*", &qax_pointer);
    qRegisterMetaType("Tags", qax_pointer);
    QVariant qax_result = property("Tags");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Tags**)qax_result.constData();
}

inline PowerPoint::TimeLine* _Slide::TimeLine() const
{
    PowerPoint::TimeLine* qax_pointer = 0;
    qRegisterMetaType("TimeLine*", &qax_pointer);
    qRegisterMetaType("TimeLine", qax_pointer);
    QVariant qax_result = property("TimeLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TimeLine**)qax_result.constData();
}

inline void _Slide::ApplyTemplate(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void _Slide::Copy()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void _Slide::Cut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void _Slide::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline PowerPoint::SlideRange* _Slide::Duplicate()
{
    PowerPoint::SlideRange* qax_result = 0;
    qRegisterMetaType("SlideRange*", &qax_result);
    qRegisterMetaType("SlideRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void _Slide::Export(const QString& FileName, const QString& FilterName)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FilterName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void _Slide::Export(const QString& FileName, const QString& FilterName, int ScaleWidth)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FilterName, (void*)&ScaleWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void _Slide::Export(const QString& FileName, const QString& FilterName, int ScaleWidth, int ScaleHeight)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FilterName, (void*)&ScaleWidth, (void*)&ScaleHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void _Slide::MoveTo(int toPos)
{
    void *_a[] = {0, (void*)&toPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void _Slide::Select()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline PowerPoint::Application* SlideRange::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::ShapeRange* SlideRange::Background() const
{
    PowerPoint::ShapeRange* qax_pointer = 0;
    qRegisterMetaType("ShapeRange*", &qax_pointer);
    qRegisterMetaType("ShapeRange", qax_pointer);
    QVariant qax_result = property("Background");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ShapeRange**)qax_result.constData();
}

inline PowerPoint::ColorScheme* SlideRange::ColorScheme() const
{
    PowerPoint::ColorScheme* qax_pointer = 0;
    qRegisterMetaType("ColorScheme*", &qax_pointer);
    qRegisterMetaType("ColorScheme", qax_pointer);
    QVariant qax_result = property("ColorScheme");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorScheme**)qax_result.constData();
}
inline void SlideRange::SetColorScheme(PowerPoint::ColorScheme* value){
    int typeId = qRegisterMetaType("PowerPoint::ColorScheme*", &value);
    setProperty("ColorScheme", QVariant(typeId, &value));
}

inline PowerPoint::Comments* SlideRange::Comments() const
{
    PowerPoint::Comments* qax_pointer = 0;
    qRegisterMetaType("Comments*", &qax_pointer);
    qRegisterMetaType("Comments", qax_pointer);
    QVariant qax_result = property("Comments");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Comments**)qax_result.constData();
}

inline int SlideRange::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::Design* SlideRange::Design() const
{
    PowerPoint::Design* qax_pointer = 0;
    qRegisterMetaType("Design*", &qax_pointer);
    qRegisterMetaType("Design", qax_pointer);
    QVariant qax_result = property("Design");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Design**)qax_result.constData();
}
inline void SlideRange::SetDesign(PowerPoint::Design* value){
    int typeId = qRegisterMetaType("PowerPoint::Design*", &value);
    setProperty("Design", QVariant(typeId, &value));
}

inline Office::MsoTriState SlideRange::DisplayMasterShapes() const
{
    QVariant qax_result = property("DisplayMasterShapes");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void SlideRange::SetDisplayMasterShapes(Office::MsoTriState value){ setProperty("DisplayMasterShapes", QVariant(value)); }

inline Office::MsoTriState SlideRange::FollowMasterBackground() const
{
    QVariant qax_result = property("FollowMasterBackground");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void SlideRange::SetFollowMasterBackground(Office::MsoTriState value){ setProperty("FollowMasterBackground", QVariant(value)); }

inline PowerPoint::HeadersFooters* SlideRange::HeadersFooters() const
{
    PowerPoint::HeadersFooters* qax_pointer = 0;
    qRegisterMetaType("HeadersFooters*", &qax_pointer);
    qRegisterMetaType("HeadersFooters", qax_pointer);
    QVariant qax_result = property("HeadersFooters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::HeadersFooters**)qax_result.constData();
}

inline PowerPoint::Hyperlinks* SlideRange::Hyperlinks() const
{
    PowerPoint::Hyperlinks* qax_pointer = 0;
    qRegisterMetaType("Hyperlinks*", &qax_pointer);
    qRegisterMetaType("Hyperlinks", qax_pointer);
    QVariant qax_result = property("Hyperlinks");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Hyperlinks**)qax_result.constData();
}

inline PowerPoint::PpSlideLayout SlideRange::Layout() const
{
    QVariant qax_result = property("Layout");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSlideLayout*)qax_result.constData();
}
inline void SlideRange::SetLayout(PowerPoint::PpSlideLayout value){ setProperty("Layout", QVariant(value)); }

inline PowerPoint::_Master* SlideRange::Master() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("Master");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline QString SlideRange::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void SlideRange::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline PowerPoint::SlideRange* SlideRange::NotesPage() const
{
    PowerPoint::SlideRange* qax_pointer = 0;
    qRegisterMetaType("SlideRange*", &qax_pointer);
    qRegisterMetaType("SlideRange", qax_pointer);
    QVariant qax_result = property("NotesPage");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideRange**)qax_result.constData();
}

inline IDispatch* SlideRange::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int SlideRange::PrintSteps() const
{
    QVariant qax_result = property("PrintSteps");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::Scripts* SlideRange::Scripts() const
{
    Office::Scripts* qax_pointer = 0;
    qRegisterMetaType("Office::Scripts*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Scripts", qax_pointer);
#endif
    QVariant qax_result = property("Scripts");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Scripts**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::Shapes* SlideRange::Shapes() const
{
    PowerPoint::Shapes* qax_pointer = 0;
    qRegisterMetaType("Shapes*", &qax_pointer);
    qRegisterMetaType("Shapes", qax_pointer);
    QVariant qax_result = property("Shapes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shapes**)qax_result.constData();
}

inline int SlideRange::SlideID() const
{
    QVariant qax_result = property("SlideID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int SlideRange::SlideIndex() const
{
    QVariant qax_result = property("SlideIndex");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int SlideRange::SlideNumber() const
{
    QVariant qax_result = property("SlideNumber");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::SlideShowTransition* SlideRange::SlideShowTransition() const
{
    PowerPoint::SlideShowTransition* qax_pointer = 0;
    qRegisterMetaType("SlideShowTransition*", &qax_pointer);
    qRegisterMetaType("SlideShowTransition", qax_pointer);
    QVariant qax_result = property("SlideShowTransition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowTransition**)qax_result.constData();
}

inline PowerPoint::Tags* SlideRange::Tags() const
{
    PowerPoint::Tags* qax_pointer = 0;
    qRegisterMetaType("Tags*", &qax_pointer);
    qRegisterMetaType("Tags", qax_pointer);
    QVariant qax_result = property("Tags");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Tags**)qax_result.constData();
}

inline PowerPoint::TimeLine* SlideRange::TimeLine() const
{
    PowerPoint::TimeLine* qax_pointer = 0;
    qRegisterMetaType("TimeLine*", &qax_pointer);
    qRegisterMetaType("TimeLine", qax_pointer);
    QVariant qax_result = property("TimeLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TimeLine**)qax_result.constData();
}

inline IUnknown* SlideRange::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void SlideRange::ApplyTemplate(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void SlideRange::Copy()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void SlideRange::Cut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void SlideRange::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline PowerPoint::SlideRange* SlideRange::Duplicate()
{
    PowerPoint::SlideRange* qax_result = 0;
    qRegisterMetaType("SlideRange*", &qax_result);
    qRegisterMetaType("SlideRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void SlideRange::Export(const QString& FileName, const QString& FilterName)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FilterName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void SlideRange::Export(const QString& FileName, const QString& FilterName, int ScaleWidth)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FilterName, (void*)&ScaleWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void SlideRange::Export(const QString& FileName, const QString& FilterName, int ScaleWidth, int ScaleHeight)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FilterName, (void*)&ScaleWidth, (void*)&ScaleHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline PowerPoint::Slide* SlideRange::Item(const QVariant& Index)
{
    PowerPoint::Slide* qax_result = 0;
    qRegisterMetaType("Slide*", &qax_result);
    qRegisterMetaType("Slide", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void SlideRange::MoveTo(int toPos)
{
    void *_a[] = {0, (void*)&toPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void SlideRange::Select()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline QVariant SlideRange::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}


inline PowerPoint::Application* _Master::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::ShapeRange* _Master::Background() const
{
    PowerPoint::ShapeRange* qax_pointer = 0;
    qRegisterMetaType("ShapeRange*", &qax_pointer);
    qRegisterMetaType("ShapeRange", qax_pointer);
    QVariant qax_result = property("Background");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ShapeRange**)qax_result.constData();
}

inline PowerPoint::ColorScheme* _Master::ColorScheme() const
{
    PowerPoint::ColorScheme* qax_pointer = 0;
    qRegisterMetaType("ColorScheme*", &qax_pointer);
    qRegisterMetaType("ColorScheme", qax_pointer);
    QVariant qax_result = property("ColorScheme");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorScheme**)qax_result.constData();
}
inline void _Master::SetColorScheme(PowerPoint::ColorScheme* value){
    int typeId = qRegisterMetaType("PowerPoint::ColorScheme*", &value);
    setProperty("ColorScheme", QVariant(typeId, &value));
}

inline PowerPoint::Design* _Master::Design() const
{
    PowerPoint::Design* qax_pointer = 0;
    qRegisterMetaType("Design*", &qax_pointer);
    qRegisterMetaType("Design", qax_pointer);
    QVariant qax_result = property("Design");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Design**)qax_result.constData();
}

inline PowerPoint::HeadersFooters* _Master::HeadersFooters() const
{
    PowerPoint::HeadersFooters* qax_pointer = 0;
    qRegisterMetaType("HeadersFooters*", &qax_pointer);
    qRegisterMetaType("HeadersFooters", qax_pointer);
    QVariant qax_result = property("HeadersFooters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::HeadersFooters**)qax_result.constData();
}

inline double _Master::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline PowerPoint::Hyperlinks* _Master::Hyperlinks() const
{
    PowerPoint::Hyperlinks* qax_pointer = 0;
    qRegisterMetaType("Hyperlinks*", &qax_pointer);
    qRegisterMetaType("Hyperlinks", qax_pointer);
    QVariant qax_result = property("Hyperlinks");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Hyperlinks**)qax_result.constData();
}

inline QString _Master::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Master::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IDispatch* _Master::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::Scripts* _Master::Scripts() const
{
    Office::Scripts* qax_pointer = 0;
    qRegisterMetaType("Office::Scripts*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Scripts", qax_pointer);
#endif
    QVariant qax_result = property("Scripts");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Scripts**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::Shapes* _Master::Shapes() const
{
    PowerPoint::Shapes* qax_pointer = 0;
    qRegisterMetaType("Shapes*", &qax_pointer);
    qRegisterMetaType("Shapes", qax_pointer);
    QVariant qax_result = property("Shapes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shapes**)qax_result.constData();
}

inline PowerPoint::SlideShowTransition* _Master::SlideShowTransition() const
{
    PowerPoint::SlideShowTransition* qax_pointer = 0;
    qRegisterMetaType("SlideShowTransition*", &qax_pointer);
    qRegisterMetaType("SlideShowTransition", qax_pointer);
    QVariant qax_result = property("SlideShowTransition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowTransition**)qax_result.constData();
}

inline PowerPoint::TextStyles* _Master::TextStyles() const
{
    PowerPoint::TextStyles* qax_pointer = 0;
    qRegisterMetaType("TextStyles*", &qax_pointer);
    qRegisterMetaType("TextStyles", qax_pointer);
    QVariant qax_result = property("TextStyles");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TextStyles**)qax_result.constData();
}

inline PowerPoint::TimeLine* _Master::TimeLine() const
{
    PowerPoint::TimeLine* qax_pointer = 0;
    qRegisterMetaType("TimeLine*", &qax_pointer);
    qRegisterMetaType("TimeLine", qax_pointer);
    QVariant qax_result = property("TimeLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TimeLine**)qax_result.constData();
}

inline double _Master::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline void _Master::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline PowerPoint::Application* Slide::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::ShapeRange* Slide::Background() const
{
    PowerPoint::ShapeRange* qax_pointer = 0;
    qRegisterMetaType("ShapeRange*", &qax_pointer);
    qRegisterMetaType("ShapeRange", qax_pointer);
    QVariant qax_result = property("Background");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ShapeRange**)qax_result.constData();
}

inline PowerPoint::ColorScheme* Slide::ColorScheme() const
{
    PowerPoint::ColorScheme* qax_pointer = 0;
    qRegisterMetaType("ColorScheme*", &qax_pointer);
    qRegisterMetaType("ColorScheme", qax_pointer);
    QVariant qax_result = property("ColorScheme");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorScheme**)qax_result.constData();
}
inline void Slide::SetColorScheme(PowerPoint::ColorScheme* value){
    int typeId = qRegisterMetaType("PowerPoint::ColorScheme*", &value);
    setProperty("ColorScheme", QVariant(typeId, &value));
}

inline PowerPoint::Comments* Slide::Comments() const
{
    PowerPoint::Comments* qax_pointer = 0;
    qRegisterMetaType("Comments*", &qax_pointer);
    qRegisterMetaType("Comments", qax_pointer);
    QVariant qax_result = property("Comments");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Comments**)qax_result.constData();
}

inline PowerPoint::Design* Slide::Design() const
{
    PowerPoint::Design* qax_pointer = 0;
    qRegisterMetaType("Design*", &qax_pointer);
    qRegisterMetaType("Design", qax_pointer);
    QVariant qax_result = property("Design");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Design**)qax_result.constData();
}
inline void Slide::SetDesign(PowerPoint::Design* value){
    int typeId = qRegisterMetaType("PowerPoint::Design*", &value);
    setProperty("Design", QVariant(typeId, &value));
}

inline Office::MsoTriState Slide::DisplayMasterShapes() const
{
    QVariant qax_result = property("DisplayMasterShapes");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Slide::SetDisplayMasterShapes(Office::MsoTriState value){ setProperty("DisplayMasterShapes", QVariant(value)); }

inline Office::MsoTriState Slide::FollowMasterBackground() const
{
    QVariant qax_result = property("FollowMasterBackground");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Slide::SetFollowMasterBackground(Office::MsoTriState value){ setProperty("FollowMasterBackground", QVariant(value)); }

inline PowerPoint::HeadersFooters* Slide::HeadersFooters() const
{
    PowerPoint::HeadersFooters* qax_pointer = 0;
    qRegisterMetaType("HeadersFooters*", &qax_pointer);
    qRegisterMetaType("HeadersFooters", qax_pointer);
    QVariant qax_result = property("HeadersFooters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::HeadersFooters**)qax_result.constData();
}

inline PowerPoint::Hyperlinks* Slide::Hyperlinks() const
{
    PowerPoint::Hyperlinks* qax_pointer = 0;
    qRegisterMetaType("Hyperlinks*", &qax_pointer);
    qRegisterMetaType("Hyperlinks", qax_pointer);
    QVariant qax_result = property("Hyperlinks");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Hyperlinks**)qax_result.constData();
}

inline PowerPoint::PpSlideLayout Slide::Layout() const
{
    QVariant qax_result = property("Layout");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSlideLayout*)qax_result.constData();
}
inline void Slide::SetLayout(PowerPoint::PpSlideLayout value){ setProperty("Layout", QVariant(value)); }

inline PowerPoint::_Master* Slide::Master() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("Master");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline QString Slide::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Slide::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline PowerPoint::SlideRange* Slide::NotesPage() const
{
    PowerPoint::SlideRange* qax_pointer = 0;
    qRegisterMetaType("SlideRange*", &qax_pointer);
    qRegisterMetaType("SlideRange", qax_pointer);
    QVariant qax_result = property("NotesPage");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideRange**)qax_result.constData();
}

inline IDispatch* Slide::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int Slide::PrintSteps() const
{
    QVariant qax_result = property("PrintSteps");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::Scripts* Slide::Scripts() const
{
    Office::Scripts* qax_pointer = 0;
    qRegisterMetaType("Office::Scripts*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Scripts", qax_pointer);
#endif
    QVariant qax_result = property("Scripts");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Scripts**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::Shapes* Slide::Shapes() const
{
    PowerPoint::Shapes* qax_pointer = 0;
    qRegisterMetaType("Shapes*", &qax_pointer);
    qRegisterMetaType("Shapes", qax_pointer);
    QVariant qax_result = property("Shapes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shapes**)qax_result.constData();
}

inline int Slide::SlideID() const
{
    QVariant qax_result = property("SlideID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Slide::SlideIndex() const
{
    QVariant qax_result = property("SlideIndex");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Slide::SlideNumber() const
{
    QVariant qax_result = property("SlideNumber");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::SlideShowTransition* Slide::SlideShowTransition() const
{
    PowerPoint::SlideShowTransition* qax_pointer = 0;
    qRegisterMetaType("SlideShowTransition*", &qax_pointer);
    qRegisterMetaType("SlideShowTransition", qax_pointer);
    QVariant qax_result = property("SlideShowTransition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowTransition**)qax_result.constData();
}

inline PowerPoint::Tags* Slide::Tags() const
{
    PowerPoint::Tags* qax_pointer = 0;
    qRegisterMetaType("Tags*", &qax_pointer);
    qRegisterMetaType("Tags", qax_pointer);
    QVariant qax_result = property("Tags");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Tags**)qax_result.constData();
}

inline PowerPoint::TimeLine* Slide::TimeLine() const
{
    PowerPoint::TimeLine* qax_pointer = 0;
    qRegisterMetaType("TimeLine*", &qax_pointer);
    qRegisterMetaType("TimeLine", qax_pointer);
    QVariant qax_result = property("TimeLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TimeLine**)qax_result.constData();
}

inline void Slide::ApplyTemplate(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Slide::Copy()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Slide::Cut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Slide::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline PowerPoint::SlideRange* Slide::Duplicate()
{
    PowerPoint::SlideRange* qax_result = 0;
    qRegisterMetaType("SlideRange*", &qax_result);
    qRegisterMetaType("SlideRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void Slide::Export(const QString& FileName, const QString& FilterName)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FilterName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void Slide::Export(const QString& FileName, const QString& FilterName, int ScaleWidth)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FilterName, (void*)&ScaleWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void Slide::Export(const QString& FileName, const QString& FilterName, int ScaleWidth, int ScaleHeight)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FilterName, (void*)&ScaleWidth, (void*)&ScaleHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void Slide::MoveTo(int toPos)
{
    void *_a[] = {0, (void*)&toPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void Slide::Select()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline PowerPoint::Application* ColorSchemes::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int ColorSchemes::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* ColorSchemes::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* ColorSchemes::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::ColorScheme* ColorSchemes::Add()
{
    PowerPoint::ColorScheme* qax_result = 0;
    qRegisterMetaType("ColorScheme*", &qax_result);
    qRegisterMetaType("ColorScheme", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::ColorScheme* ColorSchemes::Add(PowerPoint::ColorScheme* Scheme)
{
    PowerPoint::ColorScheme* qax_result = 0;
    qRegisterMetaType("ColorScheme*", &qax_result);
    qRegisterMetaType("ColorScheme", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Scheme};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::ColorScheme* ColorSchemes::Item(int Index)
{
    PowerPoint::ColorScheme* qax_result = 0;
    qRegisterMetaType("ColorScheme*", &qax_result);
    qRegisterMetaType("ColorScheme", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant ColorSchemes::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline PowerPoint::Application* ColorScheme::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int ColorScheme::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* ColorScheme::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* ColorScheme::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::RGBColor* ColorScheme::Colors(PowerPoint::PpColorSchemeIndex SchemeColor)
{
    PowerPoint::RGBColor* qax_result = 0;
    qRegisterMetaType("RGBColor*", &qax_result);
    qRegisterMetaType("RGBColor", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&SchemeColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void ColorScheme::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline QVariant ColorScheme::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline PowerPoint::Application* RGBColor::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline IDispatch* RGBColor::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int RGBColor::RGB() const
{
    QVariant qax_result = property("RGB");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void RGBColor::SetRGB(int value){ setProperty("RGB", QVariant(value)); }


inline Office::MsoTriState SlideShowTransition::AdvanceOnClick() const
{
    QVariant qax_result = property("AdvanceOnClick");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void SlideShowTransition::SetAdvanceOnClick(Office::MsoTriState value){ setProperty("AdvanceOnClick", QVariant(value)); }

inline Office::MsoTriState SlideShowTransition::AdvanceOnTime() const
{
    QVariant qax_result = property("AdvanceOnTime");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void SlideShowTransition::SetAdvanceOnTime(Office::MsoTriState value){ setProperty("AdvanceOnTime", QVariant(value)); }

inline double SlideShowTransition::AdvanceTime() const
{
    QVariant qax_result = property("AdvanceTime");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void SlideShowTransition::SetAdvanceTime(double value){ setProperty("AdvanceTime", QVariant(value)); }

inline PowerPoint::Application* SlideShowTransition::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::PpEntryEffect SlideShowTransition::EntryEffect() const
{
    QVariant qax_result = property("EntryEffect");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpEntryEffect*)qax_result.constData();
}
inline void SlideShowTransition::SetEntryEffect(PowerPoint::PpEntryEffect value){ setProperty("EntryEffect", QVariant(value)); }

inline Office::MsoTriState SlideShowTransition::Hidden() const
{
    QVariant qax_result = property("Hidden");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void SlideShowTransition::SetHidden(Office::MsoTriState value){ setProperty("Hidden", QVariant(value)); }

inline Office::MsoTriState SlideShowTransition::LoopSoundUntilNext() const
{
    QVariant qax_result = property("LoopSoundUntilNext");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void SlideShowTransition::SetLoopSoundUntilNext(Office::MsoTriState value){ setProperty("LoopSoundUntilNext", QVariant(value)); }

inline IDispatch* SlideShowTransition::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::SoundEffect* SlideShowTransition::SoundEffect() const
{
    PowerPoint::SoundEffect* qax_pointer = 0;
    qRegisterMetaType("SoundEffect*", &qax_pointer);
    qRegisterMetaType("SoundEffect", qax_pointer);
    QVariant qax_result = property("SoundEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SoundEffect**)qax_result.constData();
}

inline PowerPoint::PpTransitionSpeed SlideShowTransition::Speed() const
{
    QVariant qax_result = property("Speed");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpTransitionSpeed*)qax_result.constData();
}
inline void SlideShowTransition::SetSpeed(PowerPoint::PpTransitionSpeed value){ setProperty("Speed", QVariant(value)); }


inline PowerPoint::Application* SoundEffect::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline QString SoundEffect::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void SoundEffect::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IDispatch* SoundEffect::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::PpSoundEffectType SoundEffect::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSoundEffectType*)qax_result.constData();
}
inline void SoundEffect::SetType(PowerPoint::PpSoundEffectType value){ setProperty("Type", QVariant(value)); }

inline void SoundEffect::ImportFromFile(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void SoundEffect::Play()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}


inline QString SoundFormat::SourceFullName() const
{
    QVariant qax_result = property("SourceFullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::PpSoundFormatType SoundFormat::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpSoundFormatType*)qax_result.constData();
}

inline PpSoundFormatType SoundFormat::Export(const QString& FileName)
{
    PpSoundFormatType qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void SoundFormat::Import(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void SoundFormat::Play()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline PowerPoint::Application* HeadersFooters::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::HeaderFooter* HeadersFooters::DateAndTime() const
{
    PowerPoint::HeaderFooter* qax_pointer = 0;
    qRegisterMetaType("HeaderFooter*", &qax_pointer);
    qRegisterMetaType("HeaderFooter", qax_pointer);
    QVariant qax_result = property("DateAndTime");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::HeaderFooter**)qax_result.constData();
}

inline Office::MsoTriState HeadersFooters::DisplayOnTitleSlide() const
{
    QVariant qax_result = property("DisplayOnTitleSlide");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void HeadersFooters::SetDisplayOnTitleSlide(Office::MsoTriState value){ setProperty("DisplayOnTitleSlide", QVariant(value)); }

inline PowerPoint::HeaderFooter* HeadersFooters::Footer() const
{
    PowerPoint::HeaderFooter* qax_pointer = 0;
    qRegisterMetaType("HeaderFooter*", &qax_pointer);
    qRegisterMetaType("HeaderFooter", qax_pointer);
    QVariant qax_result = property("Footer");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::HeaderFooter**)qax_result.constData();
}

inline PowerPoint::HeaderFooter* HeadersFooters::Header() const
{
    PowerPoint::HeaderFooter* qax_pointer = 0;
    qRegisterMetaType("HeaderFooter*", &qax_pointer);
    qRegisterMetaType("HeaderFooter", qax_pointer);
    QVariant qax_result = property("Header");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::HeaderFooter**)qax_result.constData();
}

inline IDispatch* HeadersFooters::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::HeaderFooter* HeadersFooters::SlideNumber() const
{
    PowerPoint::HeaderFooter* qax_pointer = 0;
    qRegisterMetaType("HeaderFooter*", &qax_pointer);
    qRegisterMetaType("HeaderFooter", qax_pointer);
    QVariant qax_result = property("SlideNumber");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::HeaderFooter**)qax_result.constData();
}

inline void HeadersFooters::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline IDispatch* Shapes::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int Shapes::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Shapes::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::MsoTriState Shapes::HasTitle() const
{
    QVariant qax_result = property("HasTitle");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline IDispatch* Shapes::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::Placeholders* Shapes::Placeholders() const
{
    PowerPoint::Placeholders* qax_pointer = 0;
    qRegisterMetaType("Placeholders*", &qax_pointer);
    qRegisterMetaType("Placeholders", qax_pointer);
    QVariant qax_result = property("Placeholders");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Placeholders**)qax_result.constData();
}

inline PowerPoint::Shape* Shapes::Title() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("Title");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}

inline IUnknown* Shapes::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Shape* Shapes::AddCallout(Office::MsoCalloutType Type, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddCanvas(double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddComment()
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddComment(double Left)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddComment(double Left, double Top)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddComment(double Left, double Top, double Width)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddComment(double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddConnector(Office::MsoConnectorType Type, double BeginX, double BeginY, double EndX, double EndY)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&BeginX, (void*)&BeginY, (void*)&EndX, (void*)&EndY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddCurve(const QVariant& SafeArrayOfPoints)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&SafeArrayOfPoints};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddDiagram(Office::MsoDiagramType Type, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddLabel(Office::MsoTextOrientation Orientation, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Orientation, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddLine(double BeginX, double BeginY, double EndX, double EndY)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&BeginX, (void*)&BeginY, (void*)&EndX, (void*)&EndY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddMediaObject(const QString& FileName)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddMediaObject(const QString& FileName, double Left)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddMediaObject(const QString& FileName, double Left, double Top)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddMediaObject(const QString& FileName, double Left, double Top, double Width)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddMediaObject(const QString& FileName, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject()
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject(double Left)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject(double Left, double Top)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject(double Left, double Top, double Width)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject(double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height, (void*)&ClassName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height, (void*)&ClassName, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName, Office::MsoTriState DisplayAsIcon)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height, (void*)&ClassName, (void*)&FileName, (void*)&DisplayAsIcon};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName, Office::MsoTriState DisplayAsIcon, const QString& IconFileName)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height, (void*)&ClassName, (void*)&FileName, (void*)&DisplayAsIcon, (void*)&IconFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height, (void*)&ClassName, (void*)&FileName, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height, (void*)&ClassName, (void*)&FileName, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex, (void*)&IconLabel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddOLEObject(double Left, double Top, double Width, double Height, const QString& ClassName, const QString& FileName, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel, Office::MsoTriState Link)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height, (void*)&ClassName, (void*)&FileName, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex, (void*)&IconLabel, (void*)&Link};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&LinkToFile, (void*)&SaveWithDocument, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top, double Width)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&LinkToFile, (void*)&SaveWithDocument, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&LinkToFile, (void*)&SaveWithDocument, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddPlaceholder(PowerPoint::PpPlaceholderType Type)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddPlaceholder(PowerPoint::PpPlaceholderType Type, double Left)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddPlaceholder(PowerPoint::PpPlaceholderType Type, double Left, double Top)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddPlaceholder(PowerPoint::PpPlaceholderType Type, double Left, double Top, double Width)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddPlaceholder(PowerPoint::PpPlaceholderType Type, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddPolyline(const QVariant& SafeArrayOfPoints)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&SafeArrayOfPoints};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddShape(Office::MsoAutoShapeType Type, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddTable(int NumRows, int NumColumns)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&NumRows, (void*)&NumColumns};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddTable(int NumRows, int NumColumns, double Left)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&NumRows, (void*)&NumColumns, (void*)&Left};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddTable(int NumRows, int NumColumns, double Left, double Top)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&NumRows, (void*)&NumColumns, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddTable(int NumRows, int NumColumns, double Left, double Top, double Width)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&NumRows, (void*)&NumColumns, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddTable(int NumRows, int NumColumns, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&NumRows, (void*)&NumColumns, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddTextEffect(Office::MsoPresetTextEffect PresetTextEffect, const QString& Text, const QString& FontName, double FontSize, Office::MsoTriState FontBold, Office::MsoTriState FontItalic, double Left, double Top)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&PresetTextEffect, (void*)&Text, (void*)&FontName, (void*)&FontSize, (void*)&FontBold, (void*)&FontItalic, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddTextbox(Office::MsoTextOrientation Orientation, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Orientation, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::AddTitle()
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline PowerPoint::FreeformBuilder* Shapes::BuildFreeform(Office::MsoEditingType EditingType, double X1, double Y1)
{
    PowerPoint::FreeformBuilder* qax_result = 0;
    qRegisterMetaType("FreeformBuilder*", &qax_result);
    qRegisterMetaType("FreeformBuilder", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&EditingType, (void*)&X1, (void*)&Y1};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline PowerPoint::Shape* Shapes::Item(const QVariant& Index)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* Shapes::Paste()
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* Shapes::PasteSpecial()
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* Shapes::PasteSpecial(PowerPoint::PpPasteDataType DataType)
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* Shapes::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon)
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType, (void*)&DisplayAsIcon};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* Shapes::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName)
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* Shapes::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex)
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* Shapes::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel)
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex, (void*)&IconLabel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* Shapes::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel, Office::MsoTriState Link)
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex, (void*)&IconLabel, (void*)&Link};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* Shapes::Range()
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* Shapes::Range(const QVariant& Index)
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline void Shapes::SelectAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}


inline PowerPoint::Application* Placeholders::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Placeholders::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Placeholders::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Placeholders::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Shape* Placeholders::Item(int Index)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant Placeholders::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline PowerPoint::Application* PlaceholderFormat::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline IDispatch* PlaceholderFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::PpPlaceholderType PlaceholderFormat::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpPlaceholderType*)qax_result.constData();
}


inline IDispatch* FreeformBuilder::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int FreeformBuilder::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* FreeformBuilder::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline void FreeformBuilder::AddNodes(Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1)
{
    void *_a[] = {0, (void*)&SegmentType, (void*)&EditingType, (void*)&X1, (void*)&Y1};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void FreeformBuilder::AddNodes(Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2)
{
    void *_a[] = {0, (void*)&SegmentType, (void*)&EditingType, (void*)&X1, (void*)&Y1, (void*)&X2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void FreeformBuilder::AddNodes(Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2)
{
    void *_a[] = {0, (void*)&SegmentType, (void*)&EditingType, (void*)&X1, (void*)&Y1, (void*)&X2, (void*)&Y2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void FreeformBuilder::AddNodes(Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2, double X3)
{
    void *_a[] = {0, (void*)&SegmentType, (void*)&EditingType, (void*)&X1, (void*)&Y1, (void*)&X2, (void*)&Y2, (void*)&X3};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void FreeformBuilder::AddNodes(Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2, double X3, double Y3)
{
    void *_a[] = {0, (void*)&SegmentType, (void*)&EditingType, (void*)&X1, (void*)&Y1, (void*)&X2, (void*)&Y2, (void*)&X3, (void*)&Y3};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline PowerPoint::Shape* FreeformBuilder::ConvertToShape()
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}


inline PowerPoint::ActionSettings* Shape::ActionSettings() const
{
    PowerPoint::ActionSettings* qax_pointer = 0;
    qRegisterMetaType("ActionSettings*", &qax_pointer);
    qRegisterMetaType("ActionSettings", qax_pointer);
    QVariant qax_result = property("ActionSettings");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ActionSettings**)qax_result.constData();
}

inline PowerPoint::Adjustments* Shape::Adjustments() const
{
    PowerPoint::Adjustments* qax_pointer = 0;
    qRegisterMetaType("Adjustments*", &qax_pointer);
    qRegisterMetaType("Adjustments", qax_pointer);
    QVariant qax_result = property("Adjustments");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Adjustments**)qax_result.constData();
}

inline QString Shape::AlternativeText() const
{
    QVariant qax_result = property("AlternativeText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Shape::SetAlternativeText(const QString& value){ setProperty("AlternativeText", QVariant(value)); }

inline PowerPoint::AnimationSettings* Shape::AnimationSettings() const
{
    PowerPoint::AnimationSettings* qax_pointer = 0;
    qRegisterMetaType("AnimationSettings*", &qax_pointer);
    qRegisterMetaType("AnimationSettings", qax_pointer);
    QVariant qax_result = property("AnimationSettings");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::AnimationSettings**)qax_result.constData();
}

inline IDispatch* Shape::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoAutoShapeType Shape::AutoShapeType() const
{
    QVariant qax_result = property("AutoShapeType");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoAutoShapeType*)qax_result.constData();
}
inline void Shape::SetAutoShapeType(Office::MsoAutoShapeType value){ setProperty("AutoShapeType", QVariant(value)); }

inline Office::MsoBlackWhiteMode Shape::BlackWhiteMode() const
{
    QVariant qax_result = property("BlackWhiteMode");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoBlackWhiteMode*)qax_result.constData();
}
inline void Shape::SetBlackWhiteMode(Office::MsoBlackWhiteMode value){ setProperty("BlackWhiteMode", QVariant(value)); }

inline PowerPoint::CalloutFormat* Shape::Callout() const
{
    PowerPoint::CalloutFormat* qax_pointer = 0;
    qRegisterMetaType("CalloutFormat*", &qax_pointer);
    qRegisterMetaType("CalloutFormat", qax_pointer);
    QVariant qax_result = property("Callout");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::CalloutFormat**)qax_result.constData();
}

inline PowerPoint::CanvasShapes* Shape::CanvasItems() const
{
    PowerPoint::CanvasShapes* qax_pointer = 0;
    qRegisterMetaType("CanvasShapes*", &qax_pointer);
    qRegisterMetaType("CanvasShapes", qax_pointer);
    QVariant qax_result = property("CanvasItems");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::CanvasShapes**)qax_result.constData();
}

inline Office::MsoTriState Shape::Child() const
{
    QVariant qax_result = property("Child");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline int Shape::ConnectionSiteCount() const
{
    QVariant qax_result = property("ConnectionSiteCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::MsoTriState Shape::Connector() const
{
    QVariant qax_result = property("Connector");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::ConnectorFormat* Shape::ConnectorFormat() const
{
    PowerPoint::ConnectorFormat* qax_pointer = 0;
    qRegisterMetaType("ConnectorFormat*", &qax_pointer);
    qRegisterMetaType("ConnectorFormat", qax_pointer);
    QVariant qax_result = property("ConnectorFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ConnectorFormat**)qax_result.constData();
}

inline int Shape::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::Diagram* Shape::Diagram() const
{
    PowerPoint::Diagram* qax_pointer = 0;
    qRegisterMetaType("Diagram*", &qax_pointer);
    qRegisterMetaType("Diagram", qax_pointer);
    QVariant qax_result = property("Diagram");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Diagram**)qax_result.constData();
}

inline PowerPoint::DiagramNode* Shape::DiagramNode() const
{
    PowerPoint::DiagramNode* qax_pointer = 0;
    qRegisterMetaType("DiagramNode*", &qax_pointer);
    qRegisterMetaType("DiagramNode", qax_pointer);
    QVariant qax_result = property("DiagramNode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DiagramNode**)qax_result.constData();
}

inline PowerPoint::FillFormat* Shape::Fill() const
{
    PowerPoint::FillFormat* qax_pointer = 0;
    qRegisterMetaType("FillFormat*", &qax_pointer);
    qRegisterMetaType("FillFormat", qax_pointer);
    QVariant qax_result = property("Fill");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::FillFormat**)qax_result.constData();
}

inline PowerPoint::GroupShapes* Shape::GroupItems() const
{
    PowerPoint::GroupShapes* qax_pointer = 0;
    qRegisterMetaType("GroupShapes*", &qax_pointer);
    qRegisterMetaType("GroupShapes", qax_pointer);
    QVariant qax_result = property("GroupItems");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::GroupShapes**)qax_result.constData();
}

inline Office::MsoTriState Shape::HasDiagram() const
{
    QVariant qax_result = property("HasDiagram");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState Shape::HasDiagramNode() const
{
    QVariant qax_result = property("HasDiagramNode");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState Shape::HasTable() const
{
    QVariant qax_result = property("HasTable");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState Shape::HasTextFrame() const
{
    QVariant qax_result = property("HasTextFrame");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline double Shape::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Shape::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline Office::MsoTriState Shape::HorizontalFlip() const
{
    QVariant qax_result = property("HorizontalFlip");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline int Shape::Id() const
{
    QVariant qax_result = property("Id");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double Shape::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Shape::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline PowerPoint::LineFormat* Shape::Line() const
{
    PowerPoint::LineFormat* qax_pointer = 0;
    qRegisterMetaType("LineFormat*", &qax_pointer);
    qRegisterMetaType("LineFormat", qax_pointer);
    QVariant qax_result = property("Line");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::LineFormat**)qax_result.constData();
}

inline PowerPoint::LinkFormat* Shape::LinkFormat() const
{
    PowerPoint::LinkFormat* qax_pointer = 0;
    qRegisterMetaType("LinkFormat*", &qax_pointer);
    qRegisterMetaType("LinkFormat", qax_pointer);
    QVariant qax_result = property("LinkFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::LinkFormat**)qax_result.constData();
}

inline Office::MsoTriState Shape::LockAspectRatio() const
{
    QVariant qax_result = property("LockAspectRatio");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Shape::SetLockAspectRatio(Office::MsoTriState value){ setProperty("LockAspectRatio", QVariant(value)); }

inline PowerPoint::PpMediaType Shape::MediaType() const
{
    QVariant qax_result = property("MediaType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpMediaType*)qax_result.constData();
}

inline QString Shape::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Shape::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline PowerPoint::ShapeNodes* Shape::Nodes() const
{
    PowerPoint::ShapeNodes* qax_pointer = 0;
    qRegisterMetaType("ShapeNodes*", &qax_pointer);
    qRegisterMetaType("ShapeNodes", qax_pointer);
    QVariant qax_result = property("Nodes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ShapeNodes**)qax_result.constData();
}

inline PowerPoint::OLEFormat* Shape::OLEFormat() const
{
    PowerPoint::OLEFormat* qax_pointer = 0;
    qRegisterMetaType("OLEFormat*", &qax_pointer);
    qRegisterMetaType("OLEFormat", qax_pointer);
    QVariant qax_result = property("OLEFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::OLEFormat**)qax_result.constData();
}

inline IDispatch* Shape::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::Shape* Shape::ParentGroup() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("ParentGroup");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}

inline PowerPoint::PictureFormat* Shape::PictureFormat() const
{
    PowerPoint::PictureFormat* qax_pointer = 0;
    qRegisterMetaType("PictureFormat*", &qax_pointer);
    qRegisterMetaType("PictureFormat", qax_pointer);
    QVariant qax_result = property("PictureFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PictureFormat**)qax_result.constData();
}

inline PowerPoint::PlaceholderFormat* Shape::PlaceholderFormat() const
{
    PowerPoint::PlaceholderFormat* qax_pointer = 0;
    qRegisterMetaType("PlaceholderFormat*", &qax_pointer);
    qRegisterMetaType("PlaceholderFormat", qax_pointer);
    QVariant qax_result = property("PlaceholderFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PlaceholderFormat**)qax_result.constData();
}

inline QString Shape::RTF() const
{
    QVariant qax_result = property("RTF");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Shape::SetRTF(const QString& value){ setProperty("RTF", QVariant(value)); }

inline double Shape::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Shape::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline Office::Script* Shape::Script() const
{
    Office::Script* qax_pointer = 0;
    qRegisterMetaType("Office::Script*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Script", qax_pointer);
#endif
    QVariant qax_result = property("Script");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Script**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::ShadowFormat* Shape::Shadow() const
{
    PowerPoint::ShadowFormat* qax_pointer = 0;
    qRegisterMetaType("ShadowFormat*", &qax_pointer);
    qRegisterMetaType("ShadowFormat", qax_pointer);
    QVariant qax_result = property("Shadow");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ShadowFormat**)qax_result.constData();
}

inline PowerPoint::SoundFormat* Shape::SoundFormat() const
{
    PowerPoint::SoundFormat* qax_pointer = 0;
    qRegisterMetaType("SoundFormat*", &qax_pointer);
    qRegisterMetaType("SoundFormat", qax_pointer);
    QVariant qax_result = property("SoundFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SoundFormat**)qax_result.constData();
}

inline PowerPoint::Table* Shape::Table() const
{
    PowerPoint::Table* qax_pointer = 0;
    qRegisterMetaType("Table*", &qax_pointer);
    qRegisterMetaType("Table", qax_pointer);
    QVariant qax_result = property("Table");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Table**)qax_result.constData();
}

inline PowerPoint::Tags* Shape::Tags() const
{
    PowerPoint::Tags* qax_pointer = 0;
    qRegisterMetaType("Tags*", &qax_pointer);
    qRegisterMetaType("Tags", qax_pointer);
    QVariant qax_result = property("Tags");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Tags**)qax_result.constData();
}

inline PowerPoint::TextEffectFormat* Shape::TextEffect() const
{
    PowerPoint::TextEffectFormat* qax_pointer = 0;
    qRegisterMetaType("TextEffectFormat*", &qax_pointer);
    qRegisterMetaType("TextEffectFormat", qax_pointer);
    QVariant qax_result = property("TextEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TextEffectFormat**)qax_result.constData();
}

inline PowerPoint::TextFrame* Shape::TextFrame() const
{
    PowerPoint::TextFrame* qax_pointer = 0;
    qRegisterMetaType("TextFrame*", &qax_pointer);
    qRegisterMetaType("TextFrame", qax_pointer);
    QVariant qax_result = property("TextFrame");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TextFrame**)qax_result.constData();
}

inline PowerPoint::ThreeDFormat* Shape::ThreeD() const
{
    PowerPoint::ThreeDFormat* qax_pointer = 0;
    qRegisterMetaType("ThreeDFormat*", &qax_pointer);
    qRegisterMetaType("ThreeDFormat", qax_pointer);
    QVariant qax_result = property("ThreeD");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ThreeDFormat**)qax_result.constData();
}

inline double Shape::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Shape::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline Office::MsoShapeType Shape::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoShapeType*)qax_result.constData();
}

inline Office::MsoTriState Shape::VerticalFlip() const
{
    QVariant qax_result = property("VerticalFlip");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline QVariant Shape::Vertices() const
{
    QVariant qax_result = property("Vertices");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline Office::MsoTriState Shape::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Shape::SetVisible(Office::MsoTriState value){ setProperty("Visible", QVariant(value)); }

inline double Shape::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Shape::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline int Shape::ZOrderPosition() const
{
    QVariant qax_result = property("ZOrderPosition");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void Shape::Apply()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Shape::CanvasCropBottom(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Shape::CanvasCropLeft(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Shape::CanvasCropRight(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void Shape::CanvasCropTop(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void Shape::Copy()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void Shape::Cut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void Shape::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline PowerPoint::ShapeRange* Shape::Duplicate()
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void Shape::Export(const QString& PathName, PowerPoint::PpShapeFormat Filter)
{
    void *_a[] = {0, (void*)&PathName, (void*)&Filter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void Shape::Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth)
{
    void *_a[] = {0, (void*)&PathName, (void*)&Filter, (void*)&ScaleWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void Shape::Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth, int ScaleHeight)
{
    void *_a[] = {0, (void*)&PathName, (void*)&Filter, (void*)&ScaleWidth, (void*)&ScaleHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void Shape::Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, PowerPoint::PpExportMode ExportMode)
{
    void *_a[] = {0, (void*)&PathName, (void*)&Filter, (void*)&ScaleWidth, (void*)&ScaleHeight, (void*)&ExportMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void Shape::Flip(Office::MsoFlipCmd FlipCmd)
{
    void *_a[] = {0, (void*)&FlipCmd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void Shape::IncrementLeft(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void Shape::IncrementRotation(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void Shape::IncrementTop(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void Shape::PickUp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void Shape::RerouteConnections()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void Shape::ScaleHeight(double Factor, Office::MsoTriState RelativeToOriginalSize)
{
    void *_a[] = {0, (void*)&Factor, (void*)&RelativeToOriginalSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void Shape::ScaleHeight(double Factor, Office::MsoTriState RelativeToOriginalSize, Office::MsoScaleFrom fScale)
{
    void *_a[] = {0, (void*)&Factor, (void*)&RelativeToOriginalSize, (void*)&fScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void Shape::ScaleWidth(double Factor, Office::MsoTriState RelativeToOriginalSize)
{
    void *_a[] = {0, (void*)&Factor, (void*)&RelativeToOriginalSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void Shape::ScaleWidth(double Factor, Office::MsoTriState RelativeToOriginalSize, Office::MsoScaleFrom fScale)
{
    void *_a[] = {0, (void*)&Factor, (void*)&RelativeToOriginalSize, (void*)&fScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void Shape::Select()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void Shape::Select(Office::MsoTriState Replace)
{
    void *_a[] = {0, (void*)&Replace};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void Shape::SetShapesDefaultProperties()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline PowerPoint::ShapeRange* Shape::Ungroup()
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void Shape::ZOrder(Office::MsoZOrderCmd ZOrderCmd)
{
    void *_a[] = {0, (void*)&ZOrderCmd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}


inline PowerPoint::ActionSettings* ShapeRange::ActionSettings() const
{
    PowerPoint::ActionSettings* qax_pointer = 0;
    qRegisterMetaType("ActionSettings*", &qax_pointer);
    qRegisterMetaType("ActionSettings", qax_pointer);
    QVariant qax_result = property("ActionSettings");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ActionSettings**)qax_result.constData();
}

inline PowerPoint::Adjustments* ShapeRange::Adjustments() const
{
    PowerPoint::Adjustments* qax_pointer = 0;
    qRegisterMetaType("Adjustments*", &qax_pointer);
    qRegisterMetaType("Adjustments", qax_pointer);
    QVariant qax_result = property("Adjustments");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Adjustments**)qax_result.constData();
}

inline QString ShapeRange::AlternativeText() const
{
    QVariant qax_result = property("AlternativeText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ShapeRange::SetAlternativeText(const QString& value){ setProperty("AlternativeText", QVariant(value)); }

inline PowerPoint::AnimationSettings* ShapeRange::AnimationSettings() const
{
    PowerPoint::AnimationSettings* qax_pointer = 0;
    qRegisterMetaType("AnimationSettings*", &qax_pointer);
    qRegisterMetaType("AnimationSettings", qax_pointer);
    QVariant qax_result = property("AnimationSettings");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::AnimationSettings**)qax_result.constData();
}

inline IDispatch* ShapeRange::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoAutoShapeType ShapeRange::AutoShapeType() const
{
    QVariant qax_result = property("AutoShapeType");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoAutoShapeType*)qax_result.constData();
}
inline void ShapeRange::SetAutoShapeType(Office::MsoAutoShapeType value){ setProperty("AutoShapeType", QVariant(value)); }

inline Office::MsoBlackWhiteMode ShapeRange::BlackWhiteMode() const
{
    QVariant qax_result = property("BlackWhiteMode");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoBlackWhiteMode*)qax_result.constData();
}
inline void ShapeRange::SetBlackWhiteMode(Office::MsoBlackWhiteMode value){ setProperty("BlackWhiteMode", QVariant(value)); }

inline PowerPoint::CalloutFormat* ShapeRange::Callout() const
{
    PowerPoint::CalloutFormat* qax_pointer = 0;
    qRegisterMetaType("CalloutFormat*", &qax_pointer);
    qRegisterMetaType("CalloutFormat", qax_pointer);
    QVariant qax_result = property("Callout");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::CalloutFormat**)qax_result.constData();
}

inline PowerPoint::CanvasShapes* ShapeRange::CanvasItems() const
{
    PowerPoint::CanvasShapes* qax_pointer = 0;
    qRegisterMetaType("CanvasShapes*", &qax_pointer);
    qRegisterMetaType("CanvasShapes", qax_pointer);
    QVariant qax_result = property("CanvasItems");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::CanvasShapes**)qax_result.constData();
}

inline Office::MsoTriState ShapeRange::Child() const
{
    QVariant qax_result = property("Child");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline int ShapeRange::ConnectionSiteCount() const
{
    QVariant qax_result = property("ConnectionSiteCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::MsoTriState ShapeRange::Connector() const
{
    QVariant qax_result = property("Connector");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::ConnectorFormat* ShapeRange::ConnectorFormat() const
{
    PowerPoint::ConnectorFormat* qax_pointer = 0;
    qRegisterMetaType("ConnectorFormat*", &qax_pointer);
    qRegisterMetaType("ConnectorFormat", qax_pointer);
    QVariant qax_result = property("ConnectorFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ConnectorFormat**)qax_result.constData();
}

inline int ShapeRange::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ShapeRange::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::Diagram* ShapeRange::Diagram() const
{
    PowerPoint::Diagram* qax_pointer = 0;
    qRegisterMetaType("Diagram*", &qax_pointer);
    qRegisterMetaType("Diagram", qax_pointer);
    QVariant qax_result = property("Diagram");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Diagram**)qax_result.constData();
}

inline PowerPoint::DiagramNode* ShapeRange::DiagramNode() const
{
    PowerPoint::DiagramNode* qax_pointer = 0;
    qRegisterMetaType("DiagramNode*", &qax_pointer);
    qRegisterMetaType("DiagramNode", qax_pointer);
    QVariant qax_result = property("DiagramNode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DiagramNode**)qax_result.constData();
}

inline PowerPoint::FillFormat* ShapeRange::Fill() const
{
    PowerPoint::FillFormat* qax_pointer = 0;
    qRegisterMetaType("FillFormat*", &qax_pointer);
    qRegisterMetaType("FillFormat", qax_pointer);
    QVariant qax_result = property("Fill");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::FillFormat**)qax_result.constData();
}

inline PowerPoint::GroupShapes* ShapeRange::GroupItems() const
{
    PowerPoint::GroupShapes* qax_pointer = 0;
    qRegisterMetaType("GroupShapes*", &qax_pointer);
    qRegisterMetaType("GroupShapes", qax_pointer);
    QVariant qax_result = property("GroupItems");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::GroupShapes**)qax_result.constData();
}

inline Office::MsoTriState ShapeRange::HasDiagram() const
{
    QVariant qax_result = property("HasDiagram");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState ShapeRange::HasDiagramNode() const
{
    QVariant qax_result = property("HasDiagramNode");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState ShapeRange::HasTable() const
{
    QVariant qax_result = property("HasTable");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState ShapeRange::HasTextFrame() const
{
    QVariant qax_result = property("HasTextFrame");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline double ShapeRange::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ShapeRange::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline Office::MsoTriState ShapeRange::HorizontalFlip() const
{
    QVariant qax_result = property("HorizontalFlip");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline int ShapeRange::Id() const
{
    QVariant qax_result = property("Id");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double ShapeRange::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ShapeRange::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline PowerPoint::LineFormat* ShapeRange::Line() const
{
    PowerPoint::LineFormat* qax_pointer = 0;
    qRegisterMetaType("LineFormat*", &qax_pointer);
    qRegisterMetaType("LineFormat", qax_pointer);
    QVariant qax_result = property("Line");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::LineFormat**)qax_result.constData();
}

inline PowerPoint::LinkFormat* ShapeRange::LinkFormat() const
{
    PowerPoint::LinkFormat* qax_pointer = 0;
    qRegisterMetaType("LinkFormat*", &qax_pointer);
    qRegisterMetaType("LinkFormat", qax_pointer);
    QVariant qax_result = property("LinkFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::LinkFormat**)qax_result.constData();
}

inline Office::MsoTriState ShapeRange::LockAspectRatio() const
{
    QVariant qax_result = property("LockAspectRatio");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ShapeRange::SetLockAspectRatio(Office::MsoTriState value){ setProperty("LockAspectRatio", QVariant(value)); }

inline PowerPoint::PpMediaType ShapeRange::MediaType() const
{
    QVariant qax_result = property("MediaType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpMediaType*)qax_result.constData();
}

inline QString ShapeRange::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ShapeRange::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline PowerPoint::ShapeNodes* ShapeRange::Nodes() const
{
    PowerPoint::ShapeNodes* qax_pointer = 0;
    qRegisterMetaType("ShapeNodes*", &qax_pointer);
    qRegisterMetaType("ShapeNodes", qax_pointer);
    QVariant qax_result = property("Nodes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ShapeNodes**)qax_result.constData();
}

inline PowerPoint::OLEFormat* ShapeRange::OLEFormat() const
{
    PowerPoint::OLEFormat* qax_pointer = 0;
    qRegisterMetaType("OLEFormat*", &qax_pointer);
    qRegisterMetaType("OLEFormat", qax_pointer);
    QVariant qax_result = property("OLEFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::OLEFormat**)qax_result.constData();
}

inline IDispatch* ShapeRange::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::Shape* ShapeRange::ParentGroup() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("ParentGroup");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}

inline PowerPoint::PictureFormat* ShapeRange::PictureFormat() const
{
    PowerPoint::PictureFormat* qax_pointer = 0;
    qRegisterMetaType("PictureFormat*", &qax_pointer);
    qRegisterMetaType("PictureFormat", qax_pointer);
    QVariant qax_result = property("PictureFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PictureFormat**)qax_result.constData();
}

inline PowerPoint::PlaceholderFormat* ShapeRange::PlaceholderFormat() const
{
    PowerPoint::PlaceholderFormat* qax_pointer = 0;
    qRegisterMetaType("PlaceholderFormat*", &qax_pointer);
    qRegisterMetaType("PlaceholderFormat", qax_pointer);
    QVariant qax_result = property("PlaceholderFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PlaceholderFormat**)qax_result.constData();
}

inline QString ShapeRange::RTF() const
{
    QVariant qax_result = property("RTF");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ShapeRange::SetRTF(const QString& value){ setProperty("RTF", QVariant(value)); }

inline double ShapeRange::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ShapeRange::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline Office::Script* ShapeRange::Script() const
{
    Office::Script* qax_pointer = 0;
    qRegisterMetaType("Office::Script*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Script", qax_pointer);
#endif
    QVariant qax_result = property("Script");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Script**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::ShadowFormat* ShapeRange::Shadow() const
{
    PowerPoint::ShadowFormat* qax_pointer = 0;
    qRegisterMetaType("ShadowFormat*", &qax_pointer);
    qRegisterMetaType("ShadowFormat", qax_pointer);
    QVariant qax_result = property("Shadow");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ShadowFormat**)qax_result.constData();
}

inline PowerPoint::SoundFormat* ShapeRange::SoundFormat() const
{
    PowerPoint::SoundFormat* qax_pointer = 0;
    qRegisterMetaType("SoundFormat*", &qax_pointer);
    qRegisterMetaType("SoundFormat", qax_pointer);
    QVariant qax_result = property("SoundFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SoundFormat**)qax_result.constData();
}

inline PowerPoint::Table* ShapeRange::Table() const
{
    PowerPoint::Table* qax_pointer = 0;
    qRegisterMetaType("Table*", &qax_pointer);
    qRegisterMetaType("Table", qax_pointer);
    QVariant qax_result = property("Table");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Table**)qax_result.constData();
}

inline PowerPoint::Tags* ShapeRange::Tags() const
{
    PowerPoint::Tags* qax_pointer = 0;
    qRegisterMetaType("Tags*", &qax_pointer);
    qRegisterMetaType("Tags", qax_pointer);
    QVariant qax_result = property("Tags");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Tags**)qax_result.constData();
}

inline PowerPoint::TextEffectFormat* ShapeRange::TextEffect() const
{
    PowerPoint::TextEffectFormat* qax_pointer = 0;
    qRegisterMetaType("TextEffectFormat*", &qax_pointer);
    qRegisterMetaType("TextEffectFormat", qax_pointer);
    QVariant qax_result = property("TextEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TextEffectFormat**)qax_result.constData();
}

inline PowerPoint::TextFrame* ShapeRange::TextFrame() const
{
    PowerPoint::TextFrame* qax_pointer = 0;
    qRegisterMetaType("TextFrame*", &qax_pointer);
    qRegisterMetaType("TextFrame", qax_pointer);
    QVariant qax_result = property("TextFrame");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TextFrame**)qax_result.constData();
}

inline PowerPoint::ThreeDFormat* ShapeRange::ThreeD() const
{
    PowerPoint::ThreeDFormat* qax_pointer = 0;
    qRegisterMetaType("ThreeDFormat*", &qax_pointer);
    qRegisterMetaType("ThreeDFormat", qax_pointer);
    QVariant qax_result = property("ThreeD");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ThreeDFormat**)qax_result.constData();
}

inline double ShapeRange::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ShapeRange::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline Office::MsoShapeType ShapeRange::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoShapeType*)qax_result.constData();
}

inline Office::MsoTriState ShapeRange::VerticalFlip() const
{
    QVariant qax_result = property("VerticalFlip");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline QVariant ShapeRange::Vertices() const
{
    QVariant qax_result = property("Vertices");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline Office::MsoTriState ShapeRange::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ShapeRange::SetVisible(Office::MsoTriState value){ setProperty("Visible", QVariant(value)); }

inline double ShapeRange::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ShapeRange::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline int ShapeRange::ZOrderPosition() const
{
    QVariant qax_result = property("ZOrderPosition");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* ShapeRange::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void ShapeRange::Align(Office::MsoAlignCmd AlignCmd, Office::MsoTriState RelativeTo)
{
    void *_a[] = {0, (void*)&AlignCmd, (void*)&RelativeTo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void ShapeRange::Apply()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ShapeRange::CanvasCropBottom(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void ShapeRange::CanvasCropLeft(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void ShapeRange::CanvasCropRight(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void ShapeRange::CanvasCropTop(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void ShapeRange::Copy()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void ShapeRange::Cut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void ShapeRange::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void ShapeRange::Distribute(Office::MsoDistributeCmd DistributeCmd, Office::MsoTriState RelativeTo)
{
    void *_a[] = {0, (void*)&DistributeCmd, (void*)&RelativeTo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline PowerPoint::ShapeRange* ShapeRange::Duplicate()
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void ShapeRange::Export(const QString& PathName, PowerPoint::PpShapeFormat Filter)
{
    void *_a[] = {0, (void*)&PathName, (void*)&Filter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void ShapeRange::Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth)
{
    void *_a[] = {0, (void*)&PathName, (void*)&Filter, (void*)&ScaleWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void ShapeRange::Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth, int ScaleHeight)
{
    void *_a[] = {0, (void*)&PathName, (void*)&Filter, (void*)&ScaleWidth, (void*)&ScaleHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void ShapeRange::Export(const QString& PathName, PowerPoint::PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, PowerPoint::PpExportMode ExportMode)
{
    void *_a[] = {0, (void*)&PathName, (void*)&Filter, (void*)&ScaleWidth, (void*)&ScaleHeight, (void*)&ExportMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void ShapeRange::Flip(Office::MsoFlipCmd FlipCmd)
{
    void *_a[] = {0, (void*)&FlipCmd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void ShapeRange::GetPolygonalRepresentation(uint maxPointsInBuffer, double& pPoints, uint& numPointsInPolygon, Office::MsoTriState*& IsOpen)
{
    void *_a[] = {0, (void*)&maxPointsInBuffer, (void*)&pPoints, (void*)&numPointsInPolygon, (void*)&IsOpen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline PowerPoint::Shape* ShapeRange::Group()
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void ShapeRange::IncrementLeft(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void ShapeRange::IncrementRotation(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void ShapeRange::IncrementTop(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline PowerPoint::Shape* ShapeRange::Item(const QVariant& Index)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void ShapeRange::PickUp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline PowerPoint::Shape* ShapeRange::Regroup()
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline void ShapeRange::RerouteConnections()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void ShapeRange::ScaleHeight(double Factor, Office::MsoTriState RelativeToOriginalSize)
{
    void *_a[] = {0, (void*)&Factor, (void*)&RelativeToOriginalSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void ShapeRange::ScaleHeight(double Factor, Office::MsoTriState RelativeToOriginalSize, Office::MsoScaleFrom fScale)
{
    void *_a[] = {0, (void*)&Factor, (void*)&RelativeToOriginalSize, (void*)&fScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void ShapeRange::ScaleWidth(double Factor, Office::MsoTriState RelativeToOriginalSize)
{
    void *_a[] = {0, (void*)&Factor, (void*)&RelativeToOriginalSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void ShapeRange::ScaleWidth(double Factor, Office::MsoTriState RelativeToOriginalSize, Office::MsoScaleFrom fScale)
{
    void *_a[] = {0, (void*)&Factor, (void*)&RelativeToOriginalSize, (void*)&fScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void ShapeRange::Select()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void ShapeRange::Select(Office::MsoTriState Replace)
{
    void *_a[] = {0, (void*)&Replace};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void ShapeRange::SetShapesDefaultProperties()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline PowerPoint::ShapeRange* ShapeRange::Ungroup()
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline void ShapeRange::ZOrder(Office::MsoZOrderCmd ZOrderCmd)
{
    void *_a[] = {0, (void*)&ZOrderCmd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline QVariant ShapeRange::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}


inline IDispatch* GroupShapes::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int GroupShapes::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int GroupShapes::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* GroupShapes::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* GroupShapes::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Shape* GroupShapes::Item(const QVariant& Index)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* GroupShapes::Range(const QVariant& Index)
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline IDispatch* Adjustments::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int Adjustments::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Adjustments::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Adjustments::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline double Adjustments::Item(int Index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline int Adjustments::SetItem(int Index, double rhs)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline IDispatch* PictureFormat::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline double PictureFormat::Brightness() const
{
    QVariant qax_result = property("Brightness");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void PictureFormat::SetBrightness(double value){ setProperty("Brightness", QVariant(value)); }

inline Office::MsoPictureColorType PictureFormat::ColorType() const
{
    QVariant qax_result = property("ColorType");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPictureColorType*)qax_result.constData();
}
inline void PictureFormat::SetColorType(Office::MsoPictureColorType value){ setProperty("ColorType", QVariant(value)); }

inline double PictureFormat::Contrast() const
{
    QVariant qax_result = property("Contrast");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void PictureFormat::SetContrast(double value){ setProperty("Contrast", QVariant(value)); }

inline int PictureFormat::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double PictureFormat::CropBottom() const
{
    QVariant qax_result = property("CropBottom");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void PictureFormat::SetCropBottom(double value){ setProperty("CropBottom", QVariant(value)); }

inline double PictureFormat::CropLeft() const
{
    QVariant qax_result = property("CropLeft");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void PictureFormat::SetCropLeft(double value){ setProperty("CropLeft", QVariant(value)); }

inline double PictureFormat::CropRight() const
{
    QVariant qax_result = property("CropRight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void PictureFormat::SetCropRight(double value){ setProperty("CropRight", QVariant(value)); }

inline double PictureFormat::CropTop() const
{
    QVariant qax_result = property("CropTop");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void PictureFormat::SetCropTop(double value){ setProperty("CropTop", QVariant(value)); }

inline IDispatch* PictureFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int PictureFormat::TransparencyColor() const
{
    QVariant qax_result = property("TransparencyColor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void PictureFormat::SetTransparencyColor(int value){ setProperty("TransparencyColor", QVariant(value)); }

inline Office::MsoTriState PictureFormat::TransparentBackground() const
{
    QVariant qax_result = property("TransparentBackground");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PictureFormat::SetTransparentBackground(Office::MsoTriState value){ setProperty("TransparentBackground", QVariant(value)); }

inline void PictureFormat::IncrementBrightness(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void PictureFormat::IncrementContrast(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}


inline IDispatch* FillFormat::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::ColorFormat* FillFormat::BackColor() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("BackColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}
inline void FillFormat::SetBackColor(PowerPoint::ColorFormat* value){
    int typeId = qRegisterMetaType("PowerPoint::ColorFormat*", &value);
    setProperty("BackColor", QVariant(typeId, &value));
}

inline int FillFormat::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::ColorFormat* FillFormat::ForeColor() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("ForeColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}
inline void FillFormat::SetForeColor(PowerPoint::ColorFormat* value){
    int typeId = qRegisterMetaType("PowerPoint::ColorFormat*", &value);
    setProperty("ForeColor", QVariant(typeId, &value));
}

inline Office::MsoGradientColorType FillFormat::GradientColorType() const
{
    QVariant qax_result = property("GradientColorType");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoGradientColorType*)qax_result.constData();
}

inline double FillFormat::GradientDegree() const
{
    QVariant qax_result = property("GradientDegree");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline Office::MsoGradientStyle FillFormat::GradientStyle() const
{
    QVariant qax_result = property("GradientStyle");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoGradientStyle*)qax_result.constData();
}

inline int FillFormat::GradientVariant() const
{
    QVariant qax_result = property("GradientVariant");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* FillFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoPatternType FillFormat::Pattern() const
{
    QVariant qax_result = property("Pattern");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPatternType*)qax_result.constData();
}

inline Office::MsoPresetGradientType FillFormat::PresetGradientType() const
{
    QVariant qax_result = property("PresetGradientType");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPresetGradientType*)qax_result.constData();
}

inline Office::MsoPresetTexture FillFormat::PresetTexture() const
{
    QVariant qax_result = property("PresetTexture");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPresetTexture*)qax_result.constData();
}

inline QString FillFormat::TextureName() const
{
    QVariant qax_result = property("TextureName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::MsoTextureType FillFormat::TextureType() const
{
    QVariant qax_result = property("TextureType");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTextureType*)qax_result.constData();
}

inline double FillFormat::Transparency() const
{
    QVariant qax_result = property("Transparency");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void FillFormat::SetTransparency(double value){ setProperty("Transparency", QVariant(value)); }

inline Office::MsoFillType FillFormat::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoFillType*)qax_result.constData();
}

inline Office::MsoTriState FillFormat::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void FillFormat::SetVisible(Office::MsoTriState value){ setProperty("Visible", QVariant(value)); }

inline void FillFormat::Background()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void FillFormat::OneColorGradient(Office::MsoGradientStyle Style, int Variant, double Degree)
{
    void *_a[] = {0, (void*)&Style, (void*)&Variant, (void*)&Degree};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void FillFormat::Patterned(Office::MsoPatternType Pattern)
{
    void *_a[] = {0, (void*)&Pattern};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void FillFormat::PresetGradient(Office::MsoGradientStyle Style, int Variant, Office::MsoPresetGradientType PresetGradientType)
{
    void *_a[] = {0, (void*)&Style, (void*)&Variant, (void*)&PresetGradientType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void FillFormat::PresetTextured(Office::MsoPresetTexture PresetTexture)
{
    void *_a[] = {0, (void*)&PresetTexture};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void FillFormat::Solid()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void FillFormat::TwoColorGradient(Office::MsoGradientStyle Style, int Variant)
{
    void *_a[] = {0, (void*)&Style, (void*)&Variant};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void FillFormat::UserPicture(const QString& PictureFile)
{
    void *_a[] = {0, (void*)&PictureFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void FillFormat::UserTextured(const QString& TextureFile)
{
    void *_a[] = {0, (void*)&TextureFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline IDispatch* LineFormat::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::ColorFormat* LineFormat::BackColor() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("BackColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}
inline void LineFormat::SetBackColor(PowerPoint::ColorFormat* value){
    int typeId = qRegisterMetaType("PowerPoint::ColorFormat*", &value);
    setProperty("BackColor", QVariant(typeId, &value));
}

inline Office::MsoArrowheadLength LineFormat::BeginArrowheadLength() const
{
    QVariant qax_result = property("BeginArrowheadLength");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoArrowheadLength*)qax_result.constData();
}
inline void LineFormat::SetBeginArrowheadLength(Office::MsoArrowheadLength value){ setProperty("BeginArrowheadLength", QVariant(value)); }

inline Office::MsoArrowheadStyle LineFormat::BeginArrowheadStyle() const
{
    QVariant qax_result = property("BeginArrowheadStyle");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoArrowheadStyle*)qax_result.constData();
}
inline void LineFormat::SetBeginArrowheadStyle(Office::MsoArrowheadStyle value){ setProperty("BeginArrowheadStyle", QVariant(value)); }

inline Office::MsoArrowheadWidth LineFormat::BeginArrowheadWidth() const
{
    QVariant qax_result = property("BeginArrowheadWidth");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoArrowheadWidth*)qax_result.constData();
}
inline void LineFormat::SetBeginArrowheadWidth(Office::MsoArrowheadWidth value){ setProperty("BeginArrowheadWidth", QVariant(value)); }

inline int LineFormat::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::MsoLineDashStyle LineFormat::DashStyle() const
{
    QVariant qax_result = property("DashStyle");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoLineDashStyle*)qax_result.constData();
}
inline void LineFormat::SetDashStyle(Office::MsoLineDashStyle value){ setProperty("DashStyle", QVariant(value)); }

inline Office::MsoArrowheadLength LineFormat::EndArrowheadLength() const
{
    QVariant qax_result = property("EndArrowheadLength");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoArrowheadLength*)qax_result.constData();
}
inline void LineFormat::SetEndArrowheadLength(Office::MsoArrowheadLength value){ setProperty("EndArrowheadLength", QVariant(value)); }

inline Office::MsoArrowheadStyle LineFormat::EndArrowheadStyle() const
{
    QVariant qax_result = property("EndArrowheadStyle");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoArrowheadStyle*)qax_result.constData();
}
inline void LineFormat::SetEndArrowheadStyle(Office::MsoArrowheadStyle value){ setProperty("EndArrowheadStyle", QVariant(value)); }

inline Office::MsoArrowheadWidth LineFormat::EndArrowheadWidth() const
{
    QVariant qax_result = property("EndArrowheadWidth");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoArrowheadWidth*)qax_result.constData();
}
inline void LineFormat::SetEndArrowheadWidth(Office::MsoArrowheadWidth value){ setProperty("EndArrowheadWidth", QVariant(value)); }

inline PowerPoint::ColorFormat* LineFormat::ForeColor() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("ForeColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}
inline void LineFormat::SetForeColor(PowerPoint::ColorFormat* value){
    int typeId = qRegisterMetaType("PowerPoint::ColorFormat*", &value);
    setProperty("ForeColor", QVariant(typeId, &value));
}

inline Office::MsoTriState LineFormat::InsetPen() const
{
    QVariant qax_result = property("InsetPen");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void LineFormat::SetInsetPen(Office::MsoTriState value){ setProperty("InsetPen", QVariant(value)); }

inline IDispatch* LineFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoPatternType LineFormat::Pattern() const
{
    QVariant qax_result = property("Pattern");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPatternType*)qax_result.constData();
}
inline void LineFormat::SetPattern(Office::MsoPatternType value){ setProperty("Pattern", QVariant(value)); }

inline Office::MsoLineStyle LineFormat::Style() const
{
    QVariant qax_result = property("Style");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoLineStyle*)qax_result.constData();
}
inline void LineFormat::SetStyle(Office::MsoLineStyle value){ setProperty("Style", QVariant(value)); }

inline double LineFormat::Transparency() const
{
    QVariant qax_result = property("Transparency");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void LineFormat::SetTransparency(double value){ setProperty("Transparency", QVariant(value)); }

inline Office::MsoTriState LineFormat::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void LineFormat::SetVisible(Office::MsoTriState value){ setProperty("Visible", QVariant(value)); }

inline double LineFormat::Weight() const
{
    QVariant qax_result = property("Weight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void LineFormat::SetWeight(double value){ setProperty("Weight", QVariant(value)); }


inline IDispatch* ShadowFormat::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int ShadowFormat::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::ColorFormat* ShadowFormat::ForeColor() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("ForeColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}
inline void ShadowFormat::SetForeColor(PowerPoint::ColorFormat* value){
    int typeId = qRegisterMetaType("PowerPoint::ColorFormat*", &value);
    setProperty("ForeColor", QVariant(typeId, &value));
}

inline Office::MsoTriState ShadowFormat::Obscured() const
{
    QVariant qax_result = property("Obscured");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ShadowFormat::SetObscured(Office::MsoTriState value){ setProperty("Obscured", QVariant(value)); }

inline double ShadowFormat::OffsetX() const
{
    QVariant qax_result = property("OffsetX");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ShadowFormat::SetOffsetX(double value){ setProperty("OffsetX", QVariant(value)); }

inline double ShadowFormat::OffsetY() const
{
    QVariant qax_result = property("OffsetY");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ShadowFormat::SetOffsetY(double value){ setProperty("OffsetY", QVariant(value)); }

inline IDispatch* ShadowFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline double ShadowFormat::Transparency() const
{
    QVariant qax_result = property("Transparency");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ShadowFormat::SetTransparency(double value){ setProperty("Transparency", QVariant(value)); }

inline Office::MsoShadowType ShadowFormat::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoShadowType*)qax_result.constData();
}
inline void ShadowFormat::SetType(Office::MsoShadowType value){ setProperty("Type", QVariant(value)); }

inline Office::MsoTriState ShadowFormat::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ShadowFormat::SetVisible(Office::MsoTriState value){ setProperty("Visible", QVariant(value)); }

inline void ShadowFormat::IncrementOffsetX(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void ShadowFormat::IncrementOffsetY(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}


inline IDispatch* ConnectorFormat::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoTriState ConnectorFormat::BeginConnected() const
{
    QVariant qax_result = property("BeginConnected");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::Shape* ConnectorFormat::BeginConnectedShape() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("BeginConnectedShape");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}

inline int ConnectorFormat::BeginConnectionSite() const
{
    QVariant qax_result = property("BeginConnectionSite");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ConnectorFormat::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::MsoTriState ConnectorFormat::EndConnected() const
{
    QVariant qax_result = property("EndConnected");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::Shape* ConnectorFormat::EndConnectedShape() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("EndConnectedShape");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}

inline int ConnectorFormat::EndConnectionSite() const
{
    QVariant qax_result = property("EndConnectionSite");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* ConnectorFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoConnectorType ConnectorFormat::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoConnectorType*)qax_result.constData();
}
inline void ConnectorFormat::SetType(Office::MsoConnectorType value){ setProperty("Type", QVariant(value)); }

inline void ConnectorFormat::BeginConnect(PowerPoint::Shape* ConnectedShape, int ConnectionSite)
{
    void *_a[] = {0, (void*)&ConnectedShape, (void*)&ConnectionSite};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void ConnectorFormat::BeginDisconnect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ConnectorFormat::EndConnect(PowerPoint::Shape* ConnectedShape, int ConnectionSite)
{
    void *_a[] = {0, (void*)&ConnectedShape, (void*)&ConnectionSite};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void ConnectorFormat::EndDisconnect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline Office::MsoTextEffectAlignment TextEffectFormat::Alignment() const
{
    QVariant qax_result = property("Alignment");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTextEffectAlignment*)qax_result.constData();
}
inline void TextEffectFormat::SetAlignment(Office::MsoTextEffectAlignment value){ setProperty("Alignment", QVariant(value)); }

inline IDispatch* TextEffectFormat::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int TextEffectFormat::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::MsoTriState TextEffectFormat::FontBold() const
{
    QVariant qax_result = property("FontBold");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void TextEffectFormat::SetFontBold(Office::MsoTriState value){ setProperty("FontBold", QVariant(value)); }

inline Office::MsoTriState TextEffectFormat::FontItalic() const
{
    QVariant qax_result = property("FontItalic");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void TextEffectFormat::SetFontItalic(Office::MsoTriState value){ setProperty("FontItalic", QVariant(value)); }

inline QString TextEffectFormat::FontName() const
{
    QVariant qax_result = property("FontName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TextEffectFormat::SetFontName(const QString& value){ setProperty("FontName", QVariant(value)); }

inline double TextEffectFormat::FontSize() const
{
    QVariant qax_result = property("FontSize");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TextEffectFormat::SetFontSize(double value){ setProperty("FontSize", QVariant(value)); }

inline Office::MsoTriState TextEffectFormat::KernedPairs() const
{
    QVariant qax_result = property("KernedPairs");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void TextEffectFormat::SetKernedPairs(Office::MsoTriState value){ setProperty("KernedPairs", QVariant(value)); }

inline Office::MsoTriState TextEffectFormat::NormalizedHeight() const
{
    QVariant qax_result = property("NormalizedHeight");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void TextEffectFormat::SetNormalizedHeight(Office::MsoTriState value){ setProperty("NormalizedHeight", QVariant(value)); }

inline IDispatch* TextEffectFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoPresetTextEffectShape TextEffectFormat::PresetShape() const
{
    QVariant qax_result = property("PresetShape");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPresetTextEffectShape*)qax_result.constData();
}
inline void TextEffectFormat::SetPresetShape(Office::MsoPresetTextEffectShape value){ setProperty("PresetShape", QVariant(value)); }

inline Office::MsoPresetTextEffect TextEffectFormat::PresetTextEffect() const
{
    QVariant qax_result = property("PresetTextEffect");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPresetTextEffect*)qax_result.constData();
}
inline void TextEffectFormat::SetPresetTextEffect(Office::MsoPresetTextEffect value){ setProperty("PresetTextEffect", QVariant(value)); }

inline Office::MsoTriState TextEffectFormat::RotatedChars() const
{
    QVariant qax_result = property("RotatedChars");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void TextEffectFormat::SetRotatedChars(Office::MsoTriState value){ setProperty("RotatedChars", QVariant(value)); }

inline QString TextEffectFormat::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TextEffectFormat::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline double TextEffectFormat::Tracking() const
{
    QVariant qax_result = property("Tracking");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TextEffectFormat::SetTracking(double value){ setProperty("Tracking", QVariant(value)); }

inline void TextEffectFormat::ToggleVerticalText()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline IDispatch* ThreeDFormat::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int ThreeDFormat::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double ThreeDFormat::Depth() const
{
    QVariant qax_result = property("Depth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ThreeDFormat::SetDepth(double value){ setProperty("Depth", QVariant(value)); }

inline PowerPoint::ColorFormat* ThreeDFormat::ExtrusionColor() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("ExtrusionColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}

inline Office::MsoExtrusionColorType ThreeDFormat::ExtrusionColorType() const
{
    QVariant qax_result = property("ExtrusionColorType");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoExtrusionColorType*)qax_result.constData();
}
inline void ThreeDFormat::SetExtrusionColorType(Office::MsoExtrusionColorType value){ setProperty("ExtrusionColorType", QVariant(value)); }

inline IDispatch* ThreeDFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoTriState ThreeDFormat::Perspective() const
{
    QVariant qax_result = property("Perspective");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ThreeDFormat::SetPerspective(Office::MsoTriState value){ setProperty("Perspective", QVariant(value)); }

inline Office::MsoPresetExtrusionDirection ThreeDFormat::PresetExtrusionDirection() const
{
    QVariant qax_result = property("PresetExtrusionDirection");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPresetExtrusionDirection*)qax_result.constData();
}

inline Office::MsoPresetLightingDirection ThreeDFormat::PresetLightingDirection() const
{
    QVariant qax_result = property("PresetLightingDirection");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPresetLightingDirection*)qax_result.constData();
}
inline void ThreeDFormat::SetPresetLightingDirection(Office::MsoPresetLightingDirection value){ setProperty("PresetLightingDirection", QVariant(value)); }

inline Office::MsoPresetLightingSoftness ThreeDFormat::PresetLightingSoftness() const
{
    QVariant qax_result = property("PresetLightingSoftness");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPresetLightingSoftness*)qax_result.constData();
}
inline void ThreeDFormat::SetPresetLightingSoftness(Office::MsoPresetLightingSoftness value){ setProperty("PresetLightingSoftness", QVariant(value)); }

inline Office::MsoPresetMaterial ThreeDFormat::PresetMaterial() const
{
    QVariant qax_result = property("PresetMaterial");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPresetMaterial*)qax_result.constData();
}
inline void ThreeDFormat::SetPresetMaterial(Office::MsoPresetMaterial value){ setProperty("PresetMaterial", QVariant(value)); }

inline Office::MsoPresetThreeDFormat ThreeDFormat::PresetThreeDFormat() const
{
    QVariant qax_result = property("PresetThreeDFormat");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoPresetThreeDFormat*)qax_result.constData();
}

inline double ThreeDFormat::RotationX() const
{
    QVariant qax_result = property("RotationX");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ThreeDFormat::SetRotationX(double value){ setProperty("RotationX", QVariant(value)); }

inline double ThreeDFormat::RotationY() const
{
    QVariant qax_result = property("RotationY");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ThreeDFormat::SetRotationY(double value){ setProperty("RotationY", QVariant(value)); }

inline Office::MsoTriState ThreeDFormat::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ThreeDFormat::SetVisible(Office::MsoTriState value){ setProperty("Visible", QVariant(value)); }

inline void ThreeDFormat::IncrementRotationX(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void ThreeDFormat::IncrementRotationY(double Increment)
{
    void *_a[] = {0, (void*)&Increment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ThreeDFormat::ResetRotation()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void ThreeDFormat::SetExtrusionDirection(Office::MsoPresetExtrusionDirection PresetExtrusionDirection)
{
    void *_a[] = {0, (void*)&PresetExtrusionDirection};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void ThreeDFormat::SetThreeDFormat(Office::MsoPresetThreeDFormat PresetThreeDFormat)
{
    void *_a[] = {0, (void*)&PresetThreeDFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline IDispatch* TextFrame::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::PpAutoSize TextFrame::AutoSize() const
{
    QVariant qax_result = property("AutoSize");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpAutoSize*)qax_result.constData();
}
inline void TextFrame::SetAutoSize(PowerPoint::PpAutoSize value){ setProperty("AutoSize", QVariant(value)); }

inline int TextFrame::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::MsoTriState TextFrame::HasText() const
{
    QVariant qax_result = property("HasText");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoHorizontalAnchor TextFrame::HorizontalAnchor() const
{
    QVariant qax_result = property("HorizontalAnchor");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoHorizontalAnchor*)qax_result.constData();
}
inline void TextFrame::SetHorizontalAnchor(Office::MsoHorizontalAnchor value){ setProperty("HorizontalAnchor", QVariant(value)); }

inline double TextFrame::MarginBottom() const
{
    QVariant qax_result = property("MarginBottom");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TextFrame::SetMarginBottom(double value){ setProperty("MarginBottom", QVariant(value)); }

inline double TextFrame::MarginLeft() const
{
    QVariant qax_result = property("MarginLeft");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TextFrame::SetMarginLeft(double value){ setProperty("MarginLeft", QVariant(value)); }

inline double TextFrame::MarginRight() const
{
    QVariant qax_result = property("MarginRight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TextFrame::SetMarginRight(double value){ setProperty("MarginRight", QVariant(value)); }

inline double TextFrame::MarginTop() const
{
    QVariant qax_result = property("MarginTop");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TextFrame::SetMarginTop(double value){ setProperty("MarginTop", QVariant(value)); }

inline Office::MsoTextOrientation TextFrame::Orientation() const
{
    QVariant qax_result = property("Orientation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTextOrientation*)qax_result.constData();
}
inline void TextFrame::SetOrientation(Office::MsoTextOrientation value){ setProperty("Orientation", QVariant(value)); }

inline IDispatch* TextFrame::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::Ruler* TextFrame::Ruler() const
{
    PowerPoint::Ruler* qax_pointer = 0;
    qRegisterMetaType("Ruler*", &qax_pointer);
    qRegisterMetaType("Ruler", qax_pointer);
    QVariant qax_result = property("Ruler");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Ruler**)qax_result.constData();
}

inline PowerPoint::TextRange* TextFrame::TextRange() const
{
    PowerPoint::TextRange* qax_pointer = 0;
    qRegisterMetaType("TextRange*", &qax_pointer);
    qRegisterMetaType("TextRange", qax_pointer);
    QVariant qax_result = property("TextRange");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TextRange**)qax_result.constData();
}

inline Office::MsoVerticalAnchor TextFrame::VerticalAnchor() const
{
    QVariant qax_result = property("VerticalAnchor");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoVerticalAnchor*)qax_result.constData();
}
inline void TextFrame::SetVerticalAnchor(Office::MsoVerticalAnchor value){ setProperty("VerticalAnchor", QVariant(value)); }

inline Office::MsoTriState TextFrame::WordWrap() const
{
    QVariant qax_result = property("WordWrap");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void TextFrame::SetWordWrap(Office::MsoTriState value){ setProperty("WordWrap", QVariant(value)); }

inline void TextFrame::DeleteText()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline Office::MsoTriState CalloutFormat::Accent() const
{
    QVariant qax_result = property("Accent");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void CalloutFormat::SetAccent(Office::MsoTriState value){ setProperty("Accent", QVariant(value)); }

inline Office::MsoCalloutAngleType CalloutFormat::Angle() const
{
    QVariant qax_result = property("Angle");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoCalloutAngleType*)qax_result.constData();
}
inline void CalloutFormat::SetAngle(Office::MsoCalloutAngleType value){ setProperty("Angle", QVariant(value)); }

inline IDispatch* CalloutFormat::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoTriState CalloutFormat::AutoAttach() const
{
    QVariant qax_result = property("AutoAttach");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void CalloutFormat::SetAutoAttach(Office::MsoTriState value){ setProperty("AutoAttach", QVariant(value)); }

inline Office::MsoTriState CalloutFormat::AutoLength() const
{
    QVariant qax_result = property("AutoLength");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState CalloutFormat::Border() const
{
    QVariant qax_result = property("Border");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void CalloutFormat::SetBorder(Office::MsoTriState value){ setProperty("Border", QVariant(value)); }

inline int CalloutFormat::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double CalloutFormat::Drop() const
{
    QVariant qax_result = property("Drop");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline Office::MsoCalloutDropType CalloutFormat::DropType() const
{
    QVariant qax_result = property("DropType");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoCalloutDropType*)qax_result.constData();
}

inline double CalloutFormat::Gap() const
{
    QVariant qax_result = property("Gap");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void CalloutFormat::SetGap(double value){ setProperty("Gap", QVariant(value)); }

inline double CalloutFormat::Length() const
{
    QVariant qax_result = property("Length");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline IDispatch* CalloutFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoCalloutType CalloutFormat::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoCalloutType*)qax_result.constData();
}
inline void CalloutFormat::SetType(Office::MsoCalloutType value){ setProperty("Type", QVariant(value)); }

inline void CalloutFormat::AutomaticLength()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void CalloutFormat::CustomDrop(double Drop)
{
    void *_a[] = {0, (void*)&Drop};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void CalloutFormat::CustomLength(double Length)
{
    void *_a[] = {0, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void CalloutFormat::PresetDrop(Office::MsoCalloutDropType DropType)
{
    void *_a[] = {0, (void*)&DropType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline IDispatch* ShapeNodes::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int ShapeNodes::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ShapeNodes::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* ShapeNodes::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* ShapeNodes::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void ShapeNodes::Delete(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void ShapeNodes::Insert(int Index, Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1)
{
    void *_a[] = {0, (void*)&Index, (void*)&SegmentType, (void*)&EditingType, (void*)&X1, (void*)&Y1};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ShapeNodes::Insert(int Index, Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2)
{
    void *_a[] = {0, (void*)&Index, (void*)&SegmentType, (void*)&EditingType, (void*)&X1, (void*)&Y1, (void*)&X2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void ShapeNodes::Insert(int Index, Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2)
{
    void *_a[] = {0, (void*)&Index, (void*)&SegmentType, (void*)&EditingType, (void*)&X1, (void*)&Y1, (void*)&X2, (void*)&Y2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void ShapeNodes::Insert(int Index, Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2, double X3)
{
    void *_a[] = {0, (void*)&Index, (void*)&SegmentType, (void*)&EditingType, (void*)&X1, (void*)&Y1, (void*)&X2, (void*)&Y2, (void*)&X3};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void ShapeNodes::Insert(int Index, Office::MsoSegmentType SegmentType, Office::MsoEditingType EditingType, double X1, double Y1, double X2, double Y2, double X3, double Y3)
{
    void *_a[] = {0, (void*)&Index, (void*)&SegmentType, (void*)&EditingType, (void*)&X1, (void*)&Y1, (void*)&X2, (void*)&Y2, (void*)&X3, (void*)&Y3};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline PowerPoint::ShapeNode* ShapeNodes::Item(const QVariant& Index)
{
    PowerPoint::ShapeNode* qax_result = 0;
    qRegisterMetaType("ShapeNode*", &qax_result);
    qRegisterMetaType("ShapeNode", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void ShapeNodes::SetEditingType(int Index, Office::MsoEditingType EditingType)
{
    void *_a[] = {0, (void*)&Index, (void*)&EditingType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void ShapeNodes::SetPosition(int Index, double X1, double Y1)
{
    void *_a[] = {0, (void*)&Index, (void*)&X1, (void*)&Y1};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void ShapeNodes::SetSegmentType(int Index, Office::MsoSegmentType SegmentType)
{
    void *_a[] = {0, (void*)&Index, (void*)&SegmentType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline IDispatch* ShapeNode::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int ShapeNode::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline Office::MsoEditingType ShapeNode::EditingType() const
{
    QVariant qax_result = property("EditingType");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoEditingType*)qax_result.constData();
}

inline IDispatch* ShapeNode::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QVariant ShapeNode::Points() const
{
    QVariant qax_result = property("Points");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline Office::MsoSegmentType ShapeNode::SegmentType() const
{
    QVariant qax_result = property("SegmentType");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoSegmentType*)qax_result.constData();
}


inline PowerPoint::Application* OLEFormat::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::PpFollowColors OLEFormat::FollowColors() const
{
    QVariant qax_result = property("FollowColors");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpFollowColors*)qax_result.constData();
}
inline void OLEFormat::SetFollowColors(PowerPoint::PpFollowColors value){ setProperty("FollowColors", QVariant(value)); }

inline IDispatch* OLEFormat::Object() const
{
    QVariant qax_result = property("Object");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::ObjectVerbs* OLEFormat::ObjectVerbs() const
{
    PowerPoint::ObjectVerbs* qax_pointer = 0;
    qRegisterMetaType("ObjectVerbs*", &qax_pointer);
    qRegisterMetaType("ObjectVerbs", qax_pointer);
    QVariant qax_result = property("ObjectVerbs");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ObjectVerbs**)qax_result.constData();
}

inline IDispatch* OLEFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString OLEFormat::ProgID() const
{
    QVariant qax_result = property("ProgID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void OLEFormat::Activate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void OLEFormat::DoVerb()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void OLEFormat::DoVerb(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline PowerPoint::Application* LinkFormat::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::PpUpdateOption LinkFormat::AutoUpdate() const
{
    QVariant qax_result = property("AutoUpdate");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpUpdateOption*)qax_result.constData();
}
inline void LinkFormat::SetAutoUpdate(PowerPoint::PpUpdateOption value){ setProperty("AutoUpdate", QVariant(value)); }

inline IDispatch* LinkFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString LinkFormat::SourceFullName() const
{
    QVariant qax_result = property("SourceFullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LinkFormat::SetSourceFullName(const QString& value){ setProperty("SourceFullName", QVariant(value)); }

inline void LinkFormat::Update()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline PowerPoint::Application* ObjectVerbs::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int ObjectVerbs::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* ObjectVerbs::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* ObjectVerbs::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline QString ObjectVerbs::Item(int Index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant ObjectVerbs::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline PowerPoint::PpAdvanceMode AnimationSettings::AdvanceMode() const
{
    QVariant qax_result = property("AdvanceMode");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpAdvanceMode*)qax_result.constData();
}
inline void AnimationSettings::SetAdvanceMode(PowerPoint::PpAdvanceMode value){ setProperty("AdvanceMode", QVariant(value)); }

inline double AnimationSettings::AdvanceTime() const
{
    QVariant qax_result = property("AdvanceTime");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void AnimationSettings::SetAdvanceTime(double value){ setProperty("AdvanceTime", QVariant(value)); }

inline PowerPoint::PpAfterEffect AnimationSettings::AfterEffect() const
{
    QVariant qax_result = property("AfterEffect");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpAfterEffect*)qax_result.constData();
}
inline void AnimationSettings::SetAfterEffect(PowerPoint::PpAfterEffect value){ setProperty("AfterEffect", QVariant(value)); }

inline Office::MsoTriState AnimationSettings::Animate() const
{
    QVariant qax_result = property("Animate");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void AnimationSettings::SetAnimate(Office::MsoTriState value){ setProperty("Animate", QVariant(value)); }

inline Office::MsoTriState AnimationSettings::AnimateBackground() const
{
    QVariant qax_result = property("AnimateBackground");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void AnimationSettings::SetAnimateBackground(Office::MsoTriState value){ setProperty("AnimateBackground", QVariant(value)); }

inline Office::MsoTriState AnimationSettings::AnimateTextInReverse() const
{
    QVariant qax_result = property("AnimateTextInReverse");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void AnimationSettings::SetAnimateTextInReverse(Office::MsoTriState value){ setProperty("AnimateTextInReverse", QVariant(value)); }

inline int AnimationSettings::AnimationOrder() const
{
    QVariant qax_result = property("AnimationOrder");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void AnimationSettings::SetAnimationOrder(int value){ setProperty("AnimationOrder", QVariant(value)); }

inline PowerPoint::Application* AnimationSettings::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::PpChartUnitEffect AnimationSettings::ChartUnitEffect() const
{
    QVariant qax_result = property("ChartUnitEffect");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpChartUnitEffect*)qax_result.constData();
}
inline void AnimationSettings::SetChartUnitEffect(PowerPoint::PpChartUnitEffect value){ setProperty("ChartUnitEffect", QVariant(value)); }

inline PowerPoint::ColorFormat* AnimationSettings::DimColor() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("DimColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}

inline PowerPoint::PpEntryEffect AnimationSettings::EntryEffect() const
{
    QVariant qax_result = property("EntryEffect");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpEntryEffect*)qax_result.constData();
}
inline void AnimationSettings::SetEntryEffect(PowerPoint::PpEntryEffect value){ setProperty("EntryEffect", QVariant(value)); }

inline IDispatch* AnimationSettings::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::PlaySettings* AnimationSettings::PlaySettings() const
{
    PowerPoint::PlaySettings* qax_pointer = 0;
    qRegisterMetaType("PlaySettings*", &qax_pointer);
    qRegisterMetaType("PlaySettings", qax_pointer);
    QVariant qax_result = property("PlaySettings");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PlaySettings**)qax_result.constData();
}

inline PowerPoint::SoundEffect* AnimationSettings::SoundEffect() const
{
    PowerPoint::SoundEffect* qax_pointer = 0;
    qRegisterMetaType("SoundEffect*", &qax_pointer);
    qRegisterMetaType("SoundEffect", qax_pointer);
    QVariant qax_result = property("SoundEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SoundEffect**)qax_result.constData();
}

inline PowerPoint::PpTextLevelEffect AnimationSettings::TextLevelEffect() const
{
    QVariant qax_result = property("TextLevelEffect");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpTextLevelEffect*)qax_result.constData();
}
inline void AnimationSettings::SetTextLevelEffect(PowerPoint::PpTextLevelEffect value){ setProperty("TextLevelEffect", QVariant(value)); }

inline PowerPoint::PpTextUnitEffect AnimationSettings::TextUnitEffect() const
{
    QVariant qax_result = property("TextUnitEffect");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpTextUnitEffect*)qax_result.constData();
}
inline void AnimationSettings::SetTextUnitEffect(PowerPoint::PpTextUnitEffect value){ setProperty("TextUnitEffect", QVariant(value)); }


inline PowerPoint::Application* ActionSettings::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int ActionSettings::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* ActionSettings::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* ActionSettings::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::ActionSetting* ActionSettings::Item(PowerPoint::PpMouseActivation Index)
{
    PowerPoint::ActionSetting* qax_result = 0;
    qRegisterMetaType("ActionSetting*", &qax_result);
    qRegisterMetaType("ActionSetting", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant ActionSettings::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline PowerPoint::PpActionType ActionSetting::Action() const
{
    QVariant qax_result = property("Action");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpActionType*)qax_result.constData();
}
inline void ActionSetting::SetAction(PowerPoint::PpActionType value){ setProperty("Action", QVariant(value)); }

inline QString ActionSetting::ActionVerb() const
{
    QVariant qax_result = property("ActionVerb");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ActionSetting::SetActionVerb(const QString& value){ setProperty("ActionVerb", QVariant(value)); }

inline Office::MsoTriState ActionSetting::AnimateAction() const
{
    QVariant qax_result = property("AnimateAction");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ActionSetting::SetAnimateAction(Office::MsoTriState value){ setProperty("AnimateAction", QVariant(value)); }

inline PowerPoint::Application* ActionSetting::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::Hyperlink* ActionSetting::Hyperlink() const
{
    PowerPoint::Hyperlink* qax_pointer = 0;
    qRegisterMetaType("Hyperlink*", &qax_pointer);
    qRegisterMetaType("Hyperlink", qax_pointer);
    QVariant qax_result = property("Hyperlink");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Hyperlink**)qax_result.constData();
}

inline IDispatch* ActionSetting::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString ActionSetting::Run() const
{
    QVariant qax_result = property("Run");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ActionSetting::SetRun(const QString& value){ setProperty("Run", QVariant(value)); }

inline Office::MsoTriState ActionSetting::ShowAndReturn() const
{
    QVariant qax_result = property("ShowAndReturn");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ActionSetting::SetShowAndReturn(Office::MsoTriState value){ setProperty("ShowAndReturn", QVariant(value)); }

inline QString ActionSetting::SlideShowName() const
{
    QVariant qax_result = property("SlideShowName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ActionSetting::SetSlideShowName(const QString& value){ setProperty("SlideShowName", QVariant(value)); }

inline PowerPoint::SoundEffect* ActionSetting::SoundEffect() const
{
    PowerPoint::SoundEffect* qax_pointer = 0;
    qRegisterMetaType("SoundEffect*", &qax_pointer);
    qRegisterMetaType("SoundEffect", qax_pointer);
    QVariant qax_result = property("SoundEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SoundEffect**)qax_result.constData();
}


inline QString PlaySettings::ActionVerb() const
{
    QVariant qax_result = property("ActionVerb");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void PlaySettings::SetActionVerb(const QString& value){ setProperty("ActionVerb", QVariant(value)); }

inline PowerPoint::Application* PlaySettings::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline Office::MsoTriState PlaySettings::HideWhileNotPlaying() const
{
    QVariant qax_result = property("HideWhileNotPlaying");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PlaySettings::SetHideWhileNotPlaying(Office::MsoTriState value){ setProperty("HideWhileNotPlaying", QVariant(value)); }

inline Office::MsoTriState PlaySettings::LoopUntilStopped() const
{
    QVariant qax_result = property("LoopUntilStopped");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PlaySettings::SetLoopUntilStopped(Office::MsoTriState value){ setProperty("LoopUntilStopped", QVariant(value)); }

inline IDispatch* PlaySettings::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoTriState PlaySettings::PauseAnimation() const
{
    QVariant qax_result = property("PauseAnimation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PlaySettings::SetPauseAnimation(Office::MsoTriState value){ setProperty("PauseAnimation", QVariant(value)); }

inline Office::MsoTriState PlaySettings::PlayOnEntry() const
{
    QVariant qax_result = property("PlayOnEntry");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PlaySettings::SetPlayOnEntry(Office::MsoTriState value){ setProperty("PlayOnEntry", QVariant(value)); }

inline Office::MsoTriState PlaySettings::RewindMovie() const
{
    QVariant qax_result = property("RewindMovie");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PlaySettings::SetRewindMovie(Office::MsoTriState value){ setProperty("RewindMovie", QVariant(value)); }

inline int PlaySettings::StopAfterSlides() const
{
    QVariant qax_result = property("StopAfterSlides");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void PlaySettings::SetStopAfterSlides(int value){ setProperty("StopAfterSlides", QVariant(value)); }


inline PowerPoint::ActionSettings* TextRange::ActionSettings() const
{
    PowerPoint::ActionSettings* qax_pointer = 0;
    qRegisterMetaType("ActionSettings*", &qax_pointer);
    qRegisterMetaType("ActionSettings", qax_pointer);
    QVariant qax_result = property("ActionSettings");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ActionSettings**)qax_result.constData();
}

inline PowerPoint::Application* TextRange::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline double TextRange::BoundHeight() const
{
    QVariant qax_result = property("BoundHeight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double TextRange::BoundLeft() const
{
    QVariant qax_result = property("BoundLeft");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double TextRange::BoundTop() const
{
    QVariant qax_result = property("BoundTop");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double TextRange::BoundWidth() const
{
    QVariant qax_result = property("BoundWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline int TextRange::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::Font* TextRange::Font() const
{
    PowerPoint::Font* qax_pointer = 0;
    qRegisterMetaType("Font*", &qax_pointer);
    qRegisterMetaType("Font", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Font**)qax_result.constData();
}

inline int TextRange::IndentLevel() const
{
    QVariant qax_result = property("IndentLevel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TextRange::SetIndentLevel(int value){ setProperty("IndentLevel", QVariant(value)); }

inline Office::MsoLanguageID TextRange::LanguageID() const
{
    QVariant qax_result = property("LanguageID");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoLanguageID*)qax_result.constData();
}
inline void TextRange::SetLanguageID(Office::MsoLanguageID value){ setProperty("LanguageID", QVariant(value)); }

inline int TextRange::Length() const
{
    QVariant qax_result = property("Length");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::ParagraphFormat* TextRange::ParagraphFormat() const
{
    PowerPoint::ParagraphFormat* qax_pointer = 0;
    qRegisterMetaType("ParagraphFormat*", &qax_pointer);
    qRegisterMetaType("ParagraphFormat", qax_pointer);
    QVariant qax_result = property("ParagraphFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ParagraphFormat**)qax_result.constData();
}

inline IDispatch* TextRange::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int TextRange::Start() const
{
    QVariant qax_result = property("Start");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString TextRange::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TextRange::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline IUnknown* TextRange::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void TextRange::AddPeriods()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void TextRange::ChangeCase(PowerPoint::PpChangeCase Type)
{
    void *_a[] = {0, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline PowerPoint::TextRange* TextRange::Characters()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Characters(int Start)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Characters(int Start, int Length)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void TextRange::Copy()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void TextRange::Cut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void TextRange::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline PowerPoint::TextRange* TextRange::Find(const QString& FindWhat)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FindWhat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Find(const QString& FindWhat, int After)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FindWhat, (void*)&After};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Find(const QString& FindWhat, int After, Office::MsoTriState MatchCase)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FindWhat, (void*)&After, (void*)&MatchCase};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Find(const QString& FindWhat, int After, Office::MsoTriState MatchCase, Office::MsoTriState WholeWords)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FindWhat, (void*)&After, (void*)&MatchCase, (void*)&WholeWords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::InsertAfter()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::InsertAfter(const QString& NewText)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&NewText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::InsertBefore()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::InsertBefore(const QString& NewText)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&NewText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::InsertDateTime(PowerPoint::PpDateTimeFormat DateTimeFormat)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DateTimeFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::InsertDateTime(PowerPoint::PpDateTimeFormat DateTimeFormat, Office::MsoTriState InsertAsField)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DateTimeFormat, (void*)&InsertAsField};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::InsertSlideNumber()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::InsertSymbol(const QString& FontName, int CharNumber)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FontName, (void*)&CharNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::InsertSymbol(const QString& FontName, int CharNumber, Office::MsoTriState Unicode)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FontName, (void*)&CharNumber, (void*)&Unicode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Lines()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Lines(int Start)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Lines(int Start, int Length)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline void TextRange::LtrRun()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline PowerPoint::TextRange* TextRange::Paragraphs()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Paragraphs(int Start)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Paragraphs(int Start, int Length)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Paste()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::PasteSpecial()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::PasteSpecial(PowerPoint::PpPasteDataType DataType)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType, (void*)&DisplayAsIcon};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex, (void*)&IconLabel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::PasteSpecial(PowerPoint::PpPasteDataType DataType, Office::MsoTriState DisplayAsIcon, const QString& IconFileName, int IconIndex, const QString& IconLabel, Office::MsoTriState Link)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DataType, (void*)&DisplayAsIcon, (void*)&IconFileName, (void*)&IconIndex, (void*)&IconLabel, (void*)&Link};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline void TextRange::RemovePeriods()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline PowerPoint::TextRange* TextRange::Replace(const QString& FindWhat, const QString& ReplaceWhat)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FindWhat, (void*)&ReplaceWhat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Replace(const QString& FindWhat, const QString& ReplaceWhat, int After)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FindWhat, (void*)&ReplaceWhat, (void*)&After};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Replace(const QString& FindWhat, const QString& ReplaceWhat, int After, Office::MsoTriState MatchCase)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FindWhat, (void*)&ReplaceWhat, (void*)&After, (void*)&MatchCase};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Replace(const QString& FindWhat, const QString& ReplaceWhat, int After, Office::MsoTriState MatchCase, Office::MsoTriState WholeWords)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FindWhat, (void*)&ReplaceWhat, (void*)&After, (void*)&MatchCase, (void*)&WholeWords};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void TextRange::RotatedBounds(double& X1, double& Y1, double& X2, double& Y2, double& X3, double& Y3, double& x4, double& y4)
{
    void *_a[] = {0, (void*)&X1, (void*)&Y1, (void*)&X2, (void*)&Y2, (void*)&X3, (void*)&Y3, (void*)&x4, (void*)&y4};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void TextRange::RtlRun()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline PowerPoint::TextRange* TextRange::Runs()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Runs(int Start)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Runs(int Start, int Length)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline void TextRange::Select()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline PowerPoint::TextRange* TextRange::Sentences()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Sentences(int Start)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Sentences(int Start, int Length)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::TrimText()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Words()
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Words(int Start)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline PowerPoint::TextRange* TextRange::Words(int Start, int Length)
{
    PowerPoint::TextRange* qax_result = 0;
    qRegisterMetaType("TextRange*", &qax_result);
    qRegisterMetaType("TextRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Start, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline QVariant TextRange::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}


inline PowerPoint::Application* Ruler::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::RulerLevels* Ruler::Levels() const
{
    PowerPoint::RulerLevels* qax_pointer = 0;
    qRegisterMetaType("RulerLevels*", &qax_pointer);
    qRegisterMetaType("RulerLevels", qax_pointer);
    QVariant qax_result = property("Levels");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::RulerLevels**)qax_result.constData();
}

inline IDispatch* Ruler::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::TabStops* Ruler::TabStops() const
{
    PowerPoint::TabStops* qax_pointer = 0;
    qRegisterMetaType("TabStops*", &qax_pointer);
    qRegisterMetaType("TabStops", qax_pointer);
    QVariant qax_result = property("TabStops");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TabStops**)qax_result.constData();
}


inline PowerPoint::Application* RulerLevels::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int RulerLevels::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* RulerLevels::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* RulerLevels::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::RulerLevel* RulerLevels::Item(int Index)
{
    PowerPoint::RulerLevel* qax_result = 0;
    qRegisterMetaType("RulerLevel*", &qax_result);
    qRegisterMetaType("RulerLevel", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant RulerLevels::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline PowerPoint::Application* RulerLevel::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline double RulerLevel::FirstMargin() const
{
    QVariant qax_result = property("FirstMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void RulerLevel::SetFirstMargin(double value){ setProperty("FirstMargin", QVariant(value)); }

inline double RulerLevel::LeftMargin() const
{
    QVariant qax_result = property("LeftMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void RulerLevel::SetLeftMargin(double value){ setProperty("LeftMargin", QVariant(value)); }

inline IDispatch* RulerLevel::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}


inline PowerPoint::Application* TabStops::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int TabStops::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double TabStops::DefaultSpacing() const
{
    QVariant qax_result = property("DefaultSpacing");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TabStops::SetDefaultSpacing(double value){ setProperty("DefaultSpacing", QVariant(value)); }

inline IDispatch* TabStops::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* TabStops::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::TabStop* TabStops::Add(PowerPoint::PpTabStopType Type, double Position)
{
    PowerPoint::TabStop* qax_result = 0;
    qRegisterMetaType("TabStop*", &qax_result);
    qRegisterMetaType("TabStop", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&Position};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::TabStop* TabStops::Item(int Index)
{
    PowerPoint::TabStop* qax_result = 0;
    qRegisterMetaType("TabStop*", &qax_result);
    qRegisterMetaType("TabStop", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QVariant TabStops::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline PowerPoint::Application* TabStop::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline IDispatch* TabStop::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline double TabStop::Position() const
{
    QVariant qax_result = property("Position");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TabStop::SetPosition(double value){ setProperty("Position", QVariant(value)); }

inline PowerPoint::PpTabStopType TabStop::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpTabStopType*)qax_result.constData();
}
inline void TabStop::SetType(PowerPoint::PpTabStopType value){ setProperty("Type", QVariant(value)); }

inline void TabStop::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline PowerPoint::Application* Font::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline Office::MsoTriState Font::AutoRotateNumbers() const
{
    QVariant qax_result = property("AutoRotateNumbers");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Font::SetAutoRotateNumbers(Office::MsoTriState value){ setProperty("AutoRotateNumbers", QVariant(value)); }

inline double Font::BaselineOffset() const
{
    QVariant qax_result = property("BaselineOffset");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Font::SetBaselineOffset(double value){ setProperty("BaselineOffset", QVariant(value)); }

inline Office::MsoTriState Font::Bold() const
{
    QVariant qax_result = property("Bold");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Font::SetBold(Office::MsoTriState value){ setProperty("Bold", QVariant(value)); }

inline PowerPoint::ColorFormat* Font::Color() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("Color");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}

inline Office::MsoTriState Font::Embeddable() const
{
    QVariant qax_result = property("Embeddable");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState Font::Embedded() const
{
    QVariant qax_result = property("Embedded");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState Font::Emboss() const
{
    QVariant qax_result = property("Emboss");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Font::SetEmboss(Office::MsoTriState value){ setProperty("Emboss", QVariant(value)); }

inline Office::MsoTriState Font::Italic() const
{
    QVariant qax_result = property("Italic");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Font::SetItalic(Office::MsoTriState value){ setProperty("Italic", QVariant(value)); }

inline QString Font::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Font::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString Font::NameAscii() const
{
    QVariant qax_result = property("NameAscii");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Font::SetNameAscii(const QString& value){ setProperty("NameAscii", QVariant(value)); }

inline QString Font::NameComplexScript() const
{
    QVariant qax_result = property("NameComplexScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Font::SetNameComplexScript(const QString& value){ setProperty("NameComplexScript", QVariant(value)); }

inline QString Font::NameFarEast() const
{
    QVariant qax_result = property("NameFarEast");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Font::SetNameFarEast(const QString& value){ setProperty("NameFarEast", QVariant(value)); }

inline QString Font::NameOther() const
{
    QVariant qax_result = property("NameOther");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Font::SetNameOther(const QString& value){ setProperty("NameOther", QVariant(value)); }

inline IDispatch* Font::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoTriState Font::Shadow() const
{
    QVariant qax_result = property("Shadow");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Font::SetShadow(Office::MsoTriState value){ setProperty("Shadow", QVariant(value)); }

inline double Font::Size() const
{
    QVariant qax_result = property("Size");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Font::SetSize(double value){ setProperty("Size", QVariant(value)); }

inline Office::MsoTriState Font::Subscript() const
{
    QVariant qax_result = property("Subscript");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Font::SetSubscript(Office::MsoTriState value){ setProperty("Subscript", QVariant(value)); }

inline Office::MsoTriState Font::Superscript() const
{
    QVariant qax_result = property("Superscript");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Font::SetSuperscript(Office::MsoTriState value){ setProperty("Superscript", QVariant(value)); }

inline Office::MsoTriState Font::Underline() const
{
    QVariant qax_result = property("Underline");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Font::SetUnderline(Office::MsoTriState value){ setProperty("Underline", QVariant(value)); }


inline PowerPoint::PpParagraphAlignment ParagraphFormat::Alignment() const
{
    QVariant qax_result = property("Alignment");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpParagraphAlignment*)qax_result.constData();
}
inline void ParagraphFormat::SetAlignment(PowerPoint::PpParagraphAlignment value){ setProperty("Alignment", QVariant(value)); }

inline PowerPoint::Application* ParagraphFormat::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::PpBaselineAlignment ParagraphFormat::BaseLineAlignment() const
{
    QVariant qax_result = property("BaseLineAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpBaselineAlignment*)qax_result.constData();
}
inline void ParagraphFormat::SetBaseLineAlignment(PowerPoint::PpBaselineAlignment value){ setProperty("BaseLineAlignment", QVariant(value)); }

inline PowerPoint::BulletFormat* ParagraphFormat::Bullet() const
{
    PowerPoint::BulletFormat* qax_pointer = 0;
    qRegisterMetaType("BulletFormat*", &qax_pointer);
    qRegisterMetaType("BulletFormat", qax_pointer);
    QVariant qax_result = property("Bullet");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::BulletFormat**)qax_result.constData();
}

inline Office::MsoTriState ParagraphFormat::FarEastLineBreakControl() const
{
    QVariant qax_result = property("FarEastLineBreakControl");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ParagraphFormat::SetFarEastLineBreakControl(Office::MsoTriState value){ setProperty("FarEastLineBreakControl", QVariant(value)); }

inline Office::MsoTriState ParagraphFormat::HangingPunctuation() const
{
    QVariant qax_result = property("HangingPunctuation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ParagraphFormat::SetHangingPunctuation(Office::MsoTriState value){ setProperty("HangingPunctuation", QVariant(value)); }

inline Office::MsoTriState ParagraphFormat::LineRuleAfter() const
{
    QVariant qax_result = property("LineRuleAfter");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ParagraphFormat::SetLineRuleAfter(Office::MsoTriState value){ setProperty("LineRuleAfter", QVariant(value)); }

inline Office::MsoTriState ParagraphFormat::LineRuleBefore() const
{
    QVariant qax_result = property("LineRuleBefore");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ParagraphFormat::SetLineRuleBefore(Office::MsoTriState value){ setProperty("LineRuleBefore", QVariant(value)); }

inline Office::MsoTriState ParagraphFormat::LineRuleWithin() const
{
    QVariant qax_result = property("LineRuleWithin");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ParagraphFormat::SetLineRuleWithin(Office::MsoTriState value){ setProperty("LineRuleWithin", QVariant(value)); }

inline IDispatch* ParagraphFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline double ParagraphFormat::SpaceAfter() const
{
    QVariant qax_result = property("SpaceAfter");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ParagraphFormat::SetSpaceAfter(double value){ setProperty("SpaceAfter", QVariant(value)); }

inline double ParagraphFormat::SpaceBefore() const
{
    QVariant qax_result = property("SpaceBefore");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ParagraphFormat::SetSpaceBefore(double value){ setProperty("SpaceBefore", QVariant(value)); }

inline double ParagraphFormat::SpaceWithin() const
{
    QVariant qax_result = property("SpaceWithin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ParagraphFormat::SetSpaceWithin(double value){ setProperty("SpaceWithin", QVariant(value)); }

inline PowerPoint::PpDirection ParagraphFormat::TextDirection() const
{
    QVariant qax_result = property("TextDirection");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpDirection*)qax_result.constData();
}
inline void ParagraphFormat::SetTextDirection(PowerPoint::PpDirection value){ setProperty("TextDirection", QVariant(value)); }

inline Office::MsoTriState ParagraphFormat::WordWrap() const
{
    QVariant qax_result = property("WordWrap");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void ParagraphFormat::SetWordWrap(Office::MsoTriState value){ setProperty("WordWrap", QVariant(value)); }


inline PowerPoint::Application* BulletFormat::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int BulletFormat::Character() const
{
    QVariant qax_result = property("Character");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void BulletFormat::SetCharacter(int value){ setProperty("Character", QVariant(value)); }

inline PowerPoint::Font* BulletFormat::Font() const
{
    PowerPoint::Font* qax_pointer = 0;
    qRegisterMetaType("Font*", &qax_pointer);
    qRegisterMetaType("Font", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Font**)qax_result.constData();
}

inline int BulletFormat::Number() const
{
    QVariant qax_result = property("Number");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* BulletFormat::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline double BulletFormat::RelativeSize() const
{
    QVariant qax_result = property("RelativeSize");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void BulletFormat::SetRelativeSize(double value){ setProperty("RelativeSize", QVariant(value)); }

inline int BulletFormat::StartValue() const
{
    QVariant qax_result = property("StartValue");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void BulletFormat::SetStartValue(int value){ setProperty("StartValue", QVariant(value)); }

inline PowerPoint::PpNumberedBulletStyle BulletFormat::Style() const
{
    QVariant qax_result = property("Style");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpNumberedBulletStyle*)qax_result.constData();
}
inline void BulletFormat::SetStyle(PowerPoint::PpNumberedBulletStyle value){ setProperty("Style", QVariant(value)); }

inline PowerPoint::PpBulletType BulletFormat::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpBulletType*)qax_result.constData();
}
inline void BulletFormat::SetType(PowerPoint::PpBulletType value){ setProperty("Type", QVariant(value)); }

inline Office::MsoTriState BulletFormat::UseTextColor() const
{
    QVariant qax_result = property("UseTextColor");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void BulletFormat::SetUseTextColor(Office::MsoTriState value){ setProperty("UseTextColor", QVariant(value)); }

inline Office::MsoTriState BulletFormat::UseTextFont() const
{
    QVariant qax_result = property("UseTextFont");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void BulletFormat::SetUseTextFont(Office::MsoTriState value){ setProperty("UseTextFont", QVariant(value)); }

inline Office::MsoTriState BulletFormat::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void BulletFormat::SetVisible(Office::MsoTriState value){ setProperty("Visible", QVariant(value)); }

inline void BulletFormat::Picture(const QString& Picture)
{
    void *_a[] = {0, (void*)&Picture};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline PowerPoint::Application* TextStyles::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int TextStyles::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* TextStyles::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* TextStyles::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::TextStyle* TextStyles::Item(PowerPoint::PpTextStyleType Type)
{
    PowerPoint::TextStyle* qax_result = 0;
    qRegisterMetaType("TextStyle*", &qax_result);
    qRegisterMetaType("TextStyle", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant TextStyles::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline PowerPoint::Application* TextStyle::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::TextStyleLevels* TextStyle::Levels() const
{
    PowerPoint::TextStyleLevels* qax_pointer = 0;
    qRegisterMetaType("TextStyleLevels*", &qax_pointer);
    qRegisterMetaType("TextStyleLevels", qax_pointer);
    QVariant qax_result = property("Levels");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TextStyleLevels**)qax_result.constData();
}

inline IDispatch* TextStyle::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::Ruler* TextStyle::Ruler() const
{
    PowerPoint::Ruler* qax_pointer = 0;
    qRegisterMetaType("Ruler*", &qax_pointer);
    qRegisterMetaType("Ruler", qax_pointer);
    QVariant qax_result = property("Ruler");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Ruler**)qax_result.constData();
}

inline PowerPoint::TextFrame* TextStyle::TextFrame() const
{
    PowerPoint::TextFrame* qax_pointer = 0;
    qRegisterMetaType("TextFrame*", &qax_pointer);
    qRegisterMetaType("TextFrame", qax_pointer);
    QVariant qax_result = property("TextFrame");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TextFrame**)qax_result.constData();
}


inline PowerPoint::Application* TextStyleLevels::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int TextStyleLevels::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* TextStyleLevels::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* TextStyleLevels::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::TextStyleLevel* TextStyleLevels::Item(int Level)
{
    PowerPoint::TextStyleLevel* qax_result = 0;
    qRegisterMetaType("TextStyleLevel*", &qax_result);
    qRegisterMetaType("TextStyleLevel", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant TextStyleLevels::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline PowerPoint::Application* TextStyleLevel::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::Font* TextStyleLevel::Font() const
{
    PowerPoint::Font* qax_pointer = 0;
    qRegisterMetaType("Font*", &qax_pointer);
    qRegisterMetaType("Font", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Font**)qax_result.constData();
}

inline PowerPoint::ParagraphFormat* TextStyleLevel::ParagraphFormat() const
{
    PowerPoint::ParagraphFormat* qax_pointer = 0;
    qRegisterMetaType("ParagraphFormat*", &qax_pointer);
    qRegisterMetaType("ParagraphFormat", qax_pointer);
    QVariant qax_result = property("ParagraphFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ParagraphFormat**)qax_result.constData();
}

inline IDispatch* TextStyleLevel::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}


inline PowerPoint::Application* HeaderFooter::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::PpDateTimeFormat HeaderFooter::Format() const
{
    QVariant qax_result = property("Format");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpDateTimeFormat*)qax_result.constData();
}
inline void HeaderFooter::SetFormat(PowerPoint::PpDateTimeFormat value){ setProperty("Format", QVariant(value)); }

inline IDispatch* HeaderFooter::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString HeaderFooter::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void HeaderFooter::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline Office::MsoTriState HeaderFooter::UseFormat() const
{
    QVariant qax_result = property("UseFormat");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void HeaderFooter::SetUseFormat(Office::MsoTriState value){ setProperty("UseFormat", QVariant(value)); }

inline Office::MsoTriState HeaderFooter::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void HeaderFooter::SetVisible(Office::MsoTriState value){ setProperty("Visible", QVariant(value)); }


inline PowerPoint::Application* _Presentation::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline IDispatch* _Presentation::BuiltInDocumentProperties() const
{
    QVariant qax_result = property("BuiltInDocumentProperties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::ColorSchemes* _Presentation::ColorSchemes() const
{
    PowerPoint::ColorSchemes* qax_pointer = 0;
    qRegisterMetaType("ColorSchemes*", &qax_pointer);
    qRegisterMetaType("ColorSchemes", qax_pointer);
    QVariant qax_result = property("ColorSchemes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorSchemes**)qax_result.constData();
}

inline Office::CommandBars* _Presentation::CommandBars() const
{
    Office::CommandBars* qax_pointer = 0;
    qRegisterMetaType("Office::CommandBars*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::CommandBars", qax_pointer);
#endif
    QVariant qax_result = property("CommandBars");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::CommandBars**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline IDispatch* _Presentation::Container() const
{
    QVariant qax_result = property("Container");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* _Presentation::CustomDocumentProperties() const
{
    QVariant qax_result = property("CustomDocumentProperties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoLanguageID _Presentation::DefaultLanguageID() const
{
    QVariant qax_result = property("DefaultLanguageID");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoLanguageID*)qax_result.constData();
}
inline void _Presentation::SetDefaultLanguageID(Office::MsoLanguageID value){ setProperty("DefaultLanguageID", QVariant(value)); }

inline PowerPoint::Shape* _Presentation::DefaultShape() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("DefaultShape");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}

inline PowerPoint::Designs* _Presentation::Designs() const
{
    PowerPoint::Designs* qax_pointer = 0;
    qRegisterMetaType("Designs*", &qax_pointer);
    qRegisterMetaType("Designs", qax_pointer);
    QVariant qax_result = property("Designs");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Designs**)qax_result.constData();
}

inline Office::MsoTriState _Presentation::DisplayComments() const
{
    QVariant qax_result = property("DisplayComments");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void _Presentation::SetDisplayComments(Office::MsoTriState value){ setProperty("DisplayComments", QVariant(value)); }

inline Office::DocumentLibraryVersions* _Presentation::DocumentLibraryVersions() const
{
    Office::DocumentLibraryVersions* qax_pointer = 0;
    qRegisterMetaType("Office::DocumentLibraryVersions*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::DocumentLibraryVersions", qax_pointer);
#endif
    QVariant qax_result = property("DocumentLibraryVersions");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::DocumentLibraryVersions**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline Office::MsoTriState _Presentation::EnvelopeVisible() const
{
    QVariant qax_result = property("EnvelopeVisible");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void _Presentation::SetEnvelopeVisible(Office::MsoTriState value){ setProperty("EnvelopeVisible", QVariant(value)); }

inline PowerPoint::ExtraColors* _Presentation::ExtraColors() const
{
    PowerPoint::ExtraColors* qax_pointer = 0;
    qRegisterMetaType("ExtraColors*", &qax_pointer);
    qRegisterMetaType("ExtraColors", qax_pointer);
    QVariant qax_result = property("ExtraColors");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ExtraColors**)qax_result.constData();
}

inline Office::MsoFarEastLineBreakLanguageID _Presentation::FarEastLineBreakLanguage() const
{
    QVariant qax_result = property("FarEastLineBreakLanguage");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoFarEastLineBreakLanguageID*)qax_result.constData();
}
inline void _Presentation::SetFarEastLineBreakLanguage(Office::MsoFarEastLineBreakLanguageID value){ setProperty("FarEastLineBreakLanguage", QVariant(value)); }

inline PowerPoint::PpFarEastLineBreakLevel _Presentation::FarEastLineBreakLevel() const
{
    QVariant qax_result = property("FarEastLineBreakLevel");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpFarEastLineBreakLevel*)qax_result.constData();
}
inline void _Presentation::SetFarEastLineBreakLevel(PowerPoint::PpFarEastLineBreakLevel value){ setProperty("FarEastLineBreakLevel", QVariant(value)); }

inline PowerPoint::Fonts* _Presentation::Fonts() const
{
    PowerPoint::Fonts* qax_pointer = 0;
    qRegisterMetaType("Fonts*", &qax_pointer);
    qRegisterMetaType("Fonts", qax_pointer);
    QVariant qax_result = property("Fonts");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Fonts**)qax_result.constData();
}

inline QString _Presentation::FullName() const
{
    QVariant qax_result = property("FullName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double _Presentation::GridDistance() const
{
    QVariant qax_result = property("GridDistance");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void _Presentation::SetGridDistance(double value){ setProperty("GridDistance", QVariant(value)); }

inline Office::HTMLProject* _Presentation::HTMLProject() const
{
    Office::HTMLProject* qax_pointer = 0;
    qRegisterMetaType("Office::HTMLProject*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::HTMLProject", qax_pointer);
#endif
    QVariant qax_result = property("HTMLProject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::HTMLProject**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::_Master* _Presentation::HandoutMaster() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("HandoutMaster");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline PowerPoint::PpRevisionInfo _Presentation::HasRevisionInfo() const
{
    QVariant qax_result = property("HasRevisionInfo");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpRevisionInfo*)qax_result.constData();
}

inline Office::MsoTriState _Presentation::HasTitleMaster() const
{
    QVariant qax_result = property("HasTitleMaster");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::PpDirection _Presentation::LayoutDirection() const
{
    QVariant qax_result = property("LayoutDirection");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpDirection*)qax_result.constData();
}
inline void _Presentation::SetLayoutDirection(PowerPoint::PpDirection value){ setProperty("LayoutDirection", QVariant(value)); }

inline QString _Presentation::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString _Presentation::NoLineBreakAfter() const
{
    QVariant qax_result = property("NoLineBreakAfter");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Presentation::SetNoLineBreakAfter(const QString& value){ setProperty("NoLineBreakAfter", QVariant(value)); }

inline QString _Presentation::NoLineBreakBefore() const
{
    QVariant qax_result = property("NoLineBreakBefore");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Presentation::SetNoLineBreakBefore(const QString& value){ setProperty("NoLineBreakBefore", QVariant(value)); }

inline PowerPoint::_Master* _Presentation::NotesMaster() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("NotesMaster");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline PowerPoint::PageSetup* _Presentation::PageSetup() const
{
    PowerPoint::PageSetup* qax_pointer = 0;
    qRegisterMetaType("PageSetup*", &qax_pointer);
    qRegisterMetaType("PageSetup", qax_pointer);
    QVariant qax_result = property("PageSetup");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PageSetup**)qax_result.constData();
}

inline IDispatch* _Presentation::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString _Presentation::Password() const
{
    QVariant qax_result = property("Password");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Presentation::SetPassword(const QString& value){ setProperty("Password", QVariant(value)); }

inline QString _Presentation::PasswordEncryptionAlgorithm() const
{
    QVariant qax_result = property("PasswordEncryptionAlgorithm");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool _Presentation::PasswordEncryptionFileProperties() const
{
    QVariant qax_result = property("PasswordEncryptionFileProperties");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int _Presentation::PasswordEncryptionKeyLength() const
{
    QVariant qax_result = property("PasswordEncryptionKeyLength");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString _Presentation::PasswordEncryptionProvider() const
{
    QVariant qax_result = property("PasswordEncryptionProvider");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString _Presentation::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::Permission* _Presentation::Permission() const
{
    Office::Permission* qax_pointer = 0;
    qRegisterMetaType("Office::Permission*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Permission", qax_pointer);
#endif
    QVariant qax_result = property("Permission");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Permission**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::PrintOptions* _Presentation::PrintOptions() const
{
    PowerPoint::PrintOptions* qax_pointer = 0;
    qRegisterMetaType("PrintOptions*", &qax_pointer);
    qRegisterMetaType("PrintOptions", qax_pointer);
    QVariant qax_result = property("PrintOptions");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PrintOptions**)qax_result.constData();
}

inline PowerPoint::PublishObjects* _Presentation::PublishObjects() const
{
    PowerPoint::PublishObjects* qax_pointer = 0;
    qRegisterMetaType("PublishObjects*", &qax_pointer);
    qRegisterMetaType("PublishObjects", qax_pointer);
    QVariant qax_result = property("PublishObjects");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PublishObjects**)qax_result.constData();
}

inline Office::MsoTriState _Presentation::ReadOnly() const
{
    QVariant qax_result = property("ReadOnly");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState _Presentation::RemovePersonalInformation() const
{
    QVariant qax_result = property("RemovePersonalInformation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void _Presentation::SetRemovePersonalInformation(Office::MsoTriState value){ setProperty("RemovePersonalInformation", QVariant(value)); }

inline Office::MsoTriState _Presentation::Saved() const
{
    QVariant qax_result = property("Saved");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void _Presentation::SetSaved(Office::MsoTriState value){ setProperty("Saved", QVariant(value)); }

inline Office::SharedWorkspace* _Presentation::SharedWorkspace() const
{
    Office::SharedWorkspace* qax_pointer = 0;
    qRegisterMetaType("Office::SharedWorkspace*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::SharedWorkspace", qax_pointer);
#endif
    QVariant qax_result = property("SharedWorkspace");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::SharedWorkspace**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline Office::SignatureSet* _Presentation::Signatures() const
{
    Office::SignatureSet* qax_pointer = 0;
    qRegisterMetaType("Office::SignatureSet*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::SignatureSet", qax_pointer);
#endif
    QVariant qax_result = property("Signatures");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::SignatureSet**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::_Master* _Presentation::SlideMaster() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("SlideMaster");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline PowerPoint::SlideShowSettings* _Presentation::SlideShowSettings() const
{
    PowerPoint::SlideShowSettings* qax_pointer = 0;
    qRegisterMetaType("SlideShowSettings*", &qax_pointer);
    qRegisterMetaType("SlideShowSettings", qax_pointer);
    QVariant qax_result = property("SlideShowSettings");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowSettings**)qax_result.constData();
}

inline PowerPoint::SlideShowWindow* _Presentation::SlideShowWindow() const
{
    PowerPoint::SlideShowWindow* qax_pointer = 0;
    qRegisterMetaType("SlideShowWindow*", &qax_pointer);
    qRegisterMetaType("SlideShowWindow", qax_pointer);
    QVariant qax_result = property("SlideShowWindow");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowWindow**)qax_result.constData();
}

inline PowerPoint::Slides* _Presentation::Slides() const
{
    PowerPoint::Slides* qax_pointer = 0;
    qRegisterMetaType("Slides*", &qax_pointer);
    qRegisterMetaType("Slides", qax_pointer);
    QVariant qax_result = property("Slides");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Slides**)qax_result.constData();
}

inline Office::MsoTriState _Presentation::SnapToGrid() const
{
    QVariant qax_result = property("SnapToGrid");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void _Presentation::SetSnapToGrid(Office::MsoTriState value){ setProperty("SnapToGrid", QVariant(value)); }

inline Office::Sync* _Presentation::Sync() const
{
    Office::Sync* qax_pointer = 0;
    qRegisterMetaType("Office::Sync*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Sync", qax_pointer);
#endif
    QVariant qax_result = property("Sync");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Sync**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::Tags* _Presentation::Tags() const
{
    PowerPoint::Tags* qax_pointer = 0;
    qRegisterMetaType("Tags*", &qax_pointer);
    qRegisterMetaType("Tags", qax_pointer);
    QVariant qax_result = property("Tags");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Tags**)qax_result.constData();
}

inline QString _Presentation::TemplateName() const
{
    QVariant qax_result = property("TemplateName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::_Master* _Presentation::TitleMaster() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("TitleMaster");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline Office::MsoTriState _Presentation::VBASigned() const
{
    QVariant qax_result = property("VBASigned");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline VBIDE::VBProject* _Presentation::VBProject() const
{
    VBIDE::VBProject* qax_pointer = 0;
    qRegisterMetaType("VBIDE::VBProject*", &qax_pointer);
#ifdef QAX_DUMPCPP_VBIDE_H
    qRegisterMetaType("VBIDE::VBProject", qax_pointer);
#endif
    QVariant qax_result = property("VBProject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_VBIDE_H
    return *(VBIDE::VBProject**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::WebOptions* _Presentation::WebOptions() const
{
    PowerPoint::WebOptions* qax_pointer = 0;
    qRegisterMetaType("WebOptions*", &qax_pointer);
    qRegisterMetaType("WebOptions", qax_pointer);
    QVariant qax_result = property("WebOptions");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::WebOptions**)qax_result.constData();
}

inline PowerPoint::DocumentWindows* _Presentation::Windows() const
{
    PowerPoint::DocumentWindows* qax_pointer = 0;
    qRegisterMetaType("DocumentWindows*", &qax_pointer);
    qRegisterMetaType("DocumentWindows", qax_pointer);
    QVariant qax_result = property("Windows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DocumentWindows**)qax_result.constData();
}

inline QString _Presentation::WritePassword() const
{
    QVariant qax_result = property("WritePassword");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _Presentation::SetWritePassword(const QString& value){ setProperty("WritePassword", QVariant(value)); }

inline void _Presentation::AddBaseline()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void _Presentation::AddBaseline(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline PowerPoint::_Master* _Presentation::AddTitleMaster()
{
    PowerPoint::_Master* qax_result = 0;
    qRegisterMetaType("_Master*", &qax_result);
    qRegisterMetaType("_Master", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void _Presentation::AddToFavorites()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void _Presentation::ApplyTemplate(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline bool _Presentation::CanCheckIn()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void _Presentation::CheckIn()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void _Presentation::CheckIn(bool SaveChanges)
{
    void *_a[] = {0, (void*)&SaveChanges};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void _Presentation::CheckIn(bool SaveChanges, const QVariant& Comments)
{
    void *_a[] = {0, (void*)&SaveChanges, (void*)&Comments};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void _Presentation::CheckIn(bool SaveChanges, const QVariant& Comments, const QVariant& MakePublic)
{
    void *_a[] = {0, (void*)&SaveChanges, (void*)&Comments, (void*)&MakePublic};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void _Presentation::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void _Presentation::EndReview()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void _Presentation::Export(const QString& Path, const QString& FilterName)
{
    void *_a[] = {0, (void*)&Path, (void*)&FilterName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void _Presentation::Export(const QString& Path, const QString& FilterName, int ScaleWidth)
{
    void *_a[] = {0, (void*)&Path, (void*)&FilterName, (void*)&ScaleWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void _Presentation::Export(const QString& Path, const QString& FilterName, int ScaleWidth, int ScaleHeight)
{
    void *_a[] = {0, (void*)&Path, (void*)&FilterName, (void*)&ScaleWidth, (void*)&ScaleHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void _Presentation::FollowHyperlink(const QString& Address)
{
    void *_a[] = {0, (void*)&Address};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void _Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void _Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress, (void*)&NewWindow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void _Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress, (void*)&NewWindow, (void*)&AddHistory};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void _Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress, (void*)&NewWindow, (void*)&AddHistory, (void*)&ExtraInfo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void _Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo, Office::MsoExtraInfoMethod Method)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress, (void*)&NewWindow, (void*)&AddHistory, (void*)&ExtraInfo, (void*)&Method};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void _Presentation::FollowHyperlink(const QString& Address, const QString& SubAddress, bool NewWindow, bool AddHistory, const QString& ExtraInfo, Office::MsoExtraInfoMethod Method, const QString& HeaderInfo)
{
    void *_a[] = {0, (void*)&Address, (void*)&SubAddress, (void*)&NewWindow, (void*)&AddHistory, (void*)&ExtraInfo, (void*)&Method, (void*)&HeaderInfo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void _Presentation::MakeIntoTemplate(Office::MsoTriState IsDesignTemplate)
{
    void *_a[] = {0, (void*)&IsDesignTemplate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void _Presentation::Merge(const QString& Path)
{
    void *_a[] = {0, (void*)&Path};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline PowerPoint::DocumentWindow* _Presentation::NewWindow()
{
    PowerPoint::DocumentWindow* qax_result = 0;
    qRegisterMetaType("DocumentWindow*", &qax_result);
    qRegisterMetaType("DocumentWindow", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void _Presentation::PrintOut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void _Presentation::PrintOut(int From)
{
    void *_a[] = {0, (void*)&From};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void _Presentation::PrintOut(int From, int To)
{
    void *_a[] = {0, (void*)&From, (void*)&To};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void _Presentation::PrintOut(int From, int To, const QString& PrintToFile)
{
    void *_a[] = {0, (void*)&From, (void*)&To, (void*)&PrintToFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void _Presentation::PrintOut(int From, int To, const QString& PrintToFile, int Copies)
{
    void *_a[] = {0, (void*)&From, (void*)&To, (void*)&PrintToFile, (void*)&Copies};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void _Presentation::PrintOut(int From, int To, const QString& PrintToFile, int Copies, Office::MsoTriState Collate)
{
    void *_a[] = {0, (void*)&From, (void*)&To, (void*)&PrintToFile, (void*)&Copies, (void*)&Collate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void _Presentation::ReloadAs(Office::MsoEncoding cp)
{
    void *_a[] = {0, (void*)&cp};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void _Presentation::RemoveBaseline()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void _Presentation::ReplyWithChanges()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void _Presentation::ReplyWithChanges(bool ShowMessage)
{
    void *_a[] = {0, (void*)&ShowMessage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void _Presentation::Save()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void _Presentation::SaveAs(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void _Presentation::SaveAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FileFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void _Presentation::SaveAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat, Office::MsoTriState EmbedTrueTypeFonts)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FileFormat, (void*)&EmbedTrueTypeFonts};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void _Presentation::SaveCopyAs(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void _Presentation::SaveCopyAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FileFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void _Presentation::SaveCopyAs(const QString& FileName, PowerPoint::PpSaveAsFileType FileFormat, Office::MsoTriState EmbedTrueTypeFonts)
{
    void *_a[] = {0, (void*)&FileName, (void*)&FileFormat, (void*)&EmbedTrueTypeFonts};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void _Presentation::SendFaxOverInternet()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void _Presentation::SendFaxOverInternet(const QString& Recipients)
{
    void *_a[] = {0, (void*)&Recipients};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void _Presentation::SendFaxOverInternet(const QString& Recipients, const QString& Subject)
{
    void *_a[] = {0, (void*)&Recipients, (void*)&Subject};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void _Presentation::SendFaxOverInternet(const QString& Recipients, const QString& Subject, bool ShowMessage)
{
    void *_a[] = {0, (void*)&Recipients, (void*)&Subject, (void*)&ShowMessage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void _Presentation::SendForReview()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void _Presentation::SendForReview(const QString& Recipients)
{
    void *_a[] = {0, (void*)&Recipients};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void _Presentation::SendForReview(const QString& Recipients, const QString& Subject)
{
    void *_a[] = {0, (void*)&Recipients, (void*)&Subject};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void _Presentation::SendForReview(const QString& Recipients, const QString& Subject, bool ShowMessage)
{
    void *_a[] = {0, (void*)&Recipients, (void*)&Subject, (void*)&ShowMessage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void _Presentation::SendForReview(const QString& Recipients, const QString& Subject, bool ShowMessage, const QVariant& IncludeAttachment)
{
    void *_a[] = {0, (void*)&Recipients, (void*)&Subject, (void*)&ShowMessage, (void*)&IncludeAttachment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void _Presentation::SetPasswordEncryptionOptions(const QString& PasswordEncryptionProvider, const QString& PasswordEncryptionAlgorithm, int PasswordEncryptionKeyLength, bool PasswordEncryptionFileProperties)
{
    void *_a[] = {0, (void*)&PasswordEncryptionProvider, (void*)&PasswordEncryptionAlgorithm, (void*)&PasswordEncryptionKeyLength, (void*)&PasswordEncryptionFileProperties};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void _Presentation::SetUndoText(const QString& Text)
{
    void *_a[] = {0, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void _Presentation::Unused()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void _Presentation::UpdateLinks()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void _Presentation::WebPagePreview()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void _Presentation::sblt(const QString& s)
{
    void *_a[] = {0, (void*)&s};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}


inline PowerPoint::Application* Tags::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Tags::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Tags::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Tags::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void Tags::Add(const QString& Name, const QString& Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Tags::AddBinary(const QString& Name, const QString& FilePath)
{
    void *_a[] = {0, (void*)&Name, (void*)&FilePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline int Tags::BinaryValue(const QString& Name)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void Tags::Delete(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline QString Tags::Item(const QString& Name)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline QString Tags::Name(int Index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString Tags::Value(int Index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QVariant Tags::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}


inline QString OCXExtender::AltHTML() const
{
    QVariant qax_result = property("AltHTML");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void OCXExtender::SetAltHTML(const QString& value){ setProperty("AltHTML", QVariant(value)); }

inline double OCXExtender::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void OCXExtender::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline double OCXExtender::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void OCXExtender::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString OCXExtender::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void OCXExtender::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline double OCXExtender::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void OCXExtender::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool OCXExtender::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OCXExtender::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double OCXExtender::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void OCXExtender::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline int OCXExtender::ZOrderPosition() const
{
    QVariant qax_result = property("ZOrderPosition");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}


inline QString OLEControl::AltHTML() const
{
    QVariant qax_result = property("AltHTML");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void OLEControl::SetAltHTML(const QString& value){ setProperty("AltHTML", QVariant(value)); }

inline double OLEControl::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void OLEControl::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline double OLEControl::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void OLEControl::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString OLEControl::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void OLEControl::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline double OLEControl::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void OLEControl::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool OLEControl::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OLEControl::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double OLEControl::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void OLEControl::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline int OLEControl::ZOrderPosition() const
{
    QVariant qax_result = property("ZOrderPosition");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}


inline PowerPoint::Application* Table::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::Columns* Table::Columns() const
{
    PowerPoint::Columns* qax_pointer = 0;
    qRegisterMetaType("Columns*", &qax_pointer);
    qRegisterMetaType("Columns", qax_pointer);
    QVariant qax_result = property("Columns");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Columns**)qax_result.constData();
}

inline IDispatch* Table::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::Rows* Table::Rows() const
{
    PowerPoint::Rows* qax_pointer = 0;
    qRegisterMetaType("Rows*", &qax_pointer);
    qRegisterMetaType("Rows", qax_pointer);
    QVariant qax_result = property("Rows");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Rows**)qax_result.constData();
}

inline PowerPoint::PpDirection Table::TableDirection() const
{
    QVariant qax_result = property("TableDirection");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpDirection*)qax_result.constData();
}
inline void Table::SetTableDirection(PowerPoint::PpDirection value){ setProperty("TableDirection", QVariant(value)); }

inline PowerPoint::Cell* Table::Cell(int Row, int Column)
{
    PowerPoint::Cell* qax_result = 0;
    qRegisterMetaType("Cell*", &qax_result);
    qRegisterMetaType("Cell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Row, (void*)&Column};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void Table::MergeBorders()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}


inline PowerPoint::Application* Columns::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Columns::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Columns::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Columns::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Column* Columns::Add()
{
    PowerPoint::Column* qax_result = 0;
    qRegisterMetaType("Column*", &qax_result);
    qRegisterMetaType("Column", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::Column* Columns::Add(int BeforeColumn)
{
    PowerPoint::Column* qax_result = 0;
    qRegisterMetaType("Column*", &qax_result);
    qRegisterMetaType("Column", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&BeforeColumn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::Column* Columns::Item(int Index)
{
    PowerPoint::Column* qax_result = 0;
    qRegisterMetaType("Column*", &qax_result);
    qRegisterMetaType("Column", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant Columns::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline PowerPoint::Application* Column::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::CellRange* Column::Cells() const
{
    PowerPoint::CellRange* qax_pointer = 0;
    qRegisterMetaType("CellRange*", &qax_pointer);
    qRegisterMetaType("CellRange", qax_pointer);
    QVariant qax_result = property("Cells");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::CellRange**)qax_result.constData();
}

inline IDispatch* Column::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline double Column::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Column::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline void Column::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Column::Select()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}


inline PowerPoint::Application* Rows::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Rows::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Rows::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Rows::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Row* Rows::Add()
{
    PowerPoint::Row* qax_result = 0;
    qRegisterMetaType("Row*", &qax_result);
    qRegisterMetaType("Row", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::Row* Rows::Add(int BeforeRow)
{
    PowerPoint::Row* qax_result = 0;
    qRegisterMetaType("Row*", &qax_result);
    qRegisterMetaType("Row", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&BeforeRow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::Row* Rows::Item(int Index)
{
    PowerPoint::Row* qax_result = 0;
    qRegisterMetaType("Row*", &qax_result);
    qRegisterMetaType("Row", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant Rows::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline PowerPoint::Application* Row::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::CellRange* Row::Cells() const
{
    PowerPoint::CellRange* qax_pointer = 0;
    qRegisterMetaType("CellRange*", &qax_pointer);
    qRegisterMetaType("CellRange", qax_pointer);
    QVariant qax_result = property("Cells");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::CellRange**)qax_result.constData();
}

inline double Row::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Row::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline IDispatch* Row::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline void Row::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Row::Select()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}


inline PowerPoint::Application* CellRange::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::Borders* CellRange::Borders() const
{
    PowerPoint::Borders* qax_pointer = 0;
    qRegisterMetaType("Borders*", &qax_pointer);
    qRegisterMetaType("Borders", qax_pointer);
    QVariant qax_result = property("Borders");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Borders**)qax_result.constData();
}

inline int CellRange::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* CellRange::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* CellRange::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Cell* CellRange::Item(int Index)
{
    PowerPoint::Cell* qax_result = 0;
    qRegisterMetaType("Cell*", &qax_result);
    qRegisterMetaType("Cell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant CellRange::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline PowerPoint::Application* Cell::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::Borders* Cell::Borders() const
{
    PowerPoint::Borders* qax_pointer = 0;
    qRegisterMetaType("Borders*", &qax_pointer);
    qRegisterMetaType("Borders", qax_pointer);
    QVariant qax_result = property("Borders");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Borders**)qax_result.constData();
}

inline IDispatch* Cell::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool Cell::Selected() const
{
    QVariant qax_result = property("Selected");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline PowerPoint::Shape* Cell::Shape() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("Shape");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}

inline void Cell::Merge(PowerPoint::Cell* MergeTo)
{
    void *_a[] = {0, (void*)&MergeTo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Cell::Select()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Cell::Split(int NumRows, int NumColumns)
{
    void *_a[] = {0, (void*)&NumRows, (void*)&NumColumns};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline PowerPoint::Application* Borders::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Borders::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Borders::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Borders::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::LineFormat* Borders::Item(PowerPoint::PpBorderType BorderType)
{
    PowerPoint::LineFormat* qax_result = 0;
    qRegisterMetaType("LineFormat*", &qax_result);
    qRegisterMetaType("LineFormat", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&BorderType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant Borders::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline PowerPoint::Application* Panes::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Panes::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Panes::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Panes::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Pane* Panes::Item(int Index)
{
    PowerPoint::Pane* qax_result = 0;
    qRegisterMetaType("Pane*", &qax_result);
    qRegisterMetaType("Pane", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant Panes::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline Office::MsoTriState Pane::Active() const
{
    QVariant qax_result = property("Active");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::Application* Pane::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline IDispatch* Pane::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::PpViewType Pane::ViewType() const
{
    QVariant qax_result = property("ViewType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpViewType*)qax_result.constData();
}

inline void Pane::Activate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline Office::MsoTriState DefaultWebOptions::AllowPNG() const
{
    QVariant qax_result = property("AllowPNG");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DefaultWebOptions::SetAllowPNG(Office::MsoTriState value){ setProperty("AllowPNG", QVariant(value)); }

inline Office::MsoTriState DefaultWebOptions::AlwaysSaveInDefaultEncoding() const
{
    QVariant qax_result = property("AlwaysSaveInDefaultEncoding");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DefaultWebOptions::SetAlwaysSaveInDefaultEncoding(Office::MsoTriState value){ setProperty("AlwaysSaveInDefaultEncoding", QVariant(value)); }

inline Office::MsoTriState DefaultWebOptions::CheckIfOfficeIsHTMLEditor() const
{
    QVariant qax_result = property("CheckIfOfficeIsHTMLEditor");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DefaultWebOptions::SetCheckIfOfficeIsHTMLEditor(Office::MsoTriState value){ setProperty("CheckIfOfficeIsHTMLEditor", QVariant(value)); }

inline Office::MsoEncoding DefaultWebOptions::Encoding() const
{
    QVariant qax_result = property("Encoding");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoEncoding*)qax_result.constData();
}
inline void DefaultWebOptions::SetEncoding(Office::MsoEncoding value){ setProperty("Encoding", QVariant(value)); }

inline QString DefaultWebOptions::FolderSuffix() const
{
    QVariant qax_result = property("FolderSuffix");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline Office::WebPageFonts* DefaultWebOptions::Fonts() const
{
    Office::WebPageFonts* qax_pointer = 0;
    qRegisterMetaType("Office::WebPageFonts*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::WebPageFonts", qax_pointer);
#endif
    QVariant qax_result = property("Fonts");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::WebPageFonts**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::PpFrameColors DefaultWebOptions::FrameColors() const
{
    QVariant qax_result = property("FrameColors");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpFrameColors*)qax_result.constData();
}
inline void DefaultWebOptions::SetFrameColors(PowerPoint::PpFrameColors value){ setProperty("FrameColors", QVariant(value)); }

inline PowerPoint::PpHTMLVersion DefaultWebOptions::HTMLVersion() const
{
    QVariant qax_result = property("HTMLVersion");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpHTMLVersion*)qax_result.constData();
}
inline void DefaultWebOptions::SetHTMLVersion(PowerPoint::PpHTMLVersion value){ setProperty("HTMLVersion", QVariant(value)); }

inline Office::MsoTriState DefaultWebOptions::IncludeNavigation() const
{
    QVariant qax_result = property("IncludeNavigation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DefaultWebOptions::SetIncludeNavigation(Office::MsoTriState value){ setProperty("IncludeNavigation", QVariant(value)); }

inline Office::MsoTriState DefaultWebOptions::OrganizeInFolder() const
{
    QVariant qax_result = property("OrganizeInFolder");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DefaultWebOptions::SetOrganizeInFolder(Office::MsoTriState value){ setProperty("OrganizeInFolder", QVariant(value)); }

inline Office::MsoTriState DefaultWebOptions::RelyOnVML() const
{
    QVariant qax_result = property("RelyOnVML");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DefaultWebOptions::SetRelyOnVML(Office::MsoTriState value){ setProperty("RelyOnVML", QVariant(value)); }

inline Office::MsoTriState DefaultWebOptions::ResizeGraphics() const
{
    QVariant qax_result = property("ResizeGraphics");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DefaultWebOptions::SetResizeGraphics(Office::MsoTriState value){ setProperty("ResizeGraphics", QVariant(value)); }

inline Office::MsoTriState DefaultWebOptions::SaveNewWebPagesAsWebArchives() const
{
    QVariant qax_result = property("SaveNewWebPagesAsWebArchives");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DefaultWebOptions::SetSaveNewWebPagesAsWebArchives(Office::MsoTriState value){ setProperty("SaveNewWebPagesAsWebArchives", QVariant(value)); }

inline Office::MsoScreenSize DefaultWebOptions::ScreenSize() const
{
    QVariant qax_result = property("ScreenSize");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoScreenSize*)qax_result.constData();
}
inline void DefaultWebOptions::SetScreenSize(Office::MsoScreenSize value){ setProperty("ScreenSize", QVariant(value)); }

inline Office::MsoTriState DefaultWebOptions::ShowSlideAnimation() const
{
    QVariant qax_result = property("ShowSlideAnimation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DefaultWebOptions::SetShowSlideAnimation(Office::MsoTriState value){ setProperty("ShowSlideAnimation", QVariant(value)); }

inline Office::MsoTargetBrowser DefaultWebOptions::TargetBrowser() const
{
    QVariant qax_result = property("TargetBrowser");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTargetBrowser*)qax_result.constData();
}
inline void DefaultWebOptions::SetTargetBrowser(Office::MsoTargetBrowser value){ setProperty("TargetBrowser", QVariant(value)); }

inline Office::MsoTriState DefaultWebOptions::UpdateLinksOnSave() const
{
    QVariant qax_result = property("UpdateLinksOnSave");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DefaultWebOptions::SetUpdateLinksOnSave(Office::MsoTriState value){ setProperty("UpdateLinksOnSave", QVariant(value)); }

inline Office::MsoTriState DefaultWebOptions::UseLongFileNames() const
{
    QVariant qax_result = property("UseLongFileNames");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void DefaultWebOptions::SetUseLongFileNames(Office::MsoTriState value){ setProperty("UseLongFileNames", QVariant(value)); }


inline Office::MsoTriState WebOptions::AllowPNG() const
{
    QVariant qax_result = property("AllowPNG");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void WebOptions::SetAllowPNG(Office::MsoTriState value){ setProperty("AllowPNG", QVariant(value)); }

inline Office::MsoEncoding WebOptions::Encoding() const
{
    QVariant qax_result = property("Encoding");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoEncoding*)qax_result.constData();
}
inline void WebOptions::SetEncoding(Office::MsoEncoding value){ setProperty("Encoding", QVariant(value)); }

inline QString WebOptions::FolderSuffix() const
{
    QVariant qax_result = property("FolderSuffix");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::PpFrameColors WebOptions::FrameColors() const
{
    QVariant qax_result = property("FrameColors");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpFrameColors*)qax_result.constData();
}
inline void WebOptions::SetFrameColors(PowerPoint::PpFrameColors value){ setProperty("FrameColors", QVariant(value)); }

inline PowerPoint::PpHTMLVersion WebOptions::HTMLVersion() const
{
    QVariant qax_result = property("HTMLVersion");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpHTMLVersion*)qax_result.constData();
}
inline void WebOptions::SetHTMLVersion(PowerPoint::PpHTMLVersion value){ setProperty("HTMLVersion", QVariant(value)); }

inline Office::MsoTriState WebOptions::IncludeNavigation() const
{
    QVariant qax_result = property("IncludeNavigation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void WebOptions::SetIncludeNavigation(Office::MsoTriState value){ setProperty("IncludeNavigation", QVariant(value)); }

inline Office::MsoTriState WebOptions::OrganizeInFolder() const
{
    QVariant qax_result = property("OrganizeInFolder");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void WebOptions::SetOrganizeInFolder(Office::MsoTriState value){ setProperty("OrganizeInFolder", QVariant(value)); }

inline Office::MsoTriState WebOptions::RelyOnVML() const
{
    QVariant qax_result = property("RelyOnVML");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void WebOptions::SetRelyOnVML(Office::MsoTriState value){ setProperty("RelyOnVML", QVariant(value)); }

inline Office::MsoTriState WebOptions::ResizeGraphics() const
{
    QVariant qax_result = property("ResizeGraphics");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void WebOptions::SetResizeGraphics(Office::MsoTriState value){ setProperty("ResizeGraphics", QVariant(value)); }

inline Office::MsoScreenSize WebOptions::ScreenSize() const
{
    QVariant qax_result = property("ScreenSize");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoScreenSize*)qax_result.constData();
}
inline void WebOptions::SetScreenSize(Office::MsoScreenSize value){ setProperty("ScreenSize", QVariant(value)); }

inline Office::MsoTriState WebOptions::ShowSlideAnimation() const
{
    QVariant qax_result = property("ShowSlideAnimation");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void WebOptions::SetShowSlideAnimation(Office::MsoTriState value){ setProperty("ShowSlideAnimation", QVariant(value)); }

inline Office::MsoTargetBrowser WebOptions::TargetBrowser() const
{
    QVariant qax_result = property("TargetBrowser");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTargetBrowser*)qax_result.constData();
}
inline void WebOptions::SetTargetBrowser(Office::MsoTargetBrowser value){ setProperty("TargetBrowser", QVariant(value)); }

inline Office::MsoTriState WebOptions::UseLongFileNames() const
{
    QVariant qax_result = property("UseLongFileNames");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void WebOptions::SetUseLongFileNames(Office::MsoTriState value){ setProperty("UseLongFileNames", QVariant(value)); }

inline void WebOptions::UseDefaultFolderSuffix()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline PowerPoint::Application* PublishObjects::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int PublishObjects::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* PublishObjects::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* PublishObjects::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::PublishObject* PublishObjects::Item(int Index)
{
    PowerPoint::PublishObject* qax_result = 0;
    qRegisterMetaType("PublishObject*", &qax_result);
    qRegisterMetaType("PublishObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QVariant PublishObjects::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline PowerPoint::Application* PublishObject::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline QString PublishObject::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void PublishObject::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline PowerPoint::PpHTMLVersion PublishObject::HTMLVersion() const
{
    QVariant qax_result = property("HTMLVersion");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpHTMLVersion*)qax_result.constData();
}
inline void PublishObject::SetHTMLVersion(PowerPoint::PpHTMLVersion value){ setProperty("HTMLVersion", QVariant(value)); }

inline IDispatch* PublishObject::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int PublishObject::RangeEnd() const
{
    QVariant qax_result = property("RangeEnd");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void PublishObject::SetRangeEnd(int value){ setProperty("RangeEnd", QVariant(value)); }

inline int PublishObject::RangeStart() const
{
    QVariant qax_result = property("RangeStart");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void PublishObject::SetRangeStart(int value){ setProperty("RangeStart", QVariant(value)); }

inline QString PublishObject::SlideShowName() const
{
    QVariant qax_result = property("SlideShowName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void PublishObject::SetSlideShowName(const QString& value){ setProperty("SlideShowName", QVariant(value)); }

inline PowerPoint::PpPublishSourceType PublishObject::SourceType() const
{
    QVariant qax_result = property("SourceType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PpPublishSourceType*)qax_result.constData();
}
inline void PublishObject::SetSourceType(PowerPoint::PpPublishSourceType value){ setProperty("SourceType", QVariant(value)); }

inline Office::MsoTriState PublishObject::SpeakerNotes() const
{
    QVariant qax_result = property("SpeakerNotes");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void PublishObject::SetSpeakerNotes(Office::MsoTriState value){ setProperty("SpeakerNotes", QVariant(value)); }

inline void PublishObject::Publish()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline PowerPoint::Application* Master::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::ShapeRange* Master::Background() const
{
    PowerPoint::ShapeRange* qax_pointer = 0;
    qRegisterMetaType("ShapeRange*", &qax_pointer);
    qRegisterMetaType("ShapeRange", qax_pointer);
    QVariant qax_result = property("Background");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ShapeRange**)qax_result.constData();
}

inline PowerPoint::ColorScheme* Master::ColorScheme() const
{
    PowerPoint::ColorScheme* qax_pointer = 0;
    qRegisterMetaType("ColorScheme*", &qax_pointer);
    qRegisterMetaType("ColorScheme", qax_pointer);
    QVariant qax_result = property("ColorScheme");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorScheme**)qax_result.constData();
}
inline void Master::SetColorScheme(PowerPoint::ColorScheme* value){
    int typeId = qRegisterMetaType("PowerPoint::ColorScheme*", &value);
    setProperty("ColorScheme", QVariant(typeId, &value));
}

inline PowerPoint::Design* Master::Design() const
{
    PowerPoint::Design* qax_pointer = 0;
    qRegisterMetaType("Design*", &qax_pointer);
    qRegisterMetaType("Design", qax_pointer);
    QVariant qax_result = property("Design");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Design**)qax_result.constData();
}

inline PowerPoint::HeadersFooters* Master::HeadersFooters() const
{
    PowerPoint::HeadersFooters* qax_pointer = 0;
    qRegisterMetaType("HeadersFooters*", &qax_pointer);
    qRegisterMetaType("HeadersFooters", qax_pointer);
    QVariant qax_result = property("HeadersFooters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::HeadersFooters**)qax_result.constData();
}

inline double Master::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline PowerPoint::Hyperlinks* Master::Hyperlinks() const
{
    PowerPoint::Hyperlinks* qax_pointer = 0;
    qRegisterMetaType("Hyperlinks*", &qax_pointer);
    qRegisterMetaType("Hyperlinks", qax_pointer);
    QVariant qax_result = property("Hyperlinks");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Hyperlinks**)qax_result.constData();
}

inline QString Master::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Master::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IDispatch* Master::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::Scripts* Master::Scripts() const
{
    Office::Scripts* qax_pointer = 0;
    qRegisterMetaType("Office::Scripts*", &qax_pointer);
#ifdef QAX_DUMPCPP_OFFICE_H
    qRegisterMetaType("Office::Scripts", qax_pointer);
#endif
    QVariant qax_result = property("Scripts");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
#ifdef QAX_DUMPCPP_OFFICE_H
    return *(Office::Scripts**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}

inline PowerPoint::Shapes* Master::Shapes() const
{
    PowerPoint::Shapes* qax_pointer = 0;
    qRegisterMetaType("Shapes*", &qax_pointer);
    qRegisterMetaType("Shapes", qax_pointer);
    QVariant qax_result = property("Shapes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shapes**)qax_result.constData();
}

inline PowerPoint::SlideShowTransition* Master::SlideShowTransition() const
{
    PowerPoint::SlideShowTransition* qax_pointer = 0;
    qRegisterMetaType("SlideShowTransition*", &qax_pointer);
    qRegisterMetaType("SlideShowTransition", qax_pointer);
    QVariant qax_result = property("SlideShowTransition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SlideShowTransition**)qax_result.constData();
}

inline PowerPoint::TextStyles* Master::TextStyles() const
{
    PowerPoint::TextStyles* qax_pointer = 0;
    qRegisterMetaType("TextStyles*", &qax_pointer);
    qRegisterMetaType("TextStyles", qax_pointer);
    QVariant qax_result = property("TextStyles");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TextStyles**)qax_result.constData();
}

inline PowerPoint::TimeLine* Master::TimeLine() const
{
    PowerPoint::TimeLine* qax_pointer = 0;
    qRegisterMetaType("TimeLine*", &qax_pointer);
    qRegisterMetaType("TimeLine", qax_pointer);
    QVariant qax_result = property("TimeLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::TimeLine**)qax_result.constData();
}

inline double Master::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline void Master::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline void _PowerRex::OnAsfEncoderEvent(const QVariant& erorCode, const QVariant& bstrErrorDesc)
{
    void *_a[] = {0, (void*)&erorCode, (void*)&bstrErrorDesc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline void PowerRex::OnAsfEncoderEvent(const QVariant& erorCode, const QVariant& bstrErrorDesc)
{
    void *_a[] = {0, (void*)&erorCode, (void*)&bstrErrorDesc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline PowerPoint::Application* Comments::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Comments::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Comments::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Comments::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Comment* Comments::Add(double Left, double Top, const QString& Author, const QString& AuthorInitials, const QString& Text)
{
    PowerPoint::Comment* qax_result = 0;
    qRegisterMetaType("Comment*", &qax_result);
    qRegisterMetaType("Comment", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Left, (void*)&Top, (void*)&Author, (void*)&AuthorInitials, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::Comment* Comments::Item(int Index)
{
    PowerPoint::Comment* qax_result = 0;
    qRegisterMetaType("Comment*", &qax_result);
    qRegisterMetaType("Comment", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QVariant Comments::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline PowerPoint::Application* Comment::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline QString Comment::Author() const
{
    QVariant qax_result = property("Author");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int Comment::AuthorIndex() const
{
    QVariant qax_result = property("AuthorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Comment::AuthorInitials() const
{
    QVariant qax_result = property("AuthorInitials");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QDateTime Comment::DateTime() const
{
    QVariant qax_result = property("DateTime");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}

inline double Comment::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline IDispatch* Comment::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString Comment::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double Comment::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline void Comment::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline PowerPoint::Application* Designs::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Designs::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Designs::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Designs::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Design* Designs::Add(const QString& designName)
{
    PowerPoint::Design* qax_result = 0;
    qRegisterMetaType("Design*", &qax_result);
    qRegisterMetaType("Design", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&designName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::Design* Designs::Add(const QString& designName, int Index)
{
    PowerPoint::Design* qax_result = 0;
    qRegisterMetaType("Design*", &qax_result);
    qRegisterMetaType("Design", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&designName, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::Design* Designs::Clone(PowerPoint::Design* pOriginal)
{
    PowerPoint::Design* qax_result = 0;
    qRegisterMetaType("Design*", &qax_result);
    qRegisterMetaType("Design", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pOriginal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline PowerPoint::Design* Designs::Clone(PowerPoint::Design* pOriginal, int Index)
{
    PowerPoint::Design* qax_result = 0;
    qRegisterMetaType("Design*", &qax_result);
    qRegisterMetaType("Design", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pOriginal, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline PowerPoint::Design* Designs::Item(const QVariant& Index)
{
    PowerPoint::Design* qax_result = 0;
    qRegisterMetaType("Design*", &qax_result);
    qRegisterMetaType("Design", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline PowerPoint::Design* Designs::Load(const QString& TemplateName)
{
    PowerPoint::Design* qax_result = 0;
    qRegisterMetaType("Design*", &qax_result);
    qRegisterMetaType("Design", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&TemplateName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline PowerPoint::Design* Designs::Load(const QString& TemplateName, int Index)
{
    PowerPoint::Design* qax_result = 0;
    qRegisterMetaType("Design*", &qax_result);
    qRegisterMetaType("Design", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&TemplateName, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QVariant Designs::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}


inline PowerPoint::Application* Design::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline Office::MsoTriState Design::HasTitleMaster() const
{
    QVariant qax_result = property("HasTitleMaster");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline int Design::Index() const
{
    QVariant qax_result = property("Index");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Design::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Design::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IDispatch* Design::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoTriState Design::Preserved() const
{
    QVariant qax_result = property("Preserved");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Design::SetPreserved(Office::MsoTriState value){ setProperty("Preserved", QVariant(value)); }

inline PowerPoint::_Master* Design::SlideMaster() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("SlideMaster");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline PowerPoint::_Master* Design::TitleMaster() const
{
    PowerPoint::_Master* qax_pointer = 0;
    qRegisterMetaType("_Master*", &qax_pointer);
    qRegisterMetaType("_Master", qax_pointer);
    QVariant qax_result = property("TitleMaster");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::_Master**)qax_result.constData();
}

inline PowerPoint::_Master* Design::AddTitleMaster()
{
    PowerPoint::_Master* qax_result = 0;
    qRegisterMetaType("_Master*", &qax_result);
    qRegisterMetaType("_Master", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void Design::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Design::MoveTo(int toPos)
{
    void *_a[] = {0, (void*)&toPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline IDispatch* DiagramNode::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::DiagramNodeChildren* DiagramNode::Children() const
{
    PowerPoint::DiagramNodeChildren* qax_pointer = 0;
    qRegisterMetaType("DiagramNodeChildren*", &qax_pointer);
    qRegisterMetaType("DiagramNodeChildren", qax_pointer);
    QVariant qax_result = property("Children");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DiagramNodeChildren**)qax_result.constData();
}

inline int DiagramNode::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::Diagram* DiagramNode::Diagram() const
{
    PowerPoint::Diagram* qax_pointer = 0;
    qRegisterMetaType("Diagram*", &qax_pointer);
    qRegisterMetaType("Diagram", qax_pointer);
    QVariant qax_result = property("Diagram");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Diagram**)qax_result.constData();
}

inline Office::MsoOrgChartLayoutType DiagramNode::Layout() const
{
    QVariant qax_result = property("Layout");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoOrgChartLayoutType*)qax_result.constData();
}
inline void DiagramNode::SetLayout(Office::MsoOrgChartLayoutType value){ setProperty("Layout", QVariant(value)); }

inline IDispatch* DiagramNode::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::DiagramNode* DiagramNode::Root() const
{
    PowerPoint::DiagramNode* qax_pointer = 0;
    qRegisterMetaType("DiagramNode*", &qax_pointer);
    qRegisterMetaType("DiagramNode", qax_pointer);
    QVariant qax_result = property("Root");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DiagramNode**)qax_result.constData();
}

inline PowerPoint::Shape* DiagramNode::Shape() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("Shape");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}

inline PowerPoint::Shape* DiagramNode::TextShape() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("TextShape");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}

inline PowerPoint::DiagramNode* DiagramNode::AddNode()
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::DiagramNode* DiagramNode::AddNode(Office::MsoRelativeNodePosition Pos)
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::DiagramNode* DiagramNode::AddNode(Office::MsoRelativeNodePosition Pos, Office::MsoDiagramNodeType NodeType)
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Pos, (void*)&NodeType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline PowerPoint::DiagramNode* DiagramNode::CloneNode(bool CopyChildren, PowerPoint::DiagramNode* TargetNode)
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CopyChildren, (void*)&TargetNode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline PowerPoint::DiagramNode* DiagramNode::CloneNode(bool CopyChildren, PowerPoint::DiagramNode* TargetNode, Office::MsoRelativeNodePosition Pos)
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CopyChildren, (void*)&TargetNode, (void*)&Pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void DiagramNode::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void DiagramNode::MoveNode(PowerPoint::DiagramNode* TargetNode, Office::MsoRelativeNodePosition Pos)
{
    void *_a[] = {0, (void*)&TargetNode, (void*)&Pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline PowerPoint::DiagramNode* DiagramNode::NextNode()
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline PowerPoint::DiagramNode* DiagramNode::PrevNode()
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void DiagramNode::ReplaceNode(PowerPoint::DiagramNode* TargetNode)
{
    void *_a[] = {0, (void*)&TargetNode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void DiagramNode::SwapNode(PowerPoint::DiagramNode* TargetNode)
{
    void *_a[] = {0, (void*)&TargetNode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void DiagramNode::SwapNode(PowerPoint::DiagramNode* TargetNode, bool SwapChildren)
{
    void *_a[] = {0, (void*)&TargetNode, (void*)&SwapChildren};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void DiagramNode::TransferChildren(PowerPoint::DiagramNode* ReceivingNode)
{
    void *_a[] = {0, (void*)&ReceivingNode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}


inline IDispatch* DiagramNodeChildren::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int DiagramNodeChildren::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int DiagramNodeChildren::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::DiagramNode* DiagramNodeChildren::FirstChild() const
{
    PowerPoint::DiagramNode* qax_pointer = 0;
    qRegisterMetaType("DiagramNode*", &qax_pointer);
    qRegisterMetaType("DiagramNode", qax_pointer);
    QVariant qax_result = property("FirstChild");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DiagramNode**)qax_result.constData();
}

inline PowerPoint::DiagramNode* DiagramNodeChildren::LastChild() const
{
    PowerPoint::DiagramNode* qax_pointer = 0;
    qRegisterMetaType("DiagramNode*", &qax_pointer);
    qRegisterMetaType("DiagramNode", qax_pointer);
    QVariant qax_result = property("LastChild");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DiagramNode**)qax_result.constData();
}

inline IDispatch* DiagramNodeChildren::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* DiagramNodeChildren::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::DiagramNode* DiagramNodeChildren::AddNode()
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::DiagramNode* DiagramNodeChildren::AddNode(const QVariant& Index)
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::DiagramNode* DiagramNodeChildren::AddNode(const QVariant& Index, Office::MsoDiagramNodeType NodeType)
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index, (void*)&NodeType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline PowerPoint::DiagramNode* DiagramNodeChildren::Item(const QVariant& Index)
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void DiagramNodeChildren::SelectAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline IDispatch* DiagramNodes::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int DiagramNodes::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int DiagramNodes::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* DiagramNodes::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* DiagramNodes::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::DiagramNode* DiagramNodes::Item(const QVariant& Index)
{
    PowerPoint::DiagramNode* qax_result = 0;
    qRegisterMetaType("DiagramNode*", &qax_result);
    qRegisterMetaType("DiagramNode", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline void DiagramNodes::SelectAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}


inline IDispatch* Diagram::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoTriState Diagram::AutoFormat() const
{
    QVariant qax_result = property("AutoFormat");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Diagram::SetAutoFormat(Office::MsoTriState value){ setProperty("AutoFormat", QVariant(value)); }

inline Office::MsoTriState Diagram::AutoLayout() const
{
    QVariant qax_result = property("AutoLayout");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Diagram::SetAutoLayout(Office::MsoTriState value){ setProperty("AutoLayout", QVariant(value)); }

inline int Diagram::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::DiagramNodes* Diagram::Nodes() const
{
    PowerPoint::DiagramNodes* qax_pointer = 0;
    qRegisterMetaType("DiagramNodes*", &qax_pointer);
    qRegisterMetaType("DiagramNodes", qax_pointer);
    QVariant qax_result = property("Nodes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::DiagramNodes**)qax_result.constData();
}

inline IDispatch* Diagram::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoTriState Diagram::Reverse() const
{
    QVariant qax_result = property("Reverse");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Diagram::SetReverse(Office::MsoTriState value){ setProperty("Reverse", QVariant(value)); }

inline Office::MsoDiagramType Diagram::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoDiagramType*)qax_result.constData();
}

inline void Diagram::Convert(Office::MsoDiagramType Type)
{
    void *_a[] = {0, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Diagram::FitText()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}


inline PowerPoint::Application* TimeLine::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::Sequences* TimeLine::InteractiveSequences() const
{
    PowerPoint::Sequences* qax_pointer = 0;
    qRegisterMetaType("Sequences*", &qax_pointer);
    qRegisterMetaType("Sequences", qax_pointer);
    QVariant qax_result = property("InteractiveSequences");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Sequences**)qax_result.constData();
}

inline PowerPoint::Sequence* TimeLine::MainSequence() const
{
    PowerPoint::Sequence* qax_pointer = 0;
    qRegisterMetaType("Sequence*", &qax_pointer);
    qRegisterMetaType("Sequence", qax_pointer);
    QVariant qax_result = property("MainSequence");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Sequence**)qax_result.constData();
}

inline IDispatch* TimeLine::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}


inline PowerPoint::Application* Sequences::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Sequences::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Sequences::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Sequences::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Sequence* Sequences::Add()
{
    PowerPoint::Sequence* qax_result = 0;
    qRegisterMetaType("Sequence*", &qax_result);
    qRegisterMetaType("Sequence", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::Sequence* Sequences::Add(int Index)
{
    PowerPoint::Sequence* qax_result = 0;
    qRegisterMetaType("Sequence*", &qax_result);
    qRegisterMetaType("Sequence", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::Sequence* Sequences::Item(int Index)
{
    PowerPoint::Sequence* qax_result = 0;
    qRegisterMetaType("Sequence*", &qax_result);
    qRegisterMetaType("Sequence", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant Sequences::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline PowerPoint::Application* Sequence::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int Sequence::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* Sequence::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* Sequence::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Effect* Sequence::AddEffect(PowerPoint::Shape* Shape, PowerPoint::MsoAnimEffect effectId)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Shape, (void*)&effectId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::AddEffect(PowerPoint::Shape* Shape, PowerPoint::MsoAnimEffect effectId, PowerPoint::MsoAnimateByLevel Level)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Shape, (void*)&effectId, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::AddEffect(PowerPoint::Shape* Shape, PowerPoint::MsoAnimEffect effectId, PowerPoint::MsoAnimateByLevel Level, PowerPoint::MsoAnimTriggerType trigger)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Shape, (void*)&effectId, (void*)&Level, (void*)&trigger};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::AddEffect(PowerPoint::Shape* Shape, PowerPoint::MsoAnimEffect effectId, PowerPoint::MsoAnimateByLevel Level, PowerPoint::MsoAnimTriggerType trigger, int Index)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Shape, (void*)&effectId, (void*)&Level, (void*)&trigger, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::Clone(PowerPoint::Effect* Effect)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Effect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::Clone(PowerPoint::Effect* Effect, int Index)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Effect, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::ConvertToAfterEffect(PowerPoint::Effect* Effect, PowerPoint::MsoAnimAfterEffect After)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Effect, (void*)&After};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::ConvertToAfterEffect(PowerPoint::Effect* Effect, PowerPoint::MsoAnimAfterEffect After, int DimColor)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Effect, (void*)&After, (void*)&DimColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::ConvertToAfterEffect(PowerPoint::Effect* Effect, PowerPoint::MsoAnimAfterEffect After, int DimColor, PowerPoint::PpColorSchemeIndex DimSchemeColor)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Effect, (void*)&After, (void*)&DimColor, (void*)&DimSchemeColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::ConvertToAnimateBackground(PowerPoint::Effect* Effect, Office::MsoTriState AnimateBackground)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Effect, (void*)&AnimateBackground};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::ConvertToAnimateInReverse(PowerPoint::Effect* Effect, Office::MsoTriState animateInReverse)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Effect, (void*)&animateInReverse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::ConvertToBuildLevel(PowerPoint::Effect* Effect, PowerPoint::MsoAnimateByLevel Level)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Effect, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::ConvertToTextUnitEffect(PowerPoint::Effect* Effect, PowerPoint::MsoAnimTextUnitEffect unitEffect)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Effect, (void*)&unitEffect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::FindFirstAnimationFor(PowerPoint::Shape* Shape)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Shape};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::FindFirstAnimationForClick(int click)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&click};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline PowerPoint::Effect* Sequence::Item(int Index)
{
    PowerPoint::Effect* qax_result = 0;
    qRegisterMetaType("Effect*", &qax_result);
    qRegisterMetaType("Effect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline QVariant Sequence::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}


inline PowerPoint::Application* Effect::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::AnimationBehaviors* Effect::Behaviors() const
{
    PowerPoint::AnimationBehaviors* qax_pointer = 0;
    qRegisterMetaType("AnimationBehaviors*", &qax_pointer);
    qRegisterMetaType("AnimationBehaviors", qax_pointer);
    QVariant qax_result = property("Behaviors");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::AnimationBehaviors**)qax_result.constData();
}

inline QString Effect::DisplayName() const
{
    QVariant qax_result = property("DisplayName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline PowerPoint::EffectInformation* Effect::EffectInformation() const
{
    PowerPoint::EffectInformation* qax_pointer = 0;
    qRegisterMetaType("EffectInformation*", &qax_pointer);
    qRegisterMetaType("EffectInformation", qax_pointer);
    QVariant qax_result = property("EffectInformation");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::EffectInformation**)qax_result.constData();
}

inline PowerPoint::EffectParameters* Effect::EffectParameters() const
{
    PowerPoint::EffectParameters* qax_pointer = 0;
    qRegisterMetaType("EffectParameters*", &qax_pointer);
    qRegisterMetaType("EffectParameters", qax_pointer);
    QVariant qax_result = property("EffectParameters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::EffectParameters**)qax_result.constData();
}

inline PowerPoint::MsoAnimEffect Effect::EffectType() const
{
    QVariant qax_result = property("EffectType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimEffect*)qax_result.constData();
}
inline void Effect::SetEffectType(PowerPoint::MsoAnimEffect value){ setProperty("EffectType", QVariant(value)); }

inline Office::MsoTriState Effect::Exit() const
{
    QVariant qax_result = property("Exit");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Effect::SetExit(Office::MsoTriState value){ setProperty("Exit", QVariant(value)); }

inline int Effect::Index() const
{
    QVariant qax_result = property("Index");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Effect::Paragraph() const
{
    QVariant qax_result = property("Paragraph");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Effect::SetParagraph(int value){ setProperty("Paragraph", QVariant(value)); }

inline IDispatch* Effect::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::Shape* Effect::Shape() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("Shape");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}
inline void Effect::SetShape(PowerPoint::Shape* value){
    int typeId = qRegisterMetaType("PowerPoint::Shape*", &value);
    setProperty("Shape", QVariant(typeId, &value));
}

inline int Effect::TextRangeLength() const
{
    QVariant qax_result = property("TextRangeLength");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Effect::TextRangeStart() const
{
    QVariant qax_result = property("TextRangeStart");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline PowerPoint::Timing* Effect::Timing() const
{
    PowerPoint::Timing* qax_pointer = 0;
    qRegisterMetaType("Timing*", &qax_pointer);
    qRegisterMetaType("Timing", qax_pointer);
    QVariant qax_result = property("Timing");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Timing**)qax_result.constData();
}

inline void Effect::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void Effect::MoveAfter(PowerPoint::Effect* Effect)
{
    void *_a[] = {0, (void*)&Effect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Effect::MoveBefore(PowerPoint::Effect* Effect)
{
    void *_a[] = {0, (void*)&Effect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Effect::MoveTo(int toPos)
{
    void *_a[] = {0, (void*)&toPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline double Timing::Accelerate() const
{
    QVariant qax_result = property("Accelerate");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Timing::SetAccelerate(double value){ setProperty("Accelerate", QVariant(value)); }

inline PowerPoint::Application* Timing::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline Office::MsoTriState Timing::AutoReverse() const
{
    QVariant qax_result = property("AutoReverse");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Timing::SetAutoReverse(Office::MsoTriState value){ setProperty("AutoReverse", QVariant(value)); }

inline double Timing::Decelerate() const
{
    QVariant qax_result = property("Decelerate");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Timing::SetDecelerate(double value){ setProperty("Decelerate", QVariant(value)); }

inline double Timing::Duration() const
{
    QVariant qax_result = property("Duration");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Timing::SetDuration(double value){ setProperty("Duration", QVariant(value)); }

inline IDispatch* Timing::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int Timing::RepeatCount() const
{
    QVariant qax_result = property("RepeatCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Timing::SetRepeatCount(int value){ setProperty("RepeatCount", QVariant(value)); }

inline double Timing::RepeatDuration() const
{
    QVariant qax_result = property("RepeatDuration");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Timing::SetRepeatDuration(double value){ setProperty("RepeatDuration", QVariant(value)); }

inline PowerPoint::MsoAnimEffectRestart Timing::Restart() const
{
    QVariant qax_result = property("Restart");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimEffectRestart*)qax_result.constData();
}
inline void Timing::SetRestart(PowerPoint::MsoAnimEffectRestart value){ setProperty("Restart", QVariant(value)); }

inline Office::MsoTriState Timing::RewindAtEnd() const
{
    QVariant qax_result = property("RewindAtEnd");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Timing::SetRewindAtEnd(Office::MsoTriState value){ setProperty("RewindAtEnd", QVariant(value)); }

inline Office::MsoTriState Timing::SmoothEnd() const
{
    QVariant qax_result = property("SmoothEnd");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Timing::SetSmoothEnd(Office::MsoTriState value){ setProperty("SmoothEnd", QVariant(value)); }

inline Office::MsoTriState Timing::SmoothStart() const
{
    QVariant qax_result = property("SmoothStart");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Timing::SetSmoothStart(Office::MsoTriState value){ setProperty("SmoothStart", QVariant(value)); }

inline double Timing::Speed() const
{
    QVariant qax_result = property("Speed");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Timing::SetSpeed(double value){ setProperty("Speed", QVariant(value)); }

inline double Timing::TriggerDelayTime() const
{
    QVariant qax_result = property("TriggerDelayTime");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Timing::SetTriggerDelayTime(double value){ setProperty("TriggerDelayTime", QVariant(value)); }

inline PowerPoint::Shape* Timing::TriggerShape() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("TriggerShape");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}
inline void Timing::SetTriggerShape(PowerPoint::Shape* value){
    int typeId = qRegisterMetaType("PowerPoint::Shape*", &value);
    setProperty("TriggerShape", QVariant(typeId, &value));
}

inline PowerPoint::MsoAnimTriggerType Timing::TriggerType() const
{
    QVariant qax_result = property("TriggerType");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimTriggerType*)qax_result.constData();
}
inline void Timing::SetTriggerType(PowerPoint::MsoAnimTriggerType value){ setProperty("TriggerType", QVariant(value)); }


inline double EffectParameters::Amount() const
{
    QVariant qax_result = property("Amount");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void EffectParameters::SetAmount(double value){ setProperty("Amount", QVariant(value)); }

inline PowerPoint::Application* EffectParameters::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::ColorFormat* EffectParameters::Color2() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("Color2");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}

inline PowerPoint::MsoAnimDirection EffectParameters::Direction() const
{
    QVariant qax_result = property("Direction");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimDirection*)qax_result.constData();
}
inline void EffectParameters::SetDirection(PowerPoint::MsoAnimDirection value){ setProperty("Direction", QVariant(value)); }

inline QString EffectParameters::FontName() const
{
    QVariant qax_result = property("FontName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void EffectParameters::SetFontName(const QString& value){ setProperty("FontName", QVariant(value)); }

inline IDispatch* EffectParameters::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoTriState EffectParameters::Relative() const
{
    QVariant qax_result = property("Relative");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void EffectParameters::SetRelative(Office::MsoTriState value){ setProperty("Relative", QVariant(value)); }

inline double EffectParameters::Size() const
{
    QVariant qax_result = property("Size");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void EffectParameters::SetSize(double value){ setProperty("Size", QVariant(value)); }


inline PowerPoint::MsoAnimAfterEffect EffectInformation::AfterEffect() const
{
    QVariant qax_result = property("AfterEffect");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimAfterEffect*)qax_result.constData();
}

inline Office::MsoTriState EffectInformation::AnimateBackground() const
{
    QVariant qax_result = property("AnimateBackground");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline Office::MsoTriState EffectInformation::AnimateTextInReverse() const
{
    QVariant qax_result = property("AnimateTextInReverse");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}

inline PowerPoint::Application* EffectInformation::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::MsoAnimateByLevel EffectInformation::BuildByLevelEffect() const
{
    QVariant qax_result = property("BuildByLevelEffect");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimateByLevel*)qax_result.constData();
}

inline PowerPoint::ColorFormat* EffectInformation::Dim() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("Dim");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}

inline IDispatch* EffectInformation::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::PlaySettings* EffectInformation::PlaySettings() const
{
    PowerPoint::PlaySettings* qax_pointer = 0;
    qRegisterMetaType("PlaySettings*", &qax_pointer);
    qRegisterMetaType("PlaySettings", qax_pointer);
    QVariant qax_result = property("PlaySettings");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PlaySettings**)qax_result.constData();
}

inline PowerPoint::SoundEffect* EffectInformation::SoundEffect() const
{
    PowerPoint::SoundEffect* qax_pointer = 0;
    qRegisterMetaType("SoundEffect*", &qax_pointer);
    qRegisterMetaType("SoundEffect", qax_pointer);
    QVariant qax_result = property("SoundEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SoundEffect**)qax_result.constData();
}

inline PowerPoint::MsoAnimTextUnitEffect EffectInformation::TextUnitEffect() const
{
    QVariant qax_result = property("TextUnitEffect");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimTextUnitEffect*)qax_result.constData();
}


inline PowerPoint::Application* AnimationBehaviors::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int AnimationBehaviors::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* AnimationBehaviors::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* AnimationBehaviors::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::AnimationBehavior* AnimationBehaviors::Add(PowerPoint::MsoAnimType Type)
{
    PowerPoint::AnimationBehavior* qax_result = 0;
    qRegisterMetaType("AnimationBehavior*", &qax_result);
    qRegisterMetaType("AnimationBehavior", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::AnimationBehavior* AnimationBehaviors::Add(PowerPoint::MsoAnimType Type, int Index)
{
    PowerPoint::AnimationBehavior* qax_result = 0;
    qRegisterMetaType("AnimationBehavior*", &qax_result);
    qRegisterMetaType("AnimationBehavior", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::AnimationBehavior* AnimationBehaviors::Item(int Index)
{
    PowerPoint::AnimationBehavior* qax_result = 0;
    qRegisterMetaType("AnimationBehavior*", &qax_result);
    qRegisterMetaType("AnimationBehavior", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant AnimationBehaviors::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline PowerPoint::MsoAnimAccumulate AnimationBehavior::Accumulate() const
{
    QVariant qax_result = property("Accumulate");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimAccumulate*)qax_result.constData();
}
inline void AnimationBehavior::SetAccumulate(PowerPoint::MsoAnimAccumulate value){ setProperty("Accumulate", QVariant(value)); }

inline PowerPoint::MsoAnimAdditive AnimationBehavior::Additive() const
{
    QVariant qax_result = property("Additive");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimAdditive*)qax_result.constData();
}
inline void AnimationBehavior::SetAdditive(PowerPoint::MsoAnimAdditive value){ setProperty("Additive", QVariant(value)); }

inline PowerPoint::Application* AnimationBehavior::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::ColorEffect* AnimationBehavior::ColorEffect() const
{
    PowerPoint::ColorEffect* qax_pointer = 0;
    qRegisterMetaType("ColorEffect*", &qax_pointer);
    qRegisterMetaType("ColorEffect", qax_pointer);
    QVariant qax_result = property("ColorEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorEffect**)qax_result.constData();
}

inline PowerPoint::CommandEffect* AnimationBehavior::CommandEffect() const
{
    PowerPoint::CommandEffect* qax_pointer = 0;
    qRegisterMetaType("CommandEffect*", &qax_pointer);
    qRegisterMetaType("CommandEffect", qax_pointer);
    QVariant qax_result = property("CommandEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::CommandEffect**)qax_result.constData();
}

inline PowerPoint::FilterEffect* AnimationBehavior::FilterEffect() const
{
    PowerPoint::FilterEffect* qax_pointer = 0;
    qRegisterMetaType("FilterEffect*", &qax_pointer);
    qRegisterMetaType("FilterEffect", qax_pointer);
    QVariant qax_result = property("FilterEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::FilterEffect**)qax_result.constData();
}

inline PowerPoint::MotionEffect* AnimationBehavior::MotionEffect() const
{
    PowerPoint::MotionEffect* qax_pointer = 0;
    qRegisterMetaType("MotionEffect*", &qax_pointer);
    qRegisterMetaType("MotionEffect", qax_pointer);
    QVariant qax_result = property("MotionEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MotionEffect**)qax_result.constData();
}

inline IDispatch* AnimationBehavior::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::PropertyEffect* AnimationBehavior::PropertyEffect() const
{
    PowerPoint::PropertyEffect* qax_pointer = 0;
    qRegisterMetaType("PropertyEffect*", &qax_pointer);
    qRegisterMetaType("PropertyEffect", qax_pointer);
    QVariant qax_result = property("PropertyEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::PropertyEffect**)qax_result.constData();
}

inline PowerPoint::RotationEffect* AnimationBehavior::RotationEffect() const
{
    PowerPoint::RotationEffect* qax_pointer = 0;
    qRegisterMetaType("RotationEffect*", &qax_pointer);
    qRegisterMetaType("RotationEffect", qax_pointer);
    QVariant qax_result = property("RotationEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::RotationEffect**)qax_result.constData();
}

inline PowerPoint::ScaleEffect* AnimationBehavior::ScaleEffect() const
{
    PowerPoint::ScaleEffect* qax_pointer = 0;
    qRegisterMetaType("ScaleEffect*", &qax_pointer);
    qRegisterMetaType("ScaleEffect", qax_pointer);
    QVariant qax_result = property("ScaleEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ScaleEffect**)qax_result.constData();
}

inline PowerPoint::SetEffect* AnimationBehavior::SetEffect() const
{
    PowerPoint::SetEffect* qax_pointer = 0;
    qRegisterMetaType("SetEffect*", &qax_pointer);
    qRegisterMetaType("SetEffect", qax_pointer);
    QVariant qax_result = property("SetEffect");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::SetEffect**)qax_result.constData();
}

inline PowerPoint::Timing* AnimationBehavior::Timing() const
{
    PowerPoint::Timing* qax_pointer = 0;
    qRegisterMetaType("Timing*", &qax_pointer);
    qRegisterMetaType("Timing", qax_pointer);
    QVariant qax_result = property("Timing");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Timing**)qax_result.constData();
}

inline PowerPoint::MsoAnimType AnimationBehavior::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimType*)qax_result.constData();
}
inline void AnimationBehavior::SetType(PowerPoint::MsoAnimType value){ setProperty("Type", QVariant(value)); }

inline void AnimationBehavior::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline PowerPoint::Application* MotionEffect::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline double MotionEffect::ByX() const
{
    QVariant qax_result = property("ByX");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MotionEffect::SetByX(double value){ setProperty("ByX", QVariant(value)); }

inline double MotionEffect::ByY() const
{
    QVariant qax_result = property("ByY");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MotionEffect::SetByY(double value){ setProperty("ByY", QVariant(value)); }

inline double MotionEffect::FromX() const
{
    QVariant qax_result = property("FromX");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MotionEffect::SetFromX(double value){ setProperty("FromX", QVariant(value)); }

inline double MotionEffect::FromY() const
{
    QVariant qax_result = property("FromY");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MotionEffect::SetFromY(double value){ setProperty("FromY", QVariant(value)); }

inline IDispatch* MotionEffect::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString MotionEffect::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MotionEffect::SetPath(const QString& value){ setProperty("Path", QVariant(value)); }

inline double MotionEffect::ToX() const
{
    QVariant qax_result = property("ToX");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MotionEffect::SetToX(double value){ setProperty("ToX", QVariant(value)); }

inline double MotionEffect::ToY() const
{
    QVariant qax_result = property("ToY");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MotionEffect::SetToY(double value){ setProperty("ToY", QVariant(value)); }


inline PowerPoint::Application* ColorEffect::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline PowerPoint::ColorFormat* ColorEffect::By() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("By");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}

inline PowerPoint::ColorFormat* ColorEffect::From() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("From");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}

inline IDispatch* ColorEffect::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::ColorFormat* ColorEffect::To() const
{
    PowerPoint::ColorFormat* qax_pointer = 0;
    qRegisterMetaType("ColorFormat*", &qax_pointer);
    qRegisterMetaType("ColorFormat", qax_pointer);
    QVariant qax_result = property("To");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::ColorFormat**)qax_result.constData();
}


inline PowerPoint::Application* ScaleEffect::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline double ScaleEffect::ByX() const
{
    QVariant qax_result = property("ByX");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ScaleEffect::SetByX(double value){ setProperty("ByX", QVariant(value)); }

inline double ScaleEffect::ByY() const
{
    QVariant qax_result = property("ByY");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ScaleEffect::SetByY(double value){ setProperty("ByY", QVariant(value)); }

inline double ScaleEffect::FromX() const
{
    QVariant qax_result = property("FromX");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ScaleEffect::SetFromX(double value){ setProperty("FromX", QVariant(value)); }

inline double ScaleEffect::FromY() const
{
    QVariant qax_result = property("FromY");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ScaleEffect::SetFromY(double value){ setProperty("FromY", QVariant(value)); }

inline IDispatch* ScaleEffect::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline double ScaleEffect::ToX() const
{
    QVariant qax_result = property("ToX");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ScaleEffect::SetToX(double value){ setProperty("ToX", QVariant(value)); }

inline double ScaleEffect::ToY() const
{
    QVariant qax_result = property("ToY");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ScaleEffect::SetToY(double value){ setProperty("ToY", QVariant(value)); }


inline PowerPoint::Application* RotationEffect::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline double RotationEffect::By() const
{
    QVariant qax_result = property("By");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void RotationEffect::SetBy(double value){ setProperty("By", QVariant(value)); }

inline double RotationEffect::From() const
{
    QVariant qax_result = property("From");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void RotationEffect::SetFrom(double value){ setProperty("From", QVariant(value)); }

inline IDispatch* RotationEffect::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline double RotationEffect::To() const
{
    QVariant qax_result = property("To");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void RotationEffect::SetTo(double value){ setProperty("To", QVariant(value)); }


inline PowerPoint::Application* PropertyEffect::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline QVariant PropertyEffect::From() const
{
    QVariant qax_result = property("From");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void PropertyEffect::SetFrom(const QVariant& value){ setProperty("From", QVariant(value)); }

inline IDispatch* PropertyEffect::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::AnimationPoints* PropertyEffect::Points() const
{
    PowerPoint::AnimationPoints* qax_pointer = 0;
    qRegisterMetaType("AnimationPoints*", &qax_pointer);
    qRegisterMetaType("AnimationPoints", qax_pointer);
    QVariant qax_result = property("Points");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::AnimationPoints**)qax_result.constData();
}

inline PowerPoint::MsoAnimProperty PropertyEffect::Property() const
{
    QVariant qax_result = property("Property");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimProperty*)qax_result.constData();
}
inline void PropertyEffect::SetProperty(PowerPoint::MsoAnimProperty value){ setProperty("Property", QVariant(value)); }

inline QVariant PropertyEffect::To() const
{
    QVariant qax_result = property("To");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void PropertyEffect::SetTo(const QVariant& value){ setProperty("To", QVariant(value)); }


inline PowerPoint::Application* AnimationPoints::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline int AnimationPoints::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* AnimationPoints::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoTriState AnimationPoints::Smooth() const
{
    QVariant qax_result = property("Smooth");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void AnimationPoints::SetSmooth(Office::MsoTriState value){ setProperty("Smooth", QVariant(value)); }

inline IUnknown* AnimationPoints::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::AnimationPoint* AnimationPoints::Add()
{
    PowerPoint::AnimationPoint* qax_result = 0;
    qRegisterMetaType("AnimationPoint*", &qax_result);
    qRegisterMetaType("AnimationPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::AnimationPoint* AnimationPoints::Add(int Index)
{
    PowerPoint::AnimationPoint* qax_result = 0;
    qRegisterMetaType("AnimationPoint*", &qax_result);
    qRegisterMetaType("AnimationPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::AnimationPoint* AnimationPoints::Item(int Index)
{
    PowerPoint::AnimationPoint* qax_result = 0;
    qRegisterMetaType("AnimationPoint*", &qax_result);
    qRegisterMetaType("AnimationPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant AnimationPoints::_Index(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}


inline PowerPoint::Application* AnimationPoint::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline QString AnimationPoint::Formula() const
{
    QVariant qax_result = property("Formula");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void AnimationPoint::SetFormula(const QString& value){ setProperty("Formula", QVariant(value)); }

inline IDispatch* AnimationPoint::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline double AnimationPoint::Time() const
{
    QVariant qax_result = property("Time");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void AnimationPoint::SetTime(double value){ setProperty("Time", QVariant(value)); }

inline QVariant AnimationPoint::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void AnimationPoint::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }

inline void AnimationPoint::Delete()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline IDispatch* CanvasShapes::Application() const
{
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::Shape* CanvasShapes::Background() const
{
    PowerPoint::Shape* qax_pointer = 0;
    qRegisterMetaType("Shape*", &qax_pointer);
    qRegisterMetaType("Shape", qax_pointer);
    QVariant qax_result = property("Background");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Shape**)qax_result.constData();
}

inline int CanvasShapes::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CanvasShapes::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IDispatch* CanvasShapes::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IUnknown* CanvasShapes::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline PowerPoint::Shape* CanvasShapes::AddCallout(Office::MsoCalloutType Type, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::AddConnector(Office::MsoConnectorType Type, double BeginX, double BeginY, double EndX, double EndY)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&BeginX, (void*)&BeginY, (void*)&EndX, (void*)&EndY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::AddCurve(const QVariant& SafeArrayOfPoints)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&SafeArrayOfPoints};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::AddLabel(Office::MsoTextOrientation Orientation, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Orientation, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::AddLine(double BeginX, double BeginY, double EndX, double EndY)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&BeginX, (void*)&BeginY, (void*)&EndX, (void*)&EndY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&LinkToFile, (void*)&SaveWithDocument, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top, double Width)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&LinkToFile, (void*)&SaveWithDocument, (void*)&Left, (void*)&Top, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::AddPicture(const QString& FileName, Office::MsoTriState LinkToFile, Office::MsoTriState SaveWithDocument, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&LinkToFile, (void*)&SaveWithDocument, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::AddPolyline(const QVariant& SafeArrayOfPoints)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&SafeArrayOfPoints};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::AddShape(Office::MsoAutoShapeType Type, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Type, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::AddTextEffect(Office::MsoPresetTextEffect PresetTextEffect, const QString& Text, const QString& FontName, double FontSize, Office::MsoTriState FontBold, Office::MsoTriState FontItalic, double Left, double Top)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&PresetTextEffect, (void*)&Text, (void*)&FontName, (void*)&FontSize, (void*)&FontBold, (void*)&FontItalic, (void*)&Left, (void*)&Top};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::AddTextbox(Office::MsoTextOrientation Orientation, double Left, double Top, double Width, double Height)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Orientation, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline PowerPoint::FreeformBuilder* CanvasShapes::BuildFreeform(Office::MsoEditingType EditingType, double X1, double Y1)
{
    PowerPoint::FreeformBuilder* qax_result = 0;
    qRegisterMetaType("FreeformBuilder*", &qax_result);
    qRegisterMetaType("FreeformBuilder", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&EditingType, (void*)&X1, (void*)&Y1};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline PowerPoint::Shape* CanvasShapes::Item(const QVariant& Index)
{
    PowerPoint::Shape* qax_result = 0;
    qRegisterMetaType("Shape*", &qax_result);
    qRegisterMetaType("Shape", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline PowerPoint::ShapeRange* CanvasShapes::Range(const QVariant& Index)
{
    PowerPoint::ShapeRange* qax_result = 0;
    qRegisterMetaType("ShapeRange*", &qax_result);
    qRegisterMetaType("ShapeRange", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void CanvasShapes::SelectAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}


inline bool AutoCorrect::DisplayAutoCorrectOptions() const
{
    QVariant qax_result = property("DisplayAutoCorrectOptions");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void AutoCorrect::SetDisplayAutoCorrectOptions(bool value){ setProperty("DisplayAutoCorrectOptions", QVariant(value)); }

inline bool AutoCorrect::DisplayAutoLayoutOptions() const
{
    QVariant qax_result = property("DisplayAutoLayoutOptions");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void AutoCorrect::SetDisplayAutoLayoutOptions(bool value){ setProperty("DisplayAutoLayoutOptions", QVariant(value)); }


inline Office::MsoTriState Options::DisplayPasteOptions() const
{
    QVariant qax_result = property("DisplayPasteOptions");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void Options::SetDisplayPasteOptions(Office::MsoTriState value){ setProperty("DisplayPasteOptions", QVariant(value)); }


inline PowerPoint::Application* CommandEffect::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline QString CommandEffect::Command() const
{
    QVariant qax_result = property("Command");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CommandEffect::SetCommand(const QString& value){ setProperty("Command", QVariant(value)); }

inline IDispatch* CommandEffect::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::MsoAnimCommandType CommandEffect::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimCommandType*)qax_result.constData();
}
inline void CommandEffect::SetType(PowerPoint::MsoAnimCommandType value){ setProperty("Type", QVariant(value)); }


inline PowerPoint::Application* FilterEffect::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline IDispatch* FilterEffect::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline Office::MsoTriState FilterEffect::Reveal() const
{
    QVariant qax_result = property("Reveal");
    Q_ASSERT(qax_result.isValid());
    return *(Office::MsoTriState*)qax_result.constData();
}
inline void FilterEffect::SetReveal(Office::MsoTriState value){ setProperty("Reveal", QVariant(value)); }

inline PowerPoint::MsoAnimFilterEffectSubtype FilterEffect::Subtype() const
{
    QVariant qax_result = property("Subtype");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimFilterEffectSubtype*)qax_result.constData();
}
inline void FilterEffect::SetSubtype(PowerPoint::MsoAnimFilterEffectSubtype value){ setProperty("Subtype", QVariant(value)); }

inline PowerPoint::MsoAnimFilterEffectType FilterEffect::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimFilterEffectType*)qax_result.constData();
}
inline void FilterEffect::SetType(PowerPoint::MsoAnimFilterEffectType value){ setProperty("Type", QVariant(value)); }


inline PowerPoint::Application* SetEffect::Application() const
{
    PowerPoint::Application* qax_pointer = 0;
    qRegisterMetaType("Application*", &qax_pointer);
    qRegisterMetaType("Application", qax_pointer);
    QVariant qax_result = property("Application");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::Application**)qax_result.constData();
}

inline IDispatch* SetEffect::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline PowerPoint::MsoAnimProperty SetEffect::Property() const
{
    QVariant qax_result = property("Property");
    Q_ASSERT(qax_result.isValid());
    return *(PowerPoint::MsoAnimProperty*)qax_result.constData();
}
inline void SetEffect::SetProperty(PowerPoint::MsoAnimProperty value){ setProperty("Property", QVariant(value)); }

inline QVariant SetEffect::To() const
{
    QVariant qax_result = property("To");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void SetEffect::SetTo(const QVariant& value){ setProperty("To", QVariant(value)); }



#endif

}

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Collection *t)
{ Q_ASSERT(!t); return new PowerPoint::Collection; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::_Application *t)
{ Q_ASSERT(!t); return new PowerPoint::_Application; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::_Global *t)
{ Q_ASSERT(!t); return new PowerPoint::_Global; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Application *t)
{ Q_ASSERT(!t); return new PowerPoint::Application; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Global *t)
{ Q_ASSERT(!t); return new PowerPoint::Global; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ColorFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::ColorFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::SlideShowWindow *t)
{ Q_ASSERT(!t); return new PowerPoint::SlideShowWindow; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Selection *t)
{ Q_ASSERT(!t); return new PowerPoint::Selection; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::DocumentWindows *t)
{ Q_ASSERT(!t); return new PowerPoint::DocumentWindows; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::SlideShowWindows *t)
{ Q_ASSERT(!t); return new PowerPoint::SlideShowWindows; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::DocumentWindow *t)
{ Q_ASSERT(!t); return new PowerPoint::DocumentWindow; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::View *t)
{ Q_ASSERT(!t); return new PowerPoint::View; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::SlideShowView *t)
{ Q_ASSERT(!t); return new PowerPoint::SlideShowView; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::SlideShowSettings *t)
{ Q_ASSERT(!t); return new PowerPoint::SlideShowSettings; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::NamedSlideShows *t)
{ Q_ASSERT(!t); return new PowerPoint::NamedSlideShows; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::NamedSlideShow *t)
{ Q_ASSERT(!t); return new PowerPoint::NamedSlideShow; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::PrintOptions *t)
{ Q_ASSERT(!t); return new PowerPoint::PrintOptions; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::PrintRanges *t)
{ Q_ASSERT(!t); return new PowerPoint::PrintRanges; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::PrintRange *t)
{ Q_ASSERT(!t); return new PowerPoint::PrintRange; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::AddIns *t)
{ Q_ASSERT(!t); return new PowerPoint::AddIns; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::AddIn *t)
{ Q_ASSERT(!t); return new PowerPoint::AddIn; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Presentations *t)
{ Q_ASSERT(!t); return new PowerPoint::Presentations; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Presentation *t)
{ Q_ASSERT(!t); return new PowerPoint::Presentation; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Hyperlinks *t)
{ Q_ASSERT(!t); return new PowerPoint::Hyperlinks; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Hyperlink *t)
{ Q_ASSERT(!t); return new PowerPoint::Hyperlink; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::PageSetup *t)
{ Q_ASSERT(!t); return new PowerPoint::PageSetup; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Fonts *t)
{ Q_ASSERT(!t); return new PowerPoint::Fonts; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ExtraColors *t)
{ Q_ASSERT(!t); return new PowerPoint::ExtraColors; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Slides *t)
{ Q_ASSERT(!t); return new PowerPoint::Slides; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::_Slide *t)
{ Q_ASSERT(!t); return new PowerPoint::_Slide; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::SlideRange *t)
{ Q_ASSERT(!t); return new PowerPoint::SlideRange; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::_Master *t)
{ Q_ASSERT(!t); return new PowerPoint::_Master; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Slide *t)
{ Q_ASSERT(!t); return new PowerPoint::Slide; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ColorSchemes *t)
{ Q_ASSERT(!t); return new PowerPoint::ColorSchemes; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ColorScheme *t)
{ Q_ASSERT(!t); return new PowerPoint::ColorScheme; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::RGBColor *t)
{ Q_ASSERT(!t); return new PowerPoint::RGBColor; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::SlideShowTransition *t)
{ Q_ASSERT(!t); return new PowerPoint::SlideShowTransition; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::SoundEffect *t)
{ Q_ASSERT(!t); return new PowerPoint::SoundEffect; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::SoundFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::SoundFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::HeadersFooters *t)
{ Q_ASSERT(!t); return new PowerPoint::HeadersFooters; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Shapes *t)
{ Q_ASSERT(!t); return new PowerPoint::Shapes; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Placeholders *t)
{ Q_ASSERT(!t); return new PowerPoint::Placeholders; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::PlaceholderFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::PlaceholderFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::FreeformBuilder *t)
{ Q_ASSERT(!t); return new PowerPoint::FreeformBuilder; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Shape *t)
{ Q_ASSERT(!t); return new PowerPoint::Shape; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ShapeRange *t)
{ Q_ASSERT(!t); return new PowerPoint::ShapeRange; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::GroupShapes *t)
{ Q_ASSERT(!t); return new PowerPoint::GroupShapes; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Adjustments *t)
{ Q_ASSERT(!t); return new PowerPoint::Adjustments; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::PictureFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::PictureFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::FillFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::FillFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::LineFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::LineFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ShadowFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::ShadowFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ConnectorFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::ConnectorFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::TextEffectFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::TextEffectFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ThreeDFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::ThreeDFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::TextFrame *t)
{ Q_ASSERT(!t); return new PowerPoint::TextFrame; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::CalloutFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::CalloutFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ShapeNodes *t)
{ Q_ASSERT(!t); return new PowerPoint::ShapeNodes; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ShapeNode *t)
{ Q_ASSERT(!t); return new PowerPoint::ShapeNode; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::OLEFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::OLEFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::LinkFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::LinkFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ObjectVerbs *t)
{ Q_ASSERT(!t); return new PowerPoint::ObjectVerbs; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::AnimationSettings *t)
{ Q_ASSERT(!t); return new PowerPoint::AnimationSettings; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ActionSettings *t)
{ Q_ASSERT(!t); return new PowerPoint::ActionSettings; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ActionSetting *t)
{ Q_ASSERT(!t); return new PowerPoint::ActionSetting; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::PlaySettings *t)
{ Q_ASSERT(!t); return new PowerPoint::PlaySettings; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::TextRange *t)
{ Q_ASSERT(!t); return new PowerPoint::TextRange; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Ruler *t)
{ Q_ASSERT(!t); return new PowerPoint::Ruler; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::RulerLevels *t)
{ Q_ASSERT(!t); return new PowerPoint::RulerLevels; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::RulerLevel *t)
{ Q_ASSERT(!t); return new PowerPoint::RulerLevel; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::TabStops *t)
{ Q_ASSERT(!t); return new PowerPoint::TabStops; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::TabStop *t)
{ Q_ASSERT(!t); return new PowerPoint::TabStop; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Font *t)
{ Q_ASSERT(!t); return new PowerPoint::Font; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ParagraphFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::ParagraphFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::BulletFormat *t)
{ Q_ASSERT(!t); return new PowerPoint::BulletFormat; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::TextStyles *t)
{ Q_ASSERT(!t); return new PowerPoint::TextStyles; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::TextStyle *t)
{ Q_ASSERT(!t); return new PowerPoint::TextStyle; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::TextStyleLevels *t)
{ Q_ASSERT(!t); return new PowerPoint::TextStyleLevels; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::TextStyleLevel *t)
{ Q_ASSERT(!t); return new PowerPoint::TextStyleLevel; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::HeaderFooter *t)
{ Q_ASSERT(!t); return new PowerPoint::HeaderFooter; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::_Presentation *t)
{ Q_ASSERT(!t); return new PowerPoint::_Presentation; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Tags *t)
{ Q_ASSERT(!t); return new PowerPoint::Tags; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::OCXExtender *t)
{ Q_ASSERT(!t); return new PowerPoint::OCXExtender; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::OLEControl *t)
{ Q_ASSERT(!t); return new PowerPoint::OLEControl; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Table *t)
{ Q_ASSERT(!t); return new PowerPoint::Table; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Columns *t)
{ Q_ASSERT(!t); return new PowerPoint::Columns; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Column *t)
{ Q_ASSERT(!t); return new PowerPoint::Column; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Rows *t)
{ Q_ASSERT(!t); return new PowerPoint::Rows; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Row *t)
{ Q_ASSERT(!t); return new PowerPoint::Row; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::CellRange *t)
{ Q_ASSERT(!t); return new PowerPoint::CellRange; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Cell *t)
{ Q_ASSERT(!t); return new PowerPoint::Cell; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Borders *t)
{ Q_ASSERT(!t); return new PowerPoint::Borders; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Panes *t)
{ Q_ASSERT(!t); return new PowerPoint::Panes; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Pane *t)
{ Q_ASSERT(!t); return new PowerPoint::Pane; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::DefaultWebOptions *t)
{ Q_ASSERT(!t); return new PowerPoint::DefaultWebOptions; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::WebOptions *t)
{ Q_ASSERT(!t); return new PowerPoint::WebOptions; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::PublishObjects *t)
{ Q_ASSERT(!t); return new PowerPoint::PublishObjects; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::PublishObject *t)
{ Q_ASSERT(!t); return new PowerPoint::PublishObject; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Master *t)
{ Q_ASSERT(!t); return new PowerPoint::Master; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::_PowerRex *t)
{ Q_ASSERT(!t); return new PowerPoint::_PowerRex; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::PowerRex *t)
{ Q_ASSERT(!t); return new PowerPoint::PowerRex; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Comments *t)
{ Q_ASSERT(!t); return new PowerPoint::Comments; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Comment *t)
{ Q_ASSERT(!t); return new PowerPoint::Comment; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Designs *t)
{ Q_ASSERT(!t); return new PowerPoint::Designs; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Design *t)
{ Q_ASSERT(!t); return new PowerPoint::Design; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::DiagramNode *t)
{ Q_ASSERT(!t); return new PowerPoint::DiagramNode; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::DiagramNodeChildren *t)
{ Q_ASSERT(!t); return new PowerPoint::DiagramNodeChildren; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::DiagramNodes *t)
{ Q_ASSERT(!t); return new PowerPoint::DiagramNodes; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Diagram *t)
{ Q_ASSERT(!t); return new PowerPoint::Diagram; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::TimeLine *t)
{ Q_ASSERT(!t); return new PowerPoint::TimeLine; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Sequences *t)
{ Q_ASSERT(!t); return new PowerPoint::Sequences; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Sequence *t)
{ Q_ASSERT(!t); return new PowerPoint::Sequence; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Effect *t)
{ Q_ASSERT(!t); return new PowerPoint::Effect; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Timing *t)
{ Q_ASSERT(!t); return new PowerPoint::Timing; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::EffectParameters *t)
{ Q_ASSERT(!t); return new PowerPoint::EffectParameters; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::EffectInformation *t)
{ Q_ASSERT(!t); return new PowerPoint::EffectInformation; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::AnimationBehaviors *t)
{ Q_ASSERT(!t); return new PowerPoint::AnimationBehaviors; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::AnimationBehavior *t)
{ Q_ASSERT(!t); return new PowerPoint::AnimationBehavior; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::MotionEffect *t)
{ Q_ASSERT(!t); return new PowerPoint::MotionEffect; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ColorEffect *t)
{ Q_ASSERT(!t); return new PowerPoint::ColorEffect; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::ScaleEffect *t)
{ Q_ASSERT(!t); return new PowerPoint::ScaleEffect; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::RotationEffect *t)
{ Q_ASSERT(!t); return new PowerPoint::RotationEffect; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::PropertyEffect *t)
{ Q_ASSERT(!t); return new PowerPoint::PropertyEffect; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::AnimationPoints *t)
{ Q_ASSERT(!t); return new PowerPoint::AnimationPoints; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::AnimationPoint *t)
{ Q_ASSERT(!t); return new PowerPoint::AnimationPoint; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::CanvasShapes *t)
{ Q_ASSERT(!t); return new PowerPoint::CanvasShapes; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::AutoCorrect *t)
{ Q_ASSERT(!t); return new PowerPoint::AutoCorrect; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::Options *t)
{ Q_ASSERT(!t); return new PowerPoint::Options; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::CommandEffect *t)
{ Q_ASSERT(!t); return new PowerPoint::CommandEffect; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::FilterEffect *t)
{ Q_ASSERT(!t); return new PowerPoint::FilterEffect; }

template<>
inline void *qMetaTypeConstructHelper(const PowerPoint::SetEffect *t)
{ Q_ASSERT(!t); return new PowerPoint::SetEffect; }

#endif

